{"_id":"21weQHTapjRNlChg","name":"Combate","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/combat.svg","scope":"global","command":"function round5(x) {\n    return Math.round(x / 5) * 5;\n}\n\nfunction cuenta(ATK, DEF, TA, BDMG) {\n    if (DEF > ATK) {\n        return (DEF - ATK) / 2;\n    }\n    return (BDMG * (ATK - (DEF + TA * 10))) / 100;\n}\n\nfunction onSubmit() {\n    var ATK = parseInt(document.getElementById(\"ATK\").value);\n    var DEF = parseInt(document.getElementById(\"DEF\").value);\n    var TA = parseInt(document.getElementById(\"TA\").value);\n    var BDMG = parseInt(document.getElementById(\"BDMG\").value);\n\n    let final = '<div>HA: ' + ATK + ', HD: ' + DEF+ ', TA: ' + TA + ', Daño Base: ' + BDMG + '</div>'\n    if (DEF > ATK) {\n        final = final + '<h2>Bono al contraataque: <span style=\"color:#ff1515\">' + round5(cuenta(ATK, DEF, TA, BDMG)) + '</span></h2>';\n    } else {\n        final = final + '<h2>Daño final: <span style=\"color:#ff1515\">' + round5(cuenta(ATK, DEF, TA, BDMG)) + '</span></h2>';\n    }\n\n    ChatMessage.create({ content: final, whisper: game.collections.get(\"User\").filter((u) => u.isGM).map((u) => game.data.userId) })\n}\n\nlet d = new Dialog({\n    title: \"Calcular daño final\",\n    content: `\n    <div> \n        Ataque: <input type=\"number\" id=\"ATK\"/><br />\n        Defensa: <input type=\"number\" id=\"DEF\"/><br />\n        Tipo de Armadura: <input type=\"number\" id=\"TA\" value=\"0\"/><br />\n        Daño base: <input type=\"number\" id=\"BDMG\" value=\"0\" /><br />\n    </div>`,\n    buttons: {\n        aceptar: {\n            label: \"Aceptar\",\n            callback: () => onSubmit()\n        }\n    },\nrender: () => $('#ATK').focus()\n});\n\nd.render(true)","folder":"Ri9hZtL7zyuumwkV","sort":100000,"flags":{},"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332035451,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"folder":"GaivoXF6EoFyryGU","name":"Descansar","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/sleep.svg","scope":"global","command":"let myContent = `\n    Días descansando <input id=\"resting\" type=\"number\" value=\"1\" />\n`;\n\nnew Dialog({\n  title: \"Descanso\",\n  content: myContent,\n  buttons: {\n    button1: {\n      label: \"Descansar\",\n      callback: (html) => myCallback(html),\n      icon: `<i class=\"fas fa-check\"></i>`,\n    },\n  },\n}).render(true);\n\nfunction myCallback(html) {\n  let restingDays = parseInt(html.find(\"input#resting\").val());\n\n  let actor = _token.actor;\n  let hp = actor.system.characteristics.secondaries.lifePoints;\n  let fatigue = actor.system.characteristics.secondaries.fatigue;\n  //let penFisico = actor.system.general.modifiers.modFisico.final\n  let ki = actor.system.domine.kiAccumulation.generic;\n  let zeon = actor.system.mystic.zeon;\n  let cv = actor.system.psychic.psychicPoints;\n\n  let regHp =\n    Math.min(restingDays *\n      Math.floor(\n        (actor.system.characteristics.primaries.constitution.value ?? 5 * 4) / 5\n      ) * 5,\n      hp.max - hp.value\n    );\n  let regFatigue =\n    Math.min(fatigue.max, fatigue.max - fatigue.value);\n  let regKi = Math.min(ki.max, ki.max - ki.value);\n  let dailyCosts = !actor.system.mystic.spellMaintenances.length\n    ? 0\n    : restingDays *actor.system.mystic.spellMaintenances.reduce(\n        (accumulator, currentValue) =>\n          accumulator + currentValue.system.cost.value,\n        0\n      );\n  let regZeon =\n    Math.min(\n      restingDays *actor.system.mystic.zeonRegeneration.final.value,\n      zeon.max - zeon.value\n    );\n  let regCv = Math.min(cv.max, cv.max - cv.value);\n\n  let newHp = hp.value + regHp;\n  let newFatigue = fatigue.value + regFatigue;\n  let newKi = ki.value + regKi;\n  let newZeon = zeon.value + regZeon;\n  let newCv = cv.value + regCv;\n\n  console.log(`\ndescansa${restingDays > 1 ? `${restingDays} días` : ``}: \n| Vida: ${newHp} (+${regHp})\n| Cansancio: ${newFatigue} (+${regFatigue})\n| Ki: ${newKi} (+${regHp})\n| Zeon: ${newZeon} (+${regZeon})\n| CV: ${newCv} (+${regCv})`);\n\n  actor.update({\n    data: {\n      characteristics: {\n        secondaries: {\n          lifePoints: { value: newHp },\n          fatigue: { value: newFatigue },\n        },\n      },\n      mystic: {\n        zeon: { value: newZeon },\n      },\n      domine: { kiAccumulation: { generic: { value: newKi } } },\n      psychic: {\n        psychicPoints: { value: newCv },\n      },\n    },\n  });\n\n  ChatMessage.create({\n    flavor: `\n        ${actor.name} descansa${restingDays > 1 ? `${restingDays} días` : ``}: \n      | Vida: ${newHp} (+${regHp})\n      | Cansancio: ${newFatigue} (+${regFatigue})\n      | Ki: ${newKi} (+${regKi})\n      | Zeon: ${newZeon} (+${regZeon})\n      | CV: ${newCv} (+${regCv})`,\n    whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n  });\n}","sort":100000,"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695383583734,"modifiedTime":1695804958866,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"2RZMfs0PCeu2Uhw4"}
{"folder":"GaivoXF6EoFyryGU","name":"Potencial Psíquico","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/magic/perception/third-eye-blue-red.webp","scope":"global","command":"let currentToken, currentActor;\n\n//TODO: Export from guote-module\nconst getFormula = ({ dice = \"1d100xa\", values = [], labels = [\"\"] }) => {\n  let formula = `${dice}`;\n\n  for (let i = 0; i < values.length; i++) {\n    let value = parseInt(values[i]);\n    if (value === 0 || isNaN(value)) continue;\n\n    formula = `\n        ${formula} ${value > 0 ? \"+\" : \"\"}\n        ${value}${labels?.[i] ? `[${labels[i]}]` : \"\"}`;\n  }\n  console.log(\"formula\", formula);\n  return formula;\n};\n\nif (typeof token !== \"undefined\") {\n  // Scope defined in external macro or module\n  currentToken = token;\n  currentActor = token.actor;\n} else if (canvas.tokens.controlled?.[0]) {\n  currentToken = canvas.tokens.controlled[0];\n  currentActor = currentToken.document.actor;\n} else {\n  let defaultActorId = game.users.get(game.userId)._source.character;\n  currentActor = game.actors.get(defaultActorId);\n  currentToken = currentActor.getActiveTokens()[0];\n}\n\nconst psych = currentActor.system.psychic;\nconst macroCookies = currentActor.system?.macroCookies?.potencialPsiquico;\nconst proyTypes = {\n  offensive: {\n    name: \"offensive\",\n    label: \"Proyección ofensiva\",\n  },\n  defensive: {\n    name: \"defensive\",\n    label: \"Proyección defensiva\",\n  },\n};\n\nlet htmlPowersOptions = \"\";\npsych.psychicPowers?.forEach((power) => {\n  htmlPowersOptions = `${htmlPowersOptions}\n  <option value=\"${power.name}\" ${\n    macroCookies?.powerUsed === power.name ? \"selected\" : \"\"\n  }>${power.name} (+${power.system.bonus.value})</option>\n  `;\n});\n\nlet htmlStyle = `\n<style>\n  .radio-toolbar-3 {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 8px 0 rgba(0, 0, 0, 0.19);\n    width: 100%;\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n  }\n\n  .radio-toolbar-3 label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: 0.3rem 0 0.3rem 0;\n    font-size: 1rem;\n    text-align: center;\n}\n\n  .radio-toolbar-3 label:hover {\n    background-color: #B4B4B4;\n    font-weigth: 1000;\n  }\n\n  .radio-toolbar-3 input[type=\"radio\"]:checked+label {\n    background-color: #782e22;\n    color: white;\n  }\n\n  input[type=\"radio\"] {\n    position: fixed;\n    opacity: 0;\n    pointer-events: none;\n  }\n</style>\n`;\nlet htmlRadioSection = `\n<br>\n  <div class=\"radio-toolbar-3\">\n    <input \n      type=\"radio\" \n      id=\"${proyTypes.offensive.name}\" \n      name=\"mode\" \n      value=\"${proyTypes.offensive.name}\"\n      ${macroCookies?.proyType === proyTypes.offensive.name ? \"checked\" : \"\"}\n    >\n    <label for=\"${proyTypes.offensive.name}\">\n      ${proyTypes.offensive.label}\n    </label>\n\n    <input \n      type=\"radio\" \n      id=\"${proyTypes.defensive.name}\" \n      name=\"mode\" \n      value=\"${proyTypes.defensive.name}\"\n      ${macroCookies?.proyType === proyTypes.defensive.name ? \"checked\" : \"\"}\n    >\n    <label for=\"${proyTypes.defensive.name}\">\n    ${proyTypes.defensive.label}\n    </label>\n  </div>\n`;\nlet dialogContent = `\n${htmlStyle}\n<center>\n  <div class=\"flex flex-row\">\n    <label>\n      <h4><b>Potencial Psíquico:</b> +${psych.psychicPotential.final.value}</h4>\n      Bono extra\n      <input \n        ${\n          macroCookies?.modPot && macroCookies?.modPot !== 0\n            ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n            : \"\"\n        }\n        type=\"Number\" id=\"modPot\" name=\"modPot\" placeholder=\"0\" \n          value=\"${macroCookies?.modPot ?? 0}\" autofocus\n      >\n    </label>\n    <label>\n    <h4><b>Proyección Psíquica:</b> +${\n      psych.psychicProjection.imbalance.offensive.final.value\n    } / +${psych.psychicProjection.imbalance.defensive.final.value}</h4>\n    Bono extra\n    <input \n    ${\n      macroCookies?.modProy && macroCookies?.modProy !== 0\n        ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n        : \"\"\n    }\n    type=\"Number\" id=\"modProy\" name=\"modProy\" placeholder=\"0\" \n      value=\"${macroCookies?.modProy ?? 0}\"\n  >\n    </label>      \n  </div>\n</center>\n${htmlRadioSection}\n<br>\n<center>\n  <label>\n    <small>Poder usado</small>\n    <select id=\"power\">\n      <option value=\"0\">Indefinido</option>\n      ${htmlPowersOptions}\n    </select>\n  </label>\n</center>\n<br>\n`;\n\nlet d = new Dialog({\n  title: `Potencial psíquico: ${currentToken.name}`,\n  content: dialogContent,\n  buttons: {\n    confirm: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Confirmar\",\n      callback: (html) => {\n        let modPot = Number(html[0].querySelector(\"#modPot\").value) ?? 0;\n        let powerUsed = html[0].querySelector(\"#power\").value;\n        let powerUsedData = psych.psychicPowers.find(\n          (power) => power.name === powerUsed\n        )?.system;\n        let modPotPower = powerUsedData?.bonus?.value ?? 0;\n        let modProy = Number(html[0].querySelector(\"#modProy\").value) ?? 0;\n        const mode =\n          html[0].querySelector(\"input[name=mode]:checked\")?.value ??\n          \"ofensiva\";\n\n        let formulaPot = getFormula({\n          values: [psych.psychicPotential.final.value, modPotPower, modPot],\n          labels: [\"Pot\", \"Poder\", \"Mod\"],\n        });\n        let formulaProy = getFormula({\n          values: [\n            psych.psychicProjection.imbalance[proyTypes[mode]?.name].final\n              .value,\n            modProy,\n          ],\n          labels: [\"Proy\", \"Mod\"],\n        });\n\n        const rollPot = new ABFFoundryRoll(formulaPot);\n        rollPot.roll();\n        rollPot.toMessage({\n          flavor: `Potencial psíquico: \"${powerUsed}\"`,\n          speaker: ChatMessage.getSpeaker({ token: actor }),\n        });\n        const rollProy = new ABFFoundryRoll(formulaProy);\n        rollProy.roll();\n        rollProy.toMessage({\n          flavor: `${proyTypes[mode].label}`,\n          speaker: ChatMessage.getSpeaker({ token: actor }),\n        });\n\n        // Find actual power used and whisp it to gm\n        let difficultyMet =\n          Math.max(\n            ...[0, 20, 40, 80, 120, 140, 180, 240, 280, 320, 440].filter(\n              (key) => rollPot.total > key\n            )\n          ) ?? 0;\n        let powerEffect = powerUsedData?.effects?.[difficultyMet]?.value;\n\n        if (powerEffect) {\n          ChatMessage.create({\n            speaker: ChatMessage.getSpeaker({ token: actor }),\n            flavor: `Poder usado: ${powerUsed} con potencial ${difficultyMet}`,\n            content: `Efecto: ${powerEffect}`,\n            whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n          });\n        }\n\n        // Register data to macroCookies\n        currentActor.update({\n          \"system.macroCookies.potencialPsiquico.modPot\": modPot,\n          \"system.macroCookies.potencialPsiquico.powerUsed\": powerUsed,\n          \"system.macroCookies.potencialPsiquico.modProy\": modProy,\n          \"system.macroCookies.potencialPsiquico.proyType\": mode,\n        });\n      },\n    },\n  },\n  confirm: \"yes\",\n  render: () => $(\"#modificador\").focus(),\n}).render(true);","sort":0,"ownership":{"default":2},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1698057492634,"modifiedTime":1698065139468,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"6fztOkUgOmfYSwPm"}
{"folder":"GaivoXF6EoFyryGU","name":"En Llamas","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/magic/fire/flame-burning-creature-skeleton.webp","scope":"global","command":"if (!_token) throw new Error(\"Selecciona un token\");\n\nif (typeof token !== \"undefined\") {\n  // Scope defined in external macro or module\n  currentToken = token;\n  currentActor = token.actor;\n} else if (canvas.tokens.controlled?.[0]) {\n  currentToken = canvas.tokens.controlled[0];\n  currentActor = currentToken.document.actor;\n} else {\n  let defaultActorId = game.users.get(game.userId)._source.character;\n  currentActor = game.actors.get(defaultActorId);\n}\n\nconst target = currentActor;\n\nconst macroCookies = target.system?.macroCookies?.enLlamas;\nconst isAccumulation = target.system.general.settings.defenseType.value !== \"\";\nconst targetMaxAgiDes = Math.max(\n  ...[\n    target.system.characteristics.primaries.agility.value,\n    target.system.characteristics.primaries.dexterity.value,\n  ]\n);\nconst calTA = target.system.combat.totalArmor.at.heat.value;\n\nconst getFormula = ({ dice = \"1d100xa\", values = [], labels = [\"\"] }) => {\n  let formula = `${dice}`;\n\n  for (let i = 0; i < values.length; i++) {\n    let value = parseInt(values[i]);\n    if (value === 0) continue;\n\n    formula = `\n        ${formula} ${value > 0 ? \"+\" : \"\"}\n        ${value}${labels?.[i] ? `[ ${labels[i]} ]` : \"\"}`;\n  }\n  return formula;\n};\n\nconst enLlamasLevels = {\n  0: {\n    label: \"Normal\",\n    damage: 0,\n    increaseperTurn: 0,\n    description: \"Sin daño\",\n  },\n  100: {\n    label: \"Prendido\",\n    damage: 0,\n    increaseperTurn: 10,\n    description: \"Sin daño\",\n  },\n  180: {\n    label: \"Ardiendo\",\n    damage: 10,\n    reducedByArmor: \"all\",\n    increaseperTurn: 10,\n    description: \"10 de daño por turno (·5 si es de acumulación)\",\n  },\n  240: {\n    label: \"En llamas\",\n    damage: 25,\n    reducedByArmor: \"all\",\n    increaseperTurn: 10,\n    description: \"25 de daño por turno (·5 si es de acumulación)\",\n  },\n  300: {\n    label: \"Calcinado\",\n    damage: 50,\n    reducedByArmor: \"natural\",\n    increaseperTurn: 10,\n    description: \"50 de daño por turno (·5 si es de acumulación)\",\n  },\n};\nconst getStateFromValue = (value = 0) => {\n  let currentStateKey =\n    Math.max(...Object.keys(enLlamasLevels).filter((key) => value > key)) ?? 0;\n  return enLlamasLevels[currentStateKey] ?? enLlamasLevels[\"0\"];\n};\nconst reactions = {\n  attack: { name: \"attack\", label: \"Ataque recibido\" },\n  putOut: { name: \"putOut\", label: \"Tratar de apagarse\" },\n  nothing: { name: \"nothing\", label: \"No hacer nada\" },\n};\n\nconst styles = `\n<style>\n  .radio-toolbar-3 {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 8px 0 rgba(0, 0, 0, 0.19);\n    width: 100%;\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n  }\n\n  .radio-toolbar-3 label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: 0.3rem 0 0.3rem 0;\n    font-size: 1rem;\n    text-align: center;\n}\n\n  .radio-toolbar-3 label:hover {\n    background-color: #B4B4B4;\n    font-weigth: 1000;\n  }\n\n  .radio-toolbar-3 input[type=\"radio\"]:checked+label {\n    background-color: #782e22;\n    color: white;\n  }\n\n  input[type=\"radio\"] {\n    position: fixed;\n    opacity: 0;\n    pointer-events: none;\n  }\n</style>\n`;\nconst radioSection = `\n<div class=\"radio-toolbar-3\">\n<input \n  type=\"radio\" \n  id=\"${reactions.attack.name}\" \n  name=\"mode\" \n  value=\"${reactions.attack.name}\"\n  ${macroCookies?.reaction === reactions.attack.name ? \"checked\" : \"\"}\n>\n<label for=\"${reactions.attack.name}\">\n  ${reactions.attack.label}\n</label>\n\n<input \n  type=\"radio\" \n  id=\"${reactions.putOut.name}\" \n  name=\"mode\" \n  value=\"${reactions.putOut.name}\"\n  ${macroCookies?.reaction === reactions.putOut.name ? \"checked\" : \"\"}\n>\n<label for=\"${reactions.putOut.name}\">\n  ${reactions.putOut.label}\n</label>\n\n<input \n  type=\"radio\" \n  id=\"${reactions.nothing.name}\" \n  name=\"mode\" \n  value=\"${reactions.nothing.name}\"\n  ${macroCookies?.reaction === reactions.nothing.name ? \"checked\" : \"\"}\n>\n<label for=\"${reactions.nothing.name}\">\n  ${reactions.nothing.label}\n</label>\n</div>\n<br> \n`;\nconst dialogContent = `\n${styles}\n  <center><h3>En Llamas. Contador actual : ${\n    macroCookies?.value ?? 0\n  }</h3></center>\n  <b>· ${\n    reactions.attack.label\n  }:</b><small> Se tira 1d100 + daño recibido + modificadores (+10-40 por ropas inflamables, hasta -60 por armaduas resistentes, -20 por cada Intensidad a la que seas inmune...)</small>.<br>\n  <b>·  ${\n    reactions.putOut.label\n  }:</b> <small> Usar 1 acción activa para rodar o algo similar. Reduce el contador en 1d10 +\n    ${targetMaxAgiDes} (Destreza o Agilidad, lo que sea mayor)\n    , o más segun la situación.</small><br>\n  <b>·  ${\n    reactions.nothing.label\n  }:</b> <small>Si estás en llamas, el contador sube 10 por turno.</small>  <br>\n  <br>\n\n    <form class=\"flexcol\">\n      <div class=\"form-group\">\n      <center>\n        <label>Modificador a la tirada\n          <input type=\"Number\" id=\"mod\" name=\"mod\" placeholder=\"Modificador a la tirada\" autofocus>\n        </label>\n      </center>\n      <center>\n        <label>Daño recibido\n          <input type=\"Number\" id=\"attackDamage\" name=\"attackDamage\" placeholder=\"Daño sufrido\" autofocus>\n        </label>\n      </center>\n      </div>\n      <div class=\"form-group\">\n        <textarea name=\"comments\" placeholder=\"Comentarios\"></textarea>\n      </div>\n    </form>\n  <br>\n`;\n\nconst applyDamage = () => {\n  // Calculate Damage\n  const currentState = getStateFromValue(macroCookies?.value ?? 0);\n\n  const damagePerTurn = isAccumulation\n    ? currentState?.damage * 5 - calTA * 5\n    : currentState?.damage - calTA * 2;\n\n  const newLifePoints = Math.max(\n    0,\n    target.system.characteristics.secondaries.lifePoints.value - damagePerTurn\n  );\n\n  target.update({\n    \"system.characteristics.secondaries.lifePoints.value\": newLifePoints,\n  });\n\n  return damagePerTurn;\n};\n\nconst applyReaction = ({ html, inFlamesDamage, reactionName }) => {\n  // Get data from html and define variables\n  let oldValue = macroCookies?.value ?? 0;\n  const oldState = getStateFromValue(oldValue);\n  let newValue;\n  const mod = Number(html[0].querySelector(\"#mod\").value) ?? 0;\n  const damage = Number(html[0].querySelector(\"#attackDamage\").value) ?? 0;\n  const comments = html.find('[id=\"comments\"]').val() ?? \"\";\n\n  const damageFormula = getFormula({\n    dice: \"1d100\",\n    values: [macroCookies?.value ?? 0, damage, mod],\n    labels: [\"Valor previo\", \"Daño\", \"Mod\"],\n  });\n  const accumulationDamageFormula = `${\n    macroCookies?.value ?? 0\n  }[Valor previo] + (${getFormula({\n    dice: \"1d100\",\n    values: [damage, mod],\n    labels: [\"Daño\", \"Mod\"],\n  })})/5`;\n  const actionCases = {\n    [reactions.attack.name]: () => {\n      const roll = new ABFFoundryRoll(\n        `${isAccumulation ? `${accumulationDamageFormula}` : damageFormula}`\n      );\n      roll.roll();\n      newValue = Math.max(0, roll._total);\n\n      roll.toMessage({\n        flavor: `En llamas: ${reactions?.[reactionName]?.label}.`,\n        content: `${comments ? `<br>${comments}` : \"\"}`,\n      });\n    },\n    [reactions.putOut.name]: () => {\n      const roll = new ABFFoundryRoll(\n        getFormula({\n          dice: \"-1d10\",\n          values: [-targetMaxAgiDes, macroCookies?.value ?? 0, mod],\n          labels: [\"Agi/Des\", \"Valor previo\", \"Mod\"],\n        })\n      );\n      roll.roll();\n      newValue = Math.max(0, roll._total);\n      roll.toMessage({\n        flavor: `En llamas: ${reactions?.[reactionName]?.label}.`,\n        content: `${comments ? `<br>${comments}` : \"\"}`,\n      });\n    },\n    [reactions.nothing.name]: () => {\n      const roll = new ABFFoundryRoll(\n        getFormula({\n          dice: \"0\",\n          values: [macroCookies?.value ?? 0, 10, mod],\n          labels: [\"valor previo\", \"Inacción\", \"Mod\"],\n        })\n      );\n      roll.roll();\n      newValue = Math.max(0, roll._total);\n      roll.toMessage({\n        flavor: `En llamas: ${reactions[reactionName].label}.`,\n        content: `${comments ? `<br>${comments}` : \"\"}`,\n      });\n    },\n  };\n\n  // Apply condition\n  newValue = Math.max(0, newValue);\n  actionCases[reactionName]();\n  if (newValue >= 100) {\n    game.cub.addCondition(\"En Llamas\", target);\n  } else {\n    game.cub.hasCondition(\"En Llamas\", target) &&\n      game.cub.removeCondition(\"En Llamas\", target);\n  }\n\n  // New \"En Llamas\" state\n  let newState = getStateFromValue(newValue);\n\n  // Guardamos el resultado, para que lo use el hook de guote-module en las rondas posteriores\n  target.update({\n    \"system.macroCookies.enLlamas.value\": newValue,\n  });\n\n  ChatMessage.create({\n    speaker: ChatMessage.getSpeaker({ token: actor }),\n    flavor: `En llamas: ${target.name}`,\n    content: `\n      Estado anterior: ${macroCookies?.value ?? 0} <small>(${\n      oldState?.label\n    })</small><br>\n      ${inFlamesDamage ? `<b>Daño recibido: ${inFlamesDamage} </b><br>` : \"\"}\n      Estado actual: <small>${newValue} (${newState?.label}, ${\n      newState.description\n    })</small> <br>\n    ${comments ? `<br>${comments}` : \"\"}`,\n    whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n  });\n};\n\nlet d = new Dialog({\n  title: `En llamas: ${currentToken.name || target.name}`,\n  content: dialogContent,\n  buttons: {\n    attack: {\n      icon: \"\",\n      label: `${reactions.attack?.label}`,\n      callback: (html) => {\n        const damageSuffered = applyDamage();\n        applyReaction({\n          html: html,\n          reactionName: reactions.attack.name,\n          damage: damageSuffered,\n        });\n      },\n    },\n    putOut: {\n      icon: \"\",\n      label: `<small>${reactions.putOut?.label}</small>`,\n      callback: (html) => {\n        const damageSuffered = applyDamage();\n        applyReaction({\n          html: html,\n          reactionName: reactions.putOut.name,\n          inFlamesDamage: damageSuffered,\n        });\n      },\n    },\n    nothing: {\n      icon: \"\",\n      label: `${reactions.nothing?.label}`,\n      callback: (html) => {\n        const damageSuffered = applyDamage();\n        applyReaction({\n          html: html,\n          reactionName: reactions.nothing.name,\n          inFlamesDamage: damageSuffered,\n        });\n      },\n    },\n  },\n  default: \"nothing\",\n  render: () => $(\"#modificador\").focus(),\n}).render(true);","sort":0,"ownership":{"default":2},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1697496253939,"modifiedTime":1698313059058,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"6vTTvUI764nHYr5J"}
{"folder":"S8Ht1aTB2GSXNfVJ","name":"applyFatigue","type":"script","author":"efyrn4Js5CqfguvB","img":"systems/animabf-guote/assets/icons/game-icons.net/ffffff/lorc/oppression.svg","scope":"global","command":"let effectLabel = \"Cansancio\";\nlet actors = game.actors.filter(\n  (act) =>\n    Object.values(act.getEmbeddedCollection(\"ActiveEffect\"))[1].filter(\n      (eff) => eff.label === \"Cansancio\" && eff.disabled === false\n    ).length\n);\nconsole.log(\"actors cansaitos\", actors);\nfatigueMod = {\n  [0]: -80,\n  [1]: -80,\n  [2]: -40,\n  [3]: -20,\n};\n\nlet cansancio;\nlet mod;\nfor (actor of actors) {\n  cansancio = actor.system.characteristics.secondaries.fatigue.value;\n  newMod = cansancio > 3 ? 0 : fatigueMod[cansancio];\n  penFisicoActual = actor.system.general.modifiers.modFisico.malus.value;\n  console.log(actor, \"cansancio\", cansancio,\"nuevoMod\", newMod, \"actual\", penFisicoActual)\n  if (newMod < penFisicoActual) {\n    actor.update({\n      system: {\n        general: { modifiers: { modFisico: { malus: { value: newMod } } } },\n      },\n    });\n  }\n}","sort":0,"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695331599439,"modifiedTime":1695335335503,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"87LDGoCsTzSm7ZJE"}
{"_id":"F3Fid0ws8VE4w318","name":"Ataque","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/sword.svg","scope":"global","command":"let actors = canvas.tokens.controlled.map((token) => {\n  return token.actor;\n});\nlet nombre;\nlet ataque;\nlet content = `\n  <form class=\"flexcol\">\n        <div class=\"form-group\">\n          <label for=\"modificador\">Modificadores</label>\n          <input type=\"Number\" id=\"modificador\" name=\"modificador\" placeholder=\"Modificador total\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label for=\"exampleSelect\">¿Arma usada?</label>\n          <select name=\"exampleSelect\">\n`;\n/* <div class=\"form-group\">\n          <label for=\"Cansancio\">Puntos de cansancio</label>\n          <input type=\"Number\" name=\"Cansancio\" placeholder=\"Cansancio gastado\">\n        </div> */\nfor (let actor of actors) {\n  nombre = actor.name;\n  ataque = actor.system.combat.attack.value;\n  console.log(actor.system.combat.weapons);\n  for (let weapon of actor.system.combat.weapons) {\n    console.log(weapon?.name || \"-\");\n    console.log(weapon?.data.attack.value || 0);\n    content =\n      content +\n      `<option value='{\n    \"name\":\"${weapon?.name || \"-\"}\",\n    \"atk\":\"${weapon?.system.attack.final.value || 0}\",\n    \"dmg\":\"${weapon?.system.damage.final.value || 0}\",\n    \"crit\":\"${weapon?.system.critic.primary.value || \"-\"}/${\n        weapon?.system.critic.secondary.value || \"-\"\n      }\",\n    \"special\":\"${weapon?.system.special.value}\"}'>${weapon?.name || \"-\"} </option>\n`;\n  }\n}\ncontent =\n  content +\n  `</select>\n        </div>\n        <div class=\"form-group\">\n          <textarea name=\"exampleText\" placeholder=\"Comentarios\"></textarea>\n        </div>\n      </form>`;\n\nconsole.log(content);\n\nlet d = new Dialog({\n  title: \"Ataque\",\n  content: content,\n  buttons: {\n    no: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Cancelar\",\n    },\n    yes: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Sí\",\n      callback: (html) => {\n        let mod = html.find('[name=\"modificador\"]').val();\n        /* let cans = html.find('[name=\"Cansancio\"]').val(); */\n        let selectedWeapon = JSON.parse(\n          html.find('[name=\"exampleSelect\"]').val()\n        );\n        let text = html.find('[name=\"exampleText\"]').val();\n        console.log(game);\n        const roll = new ABFFoundryRoll(\n          `1d100xa + ${selectedWeapon.atk} + ${mod | 0}` /* + ${cans | 0}*15 */\n        );\n        roll.roll();\n\n        let weaponDetails = `${selectedWeapon.name} | Daño: ${selectedWeapon.dmg} ${selectedWeapon.crit}\n              ${selectedWeapon.special} | ${text}`;\n\n        roll.toMessage({\n          flavor: `${nombre} ataca`,\n        });\n\n        ChatMessage.create({\n          flavor: `${weaponDetails}`,\n          whisper: game.collections\n            .get(\"User\")\n            .filter((u) => u.isGM)\n            .map((u) => game.data.userId),\n        });\n      },\n    },\n  },\n  default: \"yes\",\n  render: () => $(\"#modificador\").focus(),\n}).render(true);","folder":"Ri9hZtL7zyuumwkV","sort":200000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332036479,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"name":"Mark Dead","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/bones.svg","scope":"global","command":"/**\n*  This macro will mark the selected tokens as dead.\n*  If all the selected tokens are dead, they will be marked\n   as alive instead.\n*/\n\nfor (let e of canvas.tokens.controlled) {\n\tlet hasAlive = !e.document.getFlag(\"healthEstimate\", \"dead\")\n\te.document.setFlag(\"healthEstimate\", \"dead\", hasAlive)\n}","folder":"lVLZRwJ3hoj6OFc9","sort":150000,"flags":{"core":{"sourceId":"Macro.bCMlVEb7wx14ACIB"}},"_id":"H5n5sPmj01MSQTtv","ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695388109119,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"HlOvvgMFxDGQG7xF","name":"Defensa","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/shield.svg","scope":"global","command":"let actors = canvas.tokens.controlled.map(token => {return token.actor});\nlet parada;\nlet esquiva;\nlet nombre;\n  for(let actor of actors){\n    parada = actor.data.data.combat.block.final.value\n    esquiva = actor.data.data.combat.dodge.final.value\n    nombre = actor.data.name\n  }\n\nlet d = new Dialog({\n    title: 'Defensas',\n    content: `\n      <form class=\"flexcol\">\n        <div class=\"form-group\">\n          <label for=\"exampleInput\">Modificadores</label>\n          <input type=\"Number\" id=\"modificador\" name=\"exampleInput\" placeholder=\"Modificador total\">\n        </div>\n        <div class=\"form-group\">\n          <textarea name=\"exampleText\" placeholder=\"Comentarios\"></textarea>\n        </div>\n      </form>\n    `,\n    /* <div class=\"form-group\">\n          <label for=\"Cansancio\">Puntos de cansancio</label>\n          <input type=\"Number\" name=\"Cansancio\" placeholder=\"Cansancio gastado\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleSelect\">Defensa</label>\n          <select name=\"exampleSelect\">\n            <option value=\"0\">1ª Defensa</option>\n            <option value=\"30\">2ª Defensa</option>\n            <option value=\"50\">3ª Defensa</option>\n            <option value=\"70\">4ª Defensa</option>\n            <option value=\"90\">5ª Defensa</option>\n          </select>\n        </div> */\n    buttons: {\n      no: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancelar'\n      },\n      yes: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Sí',\n        callback: (html) => {\n          let input = html.find('[name=\"exampleInput\"]').val();\n          let input2 = html.find('[name=\"Cansancio\"]').val();\n          let select = html.find('[name=\"exampleSelect\"]').val();\n          let text = html.find('[name=\"exampleText\"]').val();\n\n          console.log(game);\n          const roll = new ABFFoundryRoll(`1d100xa + ${Math.max(parada,esquiva)} + ${input|0}`);\n          roll.roll();\n          let ta = actors[0].data.data.combat.totalArmor.at\n          roll.toMessage({\n            flavor: `${nombre} defiende`,\n          });\n\n          ChatMessage.create({\n            flavor: `\n            FIL: ${ta.cut.value} \n            CON: ${ta.impact.value} \n            PEN: ${ta.thrust.value} \n            CAL: ${ta.heat.value} \n            ELE: ${ta.electricity.value} \n            FRI: ${ta.cold.value} \n            ENE: ${ta.energy.value} \n            | ` + text,\n            whisper: game.collections\n              .get(\"User\")\n              .filter((u) => u.isGM)\n              .map((u) => game.data.userId),\n          });\n        }\n      },\n    },\n    default: 'yes',\nrender: () => $('#modificador').focus()\n  }).render(true);","folder":"Ri9hZtL7zyuumwkV","sort":150000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332037830,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"KKuKt4KmY8Z8QCDc","name":"d100","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/dice-target.svg","scope":"global","command":"let d = new Dialog( {\n  title: 'Lanzar dados',\n  content: `\n    <form>\n    <input type=\"text\" id=\"mod\" name=\"baseinput\" placeholder=\"Número\"> \n    </form>\n    `,\n  buttons: {\n    no: {\n      label: 'Cancelar'\n         },\n    yes: {\n      label: 'Lanzar',\n      callback: (html) => {\n      const roll = new ABFFoundryRoll(\"1d100xa +\"+html.find('[name=\"baseinput\"]')[0].value);\n      roll.toMessage();\n                         }\n          }\n            },\n  default: 'yes',\n  close: () => {},\n  render: () => $('#modificador').focus()\n}).render(true);","folder":"Ri9hZtL7zyuumwkV","sort":125000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":3,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332039082,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"folder":"GaivoXF6EoFyryGU","name":"Mantenimiento: Zeon","type":"script","author":"efyrn4Js5CqfguvB","img":"_Recursos/Iconos/auraZeon.png","scope":"global","command":"let currentToken, currentActor;\n\nif (typeof token !== \"undefined\") {\n  // Scope defined in external macro or module\n  currentToken = token;\n  currentActor = token.actor;\n} else if (canvas.tokens.controlled?.[0]) {\n  currentToken = canvas.tokens.controlled[0];\n  currentActor = currentToken.document.actor;\n} else {\n  let defaultActorId = game.users.get(game.userId)._source.character;\n  currentActor = game.actors.get(defaultActorId);\n}\n\nif (!currentActor) throw new Error(\"Selecciona un token\");\n\nconst macroCookies = currentActor.system?.macroCookies?.zeonAccumulation;\n\nconst updateModes = {\n  fullAccumulate: {\n    label: \"Acumulación plena\",\n    name: \"fullAccumulate\",\n  },\n  accumulate: {\n    label: \"Acumulación parcial\",\n    name: \"accumulate\",\n  },\n  stop: {\n    label: \"No acumular\",\n    name: \"stopAccum\",\n  },\n  wait: {\n    label: \"Esperar\",\n    name: \"wait\",\n  },\n};\n\nlet oldValues = {\n  zeon: currentActor.system.mystic.zeon.value,\n  accum: currentActor.system.mystic.zeonAccumulated.value,\n  fatigue: currentActor.system.characteristics.secondaries.fatigue.value,\n};\nlet zeonACT = currentActor.system.mystic.act.main.final.value;\nlet zeonBaseTotal = currentActor.system.mystic.zeon.max;\n\n//Check the Acumulation isn't null or it will give errors\nif (oldValues.accum == null) {\n  oldValues.accum = 0;\n}\n\nasync function updateAcumulation({\n  mode = updateModes.stop.value,\n  accumBonus,\n  upkeep = 0,\n  cast = 0,\n  fatigue = 0,\n  fatigueAccum,\n}) {\n  let newValues = {\n    zeon: oldValues.zeon,\n    accum: oldValues.accum,\n    fatigue: oldValues.fatigue,\n  };\n  if (accumBonus) {\n    zeonACT = zeonACT + accumBonus;\n  }\n  var chatNotification = \"<b>\" + token.name + \"</b>\";\n\n  const doExecute = {\n    [updateModes.fullAccumulate.name]: () => {\n      chatNotification = chatNotification + \" acumula de forma plena.\";\n\n      //Increase current accumulation\n      newValues.accum =\n        (cast ? 0 : oldValues.accum) + zeonACT + fatigue * fatigueAccum;\n      token.actor.update({\n        \"system.mystic.zeonAccumulated.value\": newValues.accum,\n      });\n    },\n    [updateModes.accumulate.name]: () => {\n      chatNotification = chatNotification + \" acumula de forma parcial.\";\n\n      //Increase current accumulation\n      newValues.accum =\n        (cast ? 0 : oldValues.accum) +\n        Math.floor(zeonACT / 10) * 5 +\n        fatigue * fatigueAccum;\n      token.actor.update({\n        \"system.mystic.zeonAccumulated.value\": newValues.accum,\n      });\n    },\n    [updateModes.stop.name]: () => {\n      chatNotification = chatNotification + \" deja de acumular.\";\n      newValues.accum = 0;\n      token.actor.update({\n        \"system.mystic.zeonAccumulated.value\": 0,\n      });\n    },\n  };\n  if (mode === updateModes.stop.name) {\n    if (game.cub.hasCondition(\"Usando Zeon\", currentActor)) {\n      game.cub.removeCondition(\"Usando Zeon\", currentActor);\n    }\n  } else {\n    if (!game.cub.hasCondition(\"Usando Zeon\", currentActor)) {\n      game.cub.addCondition(\"Usando Zeon\", currentActor);\n    }\n  }\n  if (doExecute.hasOwnProperty(mode)) {\n    doExecute[mode]();\n  }\n\n  // Update Zeon\n  token.actor.update({\n    \"system.mystic.oldValues.zeon.value\": oldValues.zeon - upkeep - cast,\n    \"system.characteristics.secondaries.fatigue.value\":\n      oldValues.fatigue - fatigue,\n  });\n\n  chatNotification = `${chatNotification}\n  <br><br>\n    · Acumulado ronda anterior: <b>${oldValues.accum}</b> <br>\n    ${\n      cast\n        ? `<br>· <small>Lanzó <b>${cast} zeon</b>. Su zeon acumulado vuelve a 0.</small>`\n        : \"\"\n    }\n    ${\n      mode === updateModes.stop.name\n        ? `<br>· <small>No acumula</small>`\n        : `<br>· <small>Acumulación: +${zeonACT}</small>`\n    }\n    ${\n      mode === updateModes.accumulate.name\n        ? `\n        <br>· <small> Realizó acciones activas la ronda anterior: -${\n          Math.floor(zeonACT / 10) * 5\n        }</small>\n      `\n        : \"\"\n    }\n      ${\n        upkeep\n          ? `<br>· <small>Gasta <b>${upkeep} zeon en mantenimientos</b>.</small>`\n          : \"\"\n      }\n      ${\n        fatigue\n          ? `<br>· <small>Usa <b>${fatigue} cansancios</b>: +${\n              fatigueAccum * fatigue\n            } ACT</small>`\n          : \"\"\n      }\n      <br><br>\n      · Total zeon acumulado: <b>${newValues.accum}</b>\n    `;\n\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({ token: actor }),\n    content: chatNotification,\n    whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n  });\n}\n\nlet styles = `\n<style>\n  .radio-toolbar-3 {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 8px 0 rgba(0, 0, 0, 0.19);\n    width: 100%;\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n  }\n\n  .radio-toolbar-3 label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: 0.3rem 0 0.3rem 0;\n    font-size: 1rem;\n    text-align: center;\n}\n\n  .radio-toolbar-3 label:hover {\n    background-color: #B4B4B4;\n    font-weigth: 1000;\n  }\n\n  .radio-toolbar-3 input[type=\"radio\"]:checked+label {\n    background-color: #0c5678;\n    color: white;\n  }\n\n  input[type=\"radio\"] {\n    position: fixed;\n    opacity: 0;\n    pointer-events: none;\n  }\n</style>\n`;\nlet dialogContent = `\n${styles}\n<center><h3>Costes de Zeon</h3></center>\n  <small>\n  <b>· Mantenimientos:</b> Pagamos para mantener efectos <b>durante la ronda actual</b>.<br>\n  <b>· Lanzamientos:</b> Coste total de hechizos lanzados la <b>ronda anterior</b>. Nuestro total acumulado vuelve a 0, y si queremos volvemos a acumular. <br>\n  </small>\n  <br>\n  <center>\n    <div class=\"flex flex-row\">\n      <label>\n        <small>MANTENIMIENTOS</small>\n        <input \n          ${\n            macroCookies?.upkeep && macroCookies?.upkeep !== 0\n              ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n              : \"\"\n          }\n          type=\"Number\" id=\"upkeepZeon\" name=\"upkeep\" placeholder=\"0\" \n            value=\"${macroCookies?.upkeep ?? 0}\" autofocus\n        >\n      </label>\n      <label>\n      <small>LANZAMIENTOS</small>\n        <input type=\"Number\" id=\"castZeon\" \n          name=\"cast\" placeholder=\"0\" \n            value=\"0\" \n        >\n      </label>      \n    </div>\n  </center>\n  <br>\n\n  <div>\n    <center><h3>Acumulación de Zeon</h3></center>\n  </div>\n  <div><small>\n    <b>· Acumulación Plena:</b> Acumulamos tanto zeon como podemos. Se selecciona si la ronda anterior <b>no</b> hemos realizado ninguna acción activa.<br>\n    <b>· Acumulación Parcial:</b> Si la ronda anterior <b>hemos hecho acciones activas o pasivas</b> distintas de acumular o lanzar hechizos, acumulamos perdiendo la mitad de nuestra acumulación por turno.<br>\n    <b>· No acumular:</b> Pagamos los costes de zeon que hayamos puesto. Si tenemos zeon acumulado, vuelve a 0.<br>\n    \n  </small></div>\n  <div>\n      <center>\n      <h2>Zeon acumulado: ${oldValues.accum}</h2>\n       Zeon actual: <b>${\n         oldValues.zeon\n       }</b>, Zeon máximo: <b>${zeonBaseTotal}</b><br>\n      </center>\n  </div> <br>\n  <div class=\"flexrow flex-center\">\n      <div class=\"flexrow\">\n          <center>\n              <h3>ACT Plena</h3> ${zeonACT} <br>\n          </center>\n      </div>\n      <div class=\"flexrow\">\n          <center>\n              <h3>ACT Parcial</h3> ${Math.round(zeonACT / 2)} <br>\n          </center>\n      </div>\n  </div>\n\n  <br>\n  <center>\n    <div class=\"flex flex-row\">\n      <label>\n        <small>CANSANCIOS USADOS</small>\n        <input type=\"Number\" id=\"fatigue\" \n          name=\"fatigue\" placeholder=\"0\" \n            value=\"0\" \n        >\n      </label> \n      <label>\n        <small>BONO POR CANSANCIO</small>\n        <input type=\"Number\" id=\"fatigueAccum\" \n          name=\"fatigueAccum\"\n          value=\"${macroCookies?.fatigueAccum ?? \"15\"}\" \n        >\n      </label> \n    <label>\n      <small>MODIFICADOR ACT</small>\n      <input \n        ${\n          macroCookies?.accumBonus !== 0\n            ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n            : \"\"\n        } \n        id=\"accumBonus\" \n        type=\"number\" value=\"${macroCookies?.accumBonus ?? \"0\"}\" \n      />\n    </label>      \n    </div>\n  </center>\n\n  <br>\n\n  <div class=\"radio-toolbar-3\">\n    <input \n      type=\"radio\" \n      id=\"${updateModes.fullAccumulate.name}\" \n      name=\"mode\" \n      value=\"${updateModes.fullAccumulate.name}\"\n      ${\n        macroCookies?.updateMode === updateModes.fullAccumulate.name\n          ? \"checked\"\n          : \"\"\n      }\n    >\n    <label for=\"${updateModes.fullAccumulate.name}\">\n      ${updateModes.fullAccumulate.label}\n    </label>\n\n    <input \n      type=\"radio\" \n      id=\"${updateModes.accumulate.name}\" \n      name=\"mode\" \n      value=\"${updateModes.accumulate.name}\"\n      ${\n        macroCookies?.updateMode === updateModes.accumulate.name\n          ? \"checked\"\n          : \"\"\n      }\n    >\n    <label for=\"${updateModes.accumulate.name}\">\n      ${updateModes.accumulate.label}\n    </label>\n\n    <input \n      type=\"radio\" \n      id=\"${updateModes.stop.name}\" \n      name=\"mode\" \n      value=\"${updateModes.stop.name}\"\n      ${macroCookies?.updateMode === updateModes.stop.name ? \"checked\" : \"\"}\n    >\n    <label for=\"${updateModes.stop.name}\">\n      ${updateModes.stop.label}\n    </label>\n  </div>\n  <br> \n  `;\nlet stayOpen = false;\nlet d = new Dialog({\n  title: `Acumulación de Zeon: ${currentActor.name}`,\n  content: dialogContent,\n  buttons: {\n    confirm: {\n      label: \"Confirmar\",\n      callback: (html) => {\n        stayOpen = false;\n        const accumBonus = Number(html[0].querySelector(\"#accumBonus\").value);\n        const mode =\n          html[0].querySelector(\"input[name=mode]:checked\")?.value ??\n          updateModes.stop.name;\n        const fatigue = Number(html[0].querySelector(\"#fatigue\").value);\n        const fatigueAccum = Number(\n          html[0].querySelector(\"#fatigueAccum\").value\n        );\n        const upkeep = Number(html[0].querySelector(\"#upkeepZeon\").value);\n        const cast = Number(html[0].querySelector(\"#castZeon\").value);\n\n        // Save current selections for the future\n        currentActor.update({\n          \"system.macroCookies.zeonAccumulation.upkeep\": upkeep,\n          \"system.macroCookies.zeonAccumulation.updateMode\": mode,\n          \"system.macroCookies.zeonAccumulation.accumBonus\": accumBonus,\n          \"system.macroCookies.zeonAccumulation.fatigueAccum\": fatigueAccum,\n        });\n\n        updateAcumulation({\n          mode: mode,\n          accumBonus: accumBonus,\n          upkeep: upkeep,\n          cast: cast,\n          fatigue: fatigue,\n          fatigueAccum: fatigueAccum,\n        });\n      },\n    },\n  },\n  default: \"confirm\",\n  close: () => {\n    if (stayOpen) {\n      stayOpen = false;\n      d.render(true);\n    }\n  },\n}).render(true);","sort":0,"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695393618938,"modifiedTime":1698057236539,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"KbRaxWnq5D0L3nbn"}
{"name":"Abrir Ficha","type":"script","img":"_APS%20images/macroOpenSheet.PNG","command":"const mainCharacter = {\n    ['Ameba']: 'Ruuna',\n    ['Andrés']: 'Raener',\n    ['Noa']: 'Aemi',\n    ['Elva']: 'Noche',\n    ['David']: 'Shephard',    \n}\n\nlet currentUser = game.user.name\nlet ownedActor = game.actors.find(actor => actor.name === mainCharacter[currentUser])._id\n\nHotbar.toggleDocumentSheet(`Actor.${ownedActor}`)","author":"efyrn4Js5CqfguvB","scope":"global","folder":"GaivoXF6EoFyryGU","sort":50000,"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695803947309,"modifiedTime":1695806118301,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"N1MwmLq8J7GCTa0c"}
{"name":"Mantenimiento: Ki","type":"script","author":"efyrn4Js5CqfguvB","img":"_Recursos/Iconos/auraKi.png","scope":"global","command":"let currentToken, currentActor;\n\nif (typeof token !== \"undefined\") {\n  // Scope defined in external macro or module\n  currentToken = token;\n  currentActor = token.actor;\n} else if (canvas.tokens.controlled?.[0]) {\n  currentToken = canvas.tokens.controlled[0];\n  currentActor = currentToken.document.actor;\n} else {\n  let defaultActorId = game.users.get(game.userId)._source.character;\n  currentActor = game.actors.get(defaultActorId);\n}\n\nconsole.log(\"haciendo cosas con \", currentActor.name);\nif (!currentActor) throw new Error(\"Selecciona un token\");\n\nconst macroCookies = currentActor.system?.macroCookies?.accumulationMacro;\n\nconst statInfo = [\n  {\n    name: \"agility\",\n    abr: \"AGI\",\n    savedCheckbox: macroCookies?.AGI,\n    lastAccumMod: macroCookies?.mod?.AGI ?? 0,\n  },\n  {\n    name: \"constitution\",\n    abr: \"CON\",\n    savedCheckbox: macroCookies?.CON,\n    lastAccumMod: macroCookies?.mod?.CON ?? 0,\n  },\n  {\n    name: \"dexterity\",\n    abr: \"DES\",\n    savedCheckbox: macroCookies?.DES,\n    lastAccumMod: macroCookies?.mod?.DES ?? 0,\n  },\n  {\n    name: \"strength\",\n    abr: \"FUE\",\n    savedCheckbox: macroCookies?.FUE,\n    lastAccumMod: macroCookies?.mod?.FUE ?? 0,\n  },\n  {\n    name: \"power\",\n    abr: \"POD\",\n    savedCheckbox: macroCookies?.POD,\n    lastAccumMod: macroCookies?.mod?.POD ?? 0,\n  },\n  {\n    name: \"willPower\",\n    abr: \"VOL\",\n    savedCheckbox: macroCookies?.VOL,\n    lastAccumMod: macroCookies?.mod?.VOL ?? 0,\n  },\n];\nconst updateModes = {\n  fullAccumulate: {\n    label: \"Acumulación plena\",\n    name: \"fullAccumulate\",\n  },\n  accumulate: {\n    label: \"Acumulación parcial\",\n    name: \"accumulate\",\n  },\n  spend: {\n    label: \"Gastar Ki acumulado\",\n    name: \"spend\",\n  },\n  stop: {\n    label: \"No acumular\",\n    name: \"stopAccum\",\n  },\n};\n\nconst maxKiPool = currentActor.system.domine.kiAccumulation.generic.max;\n\nconst getAccumulation = (stat) => {\n  return Number(currentActor.system.domine.kiAccumulation[stat].final.value);\n};\nconst getOldAccumulated = (stat) => {\n  return Number(\n    currentActor.system.domine.kiAccumulation[stat].accumulated.value\n  );\n};\nconst getOldGenericAccumulated = () => {\n  return Number(\n    currentActor.system.domine.kiAccumulation.generic?.accumulated?.value ?? 0\n  );\n};\nconst getOldgenericPool = () => {\n  return Number(currentActor.system.domine.kiAccumulation.generic.value);\n};\n\nconst getDialogColumn = (stat) => {\n  let currentStat = statInfo.find((s) => s.abr === stat);\n\n  return `\n    <div class=\"flexcol\">\n      <center>\n        <label>\n          <input \n            id=\"${currentStat.abr}\" \n            type=\"checkbox\"\n            ${currentStat.savedCheckbox ? \"checked\" : \"\"}\n          /> \n          <h3>${currentStat.abr}</h3>\n        </label>\n        <h4>\n          <span style=\"color:#B22C2C\";>\n            +${getAccumulation(currentStat.name)}\n          </span>\n          /\n          <span style=\"color:#782e22\";>\n          +${Math.round(getAccumulation(currentStat.name) / 2)}\n          </span>\n        </h4>\n        <center> <small>Extra mod.</small> \n          <input \n            ${\n              currentStat.lastAccumMod !== 0\n                ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n                : \"\"\n            } \n            id=\"accumMod-${currentStat.abr}\" \n            type=\"number\" value=\"${\n              currentStat.lastAccumMod ?? \"0\"\n            }\" /> </center>\n        <br>\n      </center>\n    </div>\n  `;\n};\nconst getLostAccum = (statName) => {\n  if (getAccumulation(statName) > 1) {\n    return -Math.min(\n      Math.floor(getAccumulation(statName) / 2),\n      getOldAccumulated(statName)\n    );\n  } else {\n    return 0;\n  }\n};\n\nfunction updateAcumulation({\n  mode = updateModes.fullAccumulate.name,\n  accumCharacteristics = statInfo.map((s) => s.name),\n  accumBonus,\n  fatigueUsed = 0,\n  upkeepKi = 0,\n  castKi = 0,\n}) {\n  let messageContent;\n\n  let newValues = {\n    agility: getOldAccumulated(\"agility\"),\n    constitution: getOldAccumulated(\"constitution\"),\n    dexterity: getOldAccumulated(\"dexterity\"),\n    strength: getOldAccumulated(\"strength\"),\n    power: getOldAccumulated(\"power\"),\n    willPower: getOldAccumulated(\"willPower\"),\n    generic: getOldgenericPool(),\n    genericAccumulated: getOldGenericAccumulated(),\n  };\n  // Si hay coste de lanzamiento, perdemos las acumulaciones\n  if (castKi > 0) {\n    newValues = {\n      agility: 0,\n      constitution: 0,\n      dexterity: 0,\n      strength: 0,\n      power: 0,\n      willPower: 0,\n      generic: getOldgenericPool() - castKi,\n      genericAccumulated: 0,\n    };\n  }\n\n  const updateAccumulations = {\n    [updateModes.fullAccumulate.name]: () => {\n      // Acumular plenamente\n      accumCharacteristics.forEach((stat) => {\n        let accumulation =\n          getAccumulation(stat) + accumBonus[stat] + fatigueUsed;\n\n        newValues[stat] += accumulation;\n        newValues[\"genericAccumulated\"] += accumulation;\n\n        currentActor.update({\n          [`system.domine.kiAccumulation.${stat}.accumulated.value`]:\n            newValues[stat],\n        });\n\n        console.log(\n          `${currentActor.name} acumula ${accumulation} puntos de ki de ${stat}`\n        );\n      });\n      messageContent = `${currentActor.name} acumula ki <b>de forma plena</b>.`;\n    },\n    [updateModes.accumulate.name]: () => {\n      // Acumular parcialmente\n      statInfo.forEach((stat) => {\n        let lostAccum = getLostAccum(stat.name);\n        let accumulation = accumCharacteristics.includes(stat.name)\n          ? getAccumulation(stat.name) + fatigueUsed + accumBonus[stat.name]\n          : 0;\n\n        newValues[stat.name] = Math.max(\n          newValues[stat.name] + accumulation + lostAccum,\n          0\n        );\n        newValues[\"genericAccumulated\"] = Math.max(\n          newValues[\"genericAccumulated\"] + accumulation + lostAccum,\n          0\n        );\n\n        currentActor.update({\n          [`system.domine.kiAccumulation.${stat.name}.accumulated.value`]:\n            newValues[stat.name],\n        });\n      });\n\n      messageContent = `${currentActor.name} acumula ki.`;\n    },\n    [updateModes.stop.name]: () => {\n      // Parar de acumular\n      newValues[\"genericAccumulated\"] = 0;\n      newValues[\"generic\"] = newValues[\"generic\"];\n      statInfo\n        .map((s) => s.name)\n        .forEach((stat) => {\n          newValues[stat] = 0;\n\n          currentActor.update({\n            [`system.domine.kiAccumulation.${stat}.accumulated.value`]:\n              newValues[stat],\n          });\n        });\n      messageContent = `${currentActor.name} <b>no</b> acumula ki.`;\n    },\n  };\n  if (mode === updateModes.stop.name) {\n    if (game.cub.hasCondition(\"Usando Ki\", currentActor)) {\n      game.cub.removeCondition(\"Usando Ki\", currentActor);\n    }\n  } else {\n    if (!game.cub.hasCondition(\"Usando Ki\", currentActor)) {\n      game.cub.addCondition(\"Usando Ki\", currentActor);\n    }\n  }\n\n  if (updateAccumulations.hasOwnProperty(mode)) {\n    let newfatigue = [\n      updateModes.accumulate.name,\n      updateModes.fullAccumulate.name,\n    ].includes(mode)\n      ? currentActor.system.characteristics.secondaries.fatigue.value -\n        fatigueUsed\n      : currentActor.system.characteristics.secondaries.fatigue.value;\n    newValues[\"generic\"] = newValues[\"generic\"] - upkeepKi;\n    updateAccumulations[mode]();\n    console.log(newValues);\n\n    currentActor.update({\n      [`system.characteristics.secondaries.fatigue.value`]: newfatigue,\n      [\"system.domine.kiAccumulation.generic.value\"]: newValues[\"generic\"],\n      [\"system.domine.kiAccumulation.generic.accumulated.value\"]:\n        newValues[\"genericAccumulated\"],\n    });\n  } else {\n    throw new Error(\"Algo está mal en el código\");\n  }\n\n  const getMessageAccumulationInfo = (messageType) => {\n    let message = \"\";\n    const getMessage = {\n      accum: () => {\n        if ([updateModes.spend.name, updateModes.stop.name].includes(mode))\n          return;\n        message = `\n          <br>· Acumulaciones: <br> <small><small>\n        `;\n        statInfo.forEach((stat) => {\n          message += `${stat.abr} ${\n            accumCharacteristics.includes(stat.name)\n              ? `+${getAccumulation(stat.name) + accumBonus[stat.name]}`\n              : `0`\n          } `;\n        });\n        message = `\n          ${message}, Total +${accumCharacteristics.reduce(\n          (sumaAccum, stat) =>\n            sumaAccum + getAccumulation(stat) + accumBonus[stat],\n          0\n        )}\n          </small></small>\n        `;\n      },\n      oldValues: () => {\n        message = `\n          <br>Acumulado ronda anterior: <br>\n            <small>\n              Reserva ${getOldgenericPool()}/${maxKiPool}, \n              Acumulado ${getOldGenericAccumulated()}\n          <br>\n        `;\n        statInfo.forEach((stat) => {\n          message += `${stat.abr} ${getOldAccumulated(stat.name)} `;\n        });\n        message = `${message}</small>`;\n      },\n      newValues: () => {\n        message = `\n          <br>Acumulado ronda actual: <br>\n              <small>Reserva ${newValues[\"generic\"]} /${maxKiPool},\n              Acumulado ${newValues[\"genericAccumulated\"]}</small>\n          <br>\n        `;\n        statInfo.forEach((stat) => {\n          message += `\n            ${newValues[stat.name] > 0 ? \"<b>\" : \"\"} \n              ${stat.abr} ${newValues[stat.name]}\n            ${newValues[stat.name] > 0 ? \"</b>\" : \"\"}\n          `;\n        });\n      },\n      upkeep: () => {\n        if (upkeepKi === 0) return;\n        message = `\n        <br>· Gasta <b>${upkeepKi} ki en mantenimiento</b>.\n      `;\n      },\n      cast: () => {\n        if (castKi === 0) return;\n        message = `\n        <br>· Gastó <b>${castKi} ki</b>. <small>Sus acumulaciones han vuelto a 0.</small>\n      `;\n      },\n      lostAccum: () => {\n        if (mode !== updateModes.accumulate.name) return;\n        message = `\n        <br>· Realizó acciones activas la ronda anterior: <br>\n        <small><small>\n      `;\n        statInfo.forEach((stat) => {\n          message += `${stat.abr} ${getLostAccum(stat.name)} `;\n        });\n        message = `${message}, Total ${statInfo.reduce(\n          (sumaAccum, stat) => sumaAccum + getLostAccum(stat.name),\n          0\n        )}</small></small>`;\n      },\n      fatigue: () => {\n        if (\n          fatigueUsed === 0 ||\n          [updateModes.spend.name, updateModes.stop.name].includes(mode)\n        )\n          return;\n\n        message = `\n          <br>· Usa <b>${fatigueUsed} cansancios</b>: <br>\n          <small><small>\n        `;\n        statInfo.forEach((stat) => {\n          message += `\n              ${stat.abr} ${\n            accumCharacteristics.includes(stat.name) ? `+${fatigueUsed} ` : \"0 \"\n          }\n          `;\n        });\n        message = `${message}, Total +${\n          fatigueUsed * accumCharacteristics.length\n        }</small></small>`;\n      },\n    };\n    getMessage?.[messageType] ? getMessage[messageType]() : () => null;\n    return message;\n  };\n\n  let messageAccumulations = `\n  <br>\n  ${getMessageAccumulationInfo(\"oldValues\")}\n  <br>\n  ${getMessageAccumulationInfo(\"cast\")}\n  ${getMessageAccumulationInfo(\"accum\")}\n  ${getMessageAccumulationInfo(\"lostAccum\")}\n  ${getMessageAccumulationInfo(\"upkeep\")}\n  ${getMessageAccumulationInfo(\"fatigue\")}\n  \n  ${\n    [\n      getMessageAccumulationInfo(\"upkeep\"),\n      getMessageAccumulationInfo(\"lostAccum\"),\n      getMessageAccumulationInfo(\"fatigue\"),\n      getMessageAccumulationInfo(\"accum\"),\n      getMessageAccumulationInfo(\"cast\"),\n    ].some((m) => m !== \"\")\n      ? \"<br>\"\n      : \"\"\n  }\n  ${getMessageAccumulationInfo(\"newValues\")}\n  `;\n\n  messageContent += `${messageAccumulations}`;\n\n  ChatMessage.create({\n    speaker: ChatMessage.getSpeaker({ token: actor }),\n    content: messageContent,\n    whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n  });\n}\n\nlet stayOpen = false;\nlet htmlStyle = `\n<style>\n  .radio-toolbar-3 {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 8px 0 rgba(0, 0, 0, 0.19);\n    width: 100%;\n    display: flex;\n    overflow: hidden;\n    border-radius: 10px;\n  }\n\n  .radio-toolbar-3 label {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: 0.3rem 0 0.3rem 0;\n    font-size: 1rem;\n    text-align: center;\n}\n\n  .radio-toolbar-3 label:hover {\n    background-color: #B4B4B4;\n    font-weigth: 1000;\n  }\n  .radio-toolbar-3 input[id=\"${updateModes.fullAccumulate.name}\"]+label {\n    color: #B22C2C;\n  }\n  .radio-toolbar-3 input[id=\"${updateModes.accumulate.name}\"]+label {\n    color: #782e22;\n  }\n\n  .radio-toolbar-3 input[type=\"radio\"]:checked+label {\n    background-color: #782e22;\n    color: white;\n  }\n\n  input[type=\"radio\"] {\n    position: fixed;\n    opacity: 0;\n    pointer-events: none;\n  }\n</style>\n`;\nlet dialogContent = `\n  ${htmlStyle}\n  <center><h3>Costes de Ki</h3></center>\n  <small>\n  <b>· Mantenimientos:</b> Pagamos para mantener efectos <b>durante la ronda actual</b>.<br>\n  <b>· Lanzamientos:</b> Coste total de las técnicas que lanzamos la <b>ronda anterior</b>. Nuestro total acumulado vuelve a 0, y si queremos volvemos a acumular. <br>\n  </small>\n  <br>\n  <center>\n    <div class=\"flex flex-row\">\n      <label>\n        <small>MANTENIMIENTOS</small>\n        <input \n          ${\n            macroCookies?.upkeep && macroCookies?.upkeep !== 0\n              ? `style=\"background-color:rgba(120, 46, 34, 0.25);\"`\n              : \"\"\n          }\n          type=\"Number\" id=\"upkeepKi\" name=\"mod\" placeholder=\"0\" \n            value=\"${macroCookies?.upkeep ?? 0}\" autofocus\n        >\n      </label>\n      <label>\n      <small>LANZAMIENTOS</small>\n        <input type=\"Number\" id=\"castKi\" \n          name=\"castKi\" placeholder=\"0\" \n            value=\"0\" \n        >\n      </label>      \n    </div>\n  </center>\n  <br>\n  <div>\n    <center><h3>Acumulación de ki</h3></center>\n  </div>\n  <div><small>\n    <i>Escoge las características a acumular, el modo de acumulación, y si utilizas cansancios para mejorar la acumulación.</i>\n    <br><br>\n    <b>· Acumulación Plena:</b> Acumulamos tanto ki como podemos. Se selecciona si la ronda anterior <b>no</b> hemos realizado ninguna acción activa.<br>\n    <b>· Acumulación Parcial:</b> Si la ronda anterior <b>hemos hecho acciones activas</b>, acumulamos perdiendo la mitad de nuestra acumulación por turno.<br>\n    <b>· No acumular / Gastar Ki:</b> Pagamos el coste de lanzamiento que hayamos puesto, y el resto del ki que tengamos acumulado vuelve a la reserva.<br>\n  </small></div>\n  <br>\n\n  <div class=\"radio-toolbar-3\">\n    <input \n      type=\"radio\" \n      id=\"${updateModes.fullAccumulate.name}\" \n      name=\"mode\" \n      value=\"${updateModes.fullAccumulate.name}\"\n      ${\n        macroCookies?.updateMode === updateModes.fullAccumulate.name\n          ? \"checked\"\n          : \"\"\n      }\n    >\n    <label for=\"${updateModes.fullAccumulate.name}\">\n      ${updateModes.fullAccumulate.label}\n    </label>\n\n    <input \n      type=\"radio\" \n      id=\"${updateModes.accumulate.name}\" \n      name=\"mode\" \n      value=\"${updateModes.accumulate.name}\"\n      ${\n        macroCookies?.updateMode === updateModes.accumulate.name\n          ? \"checked\"\n          : \"\"\n      }\n    >\n    <label for=\"${updateModes.accumulate.name}\">\n      ${updateModes.accumulate.label}\n    </label>\n\n    <input \n      type=\"radio\" \n      id=\"${updateModes.stop.name}\" \n      name=\"mode\" \n      value=\"${updateModes.stop.name}\"\n      ${macroCookies?.updateMode === updateModes.stop.name ? \"checked\" : \"\"}\n    >\n    <label for=\"${updateModes.stop.name}\">\n      ${updateModes.stop.label}\n    </label>\n  </div>\n  <br> \n\n  <div class=\"flexrow flex-center\">\n    ${getDialogColumn(\"AGI\")}\n    ${getDialogColumn(\"CON\")}\n    ${getDialogColumn(\"DES\")}\n    ${getDialogColumn(\"FUE\")}\n    ${getDialogColumn(\"POD\")}\n    ${getDialogColumn(\"VOL\")}\n  </div>\n  \n  <form class=\"flexcol\">\n    <div class=\"form-group\">\n    <center><label for=\"mod\">Cansancios usados</label>\n      <input type=\"Number\" id=\"fatigue\" name=\"mod\" placeholder=\"Cansancios usados\" value=\"0\">\n    </center>\n    </div>\n  </form>\n  <br>            \n`;\nlet d = new Dialog({\n  title: `Ki Accumulation: ${currentActor.name}`,\n  content: dialogContent,\n  buttons: {\n    confirm: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Confirmar`,\n      callback: async (html) => {\n        const selectedCharactesistics = statInfo\n          .filter((stat) => html[0].querySelector(`#${stat.abr}`).checked)\n          .map((selectedStat) => selectedStat.name);\n        const mode =\n          html[0].querySelector(\"input[name=mode]:checked\")?.value ??\n          updateModes.stop.name;\n        const fatigue = Number(html[0].querySelector(\"#fatigue\").value);\n        const upkeepKi = Number(html[0].querySelector(\"#upkeepKi\").value);\n\n        const castKi = Number(html[0].querySelector(\"#castKi\").value);\n\n        let accumBonus = {};\n        statInfo.map(\n          (stat) =>\n            (accumBonus[stat.name] = Number(\n              html[0].querySelector(\n                `#accumMod-${statInfo.find((s) => s.name === stat.name).abr}`\n              ).value\n            ))\n        );\n\n        // Save current selections for the future\n        currentActor.update({\n          \"system.macroCookies.accumulationMacro.upkeep\": upkeepKi,\n          \"system.macroCookies.accumulationMacro.updateMode\": mode,\n        });\n        for (stat of statInfo) {\n          currentActor.update({\n            [`system.macroCookies.accumulationMacro.${stat.abr}`]:\n              selectedCharactesistics.includes(stat.name),\n            [`system.macroCookies.accumulationMacro.mod.${stat.abr}`]:\n              accumBonus[stat.name],\n          });\n        }\n\n        if (\n          selectedCharactesistics.length === 0 &&\n          [\n            updateModes.accumulate.name,\n            updateModes.fullAccumulate.name,\n          ].includes(mode)\n        ) {\n          stayOpen = false;\n          let errorMsg = \"Selecciona al menos un campo a acumular\";\n          ui.notifications.error(errorMsg);\n          throw new Error(errorMsg);\n        } else {\n          stayOpen = false;\n\n          updateAcumulation({\n            mode: mode,\n            accumCharacteristics: selectedCharactesistics,\n            accumBonus: accumBonus,\n            fatigueUsed: fatigue,\n            upkeepKi: upkeepKi,\n            castKi: castKi,\n          });\n        }\n      },\n    },\n    /* cancel: {\n      icon: \"<i class='fas fa-close'></i>\",\n      label: \"cancelar\",\n      callback: () => {\n        let messageContent =  `${currentActor.name}`;\n\n        ChatMessage.create({\n          speaker: ChatMessage.getSpeaker({ token: actor }),\n          content: messageContent,\n          whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n        });\n      },\n    }, */\n  },\n  default: \"confirm\",\n  close: () => {\n    if (stayOpen) {\n      stayOpen = false;\n      d.render(true);\n    }\n  },\n}).render(true);","folder":"GaivoXF6EoFyryGU","sort":200000,"ownership":{"default":2,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695383215728,"modifiedTime":1698068472472,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"QguIvnlK86i6CQdp"}
{"name":"Entre la vida y la muerte","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":"Ri9hZtL7zyuumwkV","sort":112500,"flags":{"scene-packer":{"hash":"5fb828561f58b29362f7aecb748eb09325b225d2"}},"_id":"RsKjfZGwBwvU6D9M","ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332040352,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"RxakkM2azQFC044I","name":"Potencial Psíquico","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/aura.svg","scope":"global","command":"let actors = canvas.tokens.controlled.map(token => {return token.actor});\n\nlet d = new Dialog({\n    title: 'Potencial psíquico',\n    content: `\n      <form class=\"flexcol\">\n        <div class=\"form-group\">\n          <label for=\"exampleInput\">Modificadores</label>\n          <input type=\"Number\" id=\"modificador\" name=\"exampleInput\" placeholder=\"Modificador total\">\n        </div>\n        <div class=\"form-group\">\n          <textarea name=\"exampleText\" placeholder=\"Comentarios\"></textarea>\n        </div>\n      </form>\n    `,\n    buttons: {\n      no: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancelar'\n      },\n      yes: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Sí',\n        callback: (html) => {\n          let input = html.find('[name=\"exampleInput\"]').val();\n          let text = html.find('[name=\"exampleText\"]').val();\n\n          console.log(game);\n          const roll = new ABFFoundryRoll(`1d100xa + ${actors[0].system.psychic.psychicPotential.final.value} + ${input|0}`);\n          roll.roll();\n          roll.toMessage({\n            flavor: `Potencial psíquico\n            | ` + text,\n          });\n        }\n      },\n    },\n    default: 'yes',\nrender: () => $('#modificador').focus()\n  }).render(true);","folder":"Ri9hZtL7zyuumwkV","sort":106250,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":3,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695399232499,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"ff5qjAoYNMnq4SGA","name":"Tokenize Token","type":"script","author":"efyrn4Js5CqfguvB","img":"_Recursos/NPC/z.Tokenizer/zTokenFrame.png","scope":"global","command":"window.testUpdate = [];\nlet token = canvas.tokens.controlled[0]\n  let newTokenName = `${token.data.name}_${token.id}`;\n  window.testUpdate = [{\n    _id: token.id,\n    type: \"npc\",\n    img: `tokenizer/npc-images/${newTokenName}.Token.webp`,\n  }];\n\n  let tokenizerOptions = {\n    name: `${newTokenName}`,\n    avatarFilename: token.data.img,\n    tokenFilename: token.data.img\n  };\n  window.Tokenizer.launch(tokenizerOptions, () => {\n    canvas.scene.updateEmbeddedDocuments(\"Token\", window.testUpdate);\n  });","folder":"lVLZRwJ3hoj6OFc9","sort":100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695332049131,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"folder":"S8Ht1aTB2GSXNfVJ","name":"delete token's Active Effects","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/dice-target.svg","scope":"global","command":"_token.actor.deleteEmbeddedDocuments(\"ActiveEffect\", _token.actor.collections.effects.map(e => e.id));","sort":0,"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695333096192,"modifiedTime":1695333099394,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"iIzA2bvkolR4crYV"}
{"name":"deleteLastChatMessages","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/book.svg","scope":"global","command":"let currentMessage\nfor (let i = 1; i < 2; i++) {\n\tcurrentMessage = game.messages.contents[game.messages.contents.length - i];\n\t/* \n\tif (currentMessage.flags.core?.initiativeRoll) { currentMessage.delete() };\n\tif (currentMessage.flags?.['koboldworks-turn-announcer']?.turnAnnounce || currentMessage.flags?.['koboldworks-turn-announcer']?.roundCycling) { \n\t        currentMessage.delete()};\n\tif (currentMessage.flags['monks-combat-details']?.roundmarker) { break };\n\t */\n\t currentMessage.delete()\n\n//game.messages.contents[game.messages.contents.length - 1].delete()\n}","folder":"lVLZRwJ3hoj6OFc9","sort":200000,"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695232204177,"modifiedTime":1698065262354,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"iwPqUoAq6lLmnoP5"}
{"folder":"lVLZRwJ3hoj6OFc9","name":"removeActiveEffects","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/dice-target.svg","scope":"global","command":"(async () => {\n  let effectsToDelete = _token.actor.effects\n    .filter((e) => e.sourceName === \"None\")\n    .map((e) => {\n      return e.id;\n    }); // documents api expects array of ids\n  await token.actor.deleteEmbeddedDocuments(\"ActiveEffect\", effectsToDelete);\n})();","sort":0,"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"flags":{"combat-utility-belt":{"macroTrigger":""}},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":1695399094291,"modifiedTime":1695399165567,"lastModifiedBy":"efyrn4Js5CqfguvB"},"_id":"jOLw6HqXSbruAIVC"}
{"name":"Don't Mark Dead","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/aura.svg","scope":"global","command":"/**\n*  This macro will make this NPC show as Unconscious (or whatever is the first stage).\n*  This is meant for people that use the \"NPCs die immediately\" setting but still want some NPCs to not be shown as dead.\n*  Use it again to toggle it.\n*/\n\nfor (let e of canvas.tokens.controlled) {\n\tlet hasAlive = !e.document.getFlag(\"healthEstimate\", \"treatAsPC\")\n\te.document.setFlag(\"healthEstimate\", \"treatAsPC\", hasAlive)\n}","folder":"lVLZRwJ3hoj6OFc9","sort":125000,"flags":{"core":{"sourceId":"Macro.bCMlVEb7wx14ACIB"},"advanced-macros":{"runAsGM":false}},"_id":"lZXcsalQJWIzTbXP","ownership":{"default":0,"oPuS5iW18dRDcW4r":3,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1695388112701,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"mHELxrp90LbAOCAG","name":"Raener Devorador","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/creatures/tentacles/tentacles-octopus-black-pink.webp","scope":"global","command":"let raener = game.actors.find((a) => a.name === \"Raener\");\nlet raenerPresenciaDoble = raener.system.general.presence.base.value * 2;\n\nlet target = _token.actor;\nlet rf =\n  target.system.characteristics.secondaries.resistances.physical.base.value;\n\nlet d = new Dialog({\n  title: \"RF contra Devorador de Existencia (Raener)\",\n  content: `\n      <form class=\"flexcol\">\n        <div class=\"form-group\">\n          <label for=\"mod\">Modificador a la RF</label>\n          <input type=\"Number\" id=\"modificador\" name=\"mod\" placeholder=\"Modificador total\" autofocus>\n        </div>\n        <div class=\"form-group\">\n          <textarea name=\"comments\" placeholder=\"Comentarios\"></textarea>\n        </div>\n      </form>\n    `,\n  buttons: {\n    no: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Cancelar\",\n    },\n    yes: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Sí\",\n      callback: (html) => {\n        let mod = html.find('[name=\"mod\"]').val();\n        let comments = html.find('[name=\"comments\"]').val();\n\n        console.log(game);\n        const roll = new ABFFoundryRoll(`1d100 + ${rf} + ${mod | 0}`);\n        roll.roll();\n        roll.toMessage({\n          flavor: `Devorador de Existencia: RF contra ${raenerPresenciaDoble}`,\n        });\n\n        // Mensaje para el GM con info extra\n        let resultado = raenerPresenciaDoble - roll._total;\n        let damageHP = Math.max(0, Math.floor(resultado / 2));\n        let damageKi = Math.floor(damageHP / 5);\n\n        const newLifePoints =\n          target.system.characteristics.secondaries.lifePoints.value - damageHP;\n        const newKiPoints = Math.min(\n          raener.system.domine.kiAccumulation.generic.value + damageKi,\n          raener.system.domine.kiAccumulation.generic.max\n        );\n\n        target.update({\n          system: {\n            characteristics: {\n              secondaries: { lifePoints: { value: newLifePoints } },\n            },\n          },\n        });\n        raener.update({\n          system: {\n            domine: { kiAccumulation: { generic: { value: newKiPoints } } },\n          },\n        });\n\n        ChatMessage.create({\n          flavor: `\n            Resultado: ${resultado} \n            | Vida: ${damageHP} \n            | Ki: ${damageKi} \n            | Daño aplicado sobre ${target.name} \n            ${comments ? \"| \" + comments : \"\"}`,\n          whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n        });\n      },\n    },\n  },\n  default: \"yes\",\n  render: () => $(\"#modificador\").focus(),\n}).render(true);","folder":"S8Ht1aTB2GSXNfVJ","sort":100000,"flags":{"scene-packer":{"hash":"187ed7ad0b359a4355e4e009d82170a8f86c5d2f"},"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1697367093304,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
{"_id":"21weQHTapjRNlChg","name":"Combate","type":"script","author":"efyrn4Js5CqfguvB","img":"icons/svg/combat.svg","scope":"global","command":"function round5(x) {\n  return Math.round(x / 5) * 5;\n}\n\nfunction cuenta(ATK, DEF, TA, BDMG) {\n  if (DEF > ATK) {\n    return (DEF - ATK) / 2;\n  }\n  return (BDMG * (ATK - (DEF + TA * 10))) / 100;\n}\n\nfunction onSubmit() {\n  var ATK = parseInt(document.getElementById(\"ATK\").value);\n  var DEF = parseInt(document.getElementById(\"DEF\").value);\n  var TA = parseInt(document.getElementById(\"TA\").value);\n  var BDMG = parseInt(document.getElementById(\"BDMG\").value);\n\n  let final =\n    \"<div>HA: \" +\n    ATK +\n    \", HD: \" +\n    DEF +\n    \", TA: \" +\n    TA +\n    \", Daño Base: \" +\n    BDMG +\n    \"</div>\";\n  if (DEF > ATK) {\n    final =\n      final +\n      '<h2>Bono al contraataque: <span style=\"color:#ff1515\">' +\n      round5(cuenta(ATK, DEF, TA, BDMG)) +\n      \"</span></h2>\";\n  } else {\n    final =\n      final +\n      '<h2>Daño final: <span style=\"color:#ff1515\">' +\n      round5(cuenta(ATK, DEF, TA, BDMG)) +\n      \"</span></h2>\";\n  }\n\n  ChatMessage.create({\n    content: final,\n    whisper: game.collections\n      .get(\"User\")\n      .filter((u) => u.isGM)\n      .map((u) => game.data.userId),\n  });\n}\n\nlet d = new Dialog({\n  title: \"Calcular daño final\",\n  content: `\n    <div> \n        Ataque: <input type=\"number\" id=\"ATK\"/><br />\n        Defensa: <input type=\"number\" id=\"DEF\"/><br />\n        Tipo de Armadura: <input type=\"number\" id=\"TA\" value=\"0\"/><br />\n        Daño base: <input type=\"number\" id=\"BDMG\" value=\"0\" /><br />\n    </div>`,\n  buttons: {\n    aceptar: {\n      label: \"Aceptar\",\n      callback: () => onSubmit(),\n    },\n  },\n  render: () => $(\"#ATK\").focus(),\n});\n\nd.render(true);","folder":"Ri9hZtL7zyuumwkV","sort":100000,"flags":{"combat-utility-belt":{"macroTrigger":""}},"ownership":{"default":0,"efyrn4Js5CqfguvB":3},"_stats":{"systemId":"animabf-guote","systemVersion":"1.16.0","coreVersion":"10.303","createdTime":null,"modifiedTime":1698326417306,"lastModifiedBy":"efyrn4Js5CqfguvB"}}
