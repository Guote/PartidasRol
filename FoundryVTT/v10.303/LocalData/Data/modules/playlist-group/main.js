(()=>{"use strict";var __webpack_modules__={555:()=>{eval("\n;// CONCATENATED MODULE: ./src/constant.ts\nconst user = () => game.user;\nconst i18n = () => game.i18n;\nconst i18nLocalize = (id) => i18n().localize(id);\nconst playlists = () => game.playlists;\nconst initTemplates = (paths) => loadTemplates(paths);\nconst isGM = () => { var _a, _b; return (_b = (_a = user()) === null || _a === void 0 ? void 0 : _a.isGM) !== null && _b !== void 0 ? _b : false; };\n\n;// CONCATENATED MODULE: ./src/abstract-chooser.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass AbstractChooser extends FormApplication {\n    constructor(object, options = {}) {\n        super(object, options);\n        this.model = this.getInitModel();\n        this.model.data = this.object;\n        this.model.id = new Date().getTime();\n        this.model.buttonsTemplate = () => `modules/playlist-group/templates/chooser-action.html`;\n    }\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            height: 'auto',\n            resizable: true,\n            closeOnSubmit: true,\n        });\n    }\n    close(options) {\n        const _super = Object.create(null, {\n            close: { get: () => super.close }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield _super.close.call(this, options !== null && options !== void 0 ? options : { submit: false, force: true });\n        });\n    }\n    _onSubmit(event, options) {\n        const _super = Object.create(null, {\n            _onSubmit: { get: () => super._onSubmit }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            event.preventDefault();\n            if (this.isValid(this.model.data)) {\n                yield _super._onSubmit.call(this, event, options);\n                this.yes(this.model.data);\n            }\n            return Promise.resolve({});\n        });\n    }\n    _getSubmitData(_updateData) {\n        return this.model.data;\n    }\n    getData() {\n        return this.model;\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        this.handleClick(html, `#${this.model.id}-no`, (_event) => __awaiter(this, void 0, void 0, function* () {\n            yield this.close();\n            this.no();\n        }));\n    }\n    handleClick(html, selector, handler) {\n        html.find(selector).on('click', handler);\n    }\n    handleChange(html, selector, handler) {\n        html.find(selector).on('change', handler);\n    }\n    handleInput(html, selector, handler) {\n        html.find(selector).on('input', handler);\n    }\n    _updateObject(_event, _formData) {\n        return Promise.resolve();\n    }\n    no() { }\n    getInitModel() {\n        return {\n            data: {},\n            actions: [\n                {\n                    name: 'yes',\n                    label: 'PLAYLISTGROUP.common.button.OK',\n                    icon: 'fa-check',\n                    type: 'submit',\n                    callback: this.yes,\n                },\n                {\n                    name: 'no',\n                    label: 'PLAYLISTGROUP.common.button.Cancel',\n                    icon: 'fa-times',\n                    type: 'button',\n                    callback: this.no,\n                },\n            ],\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/select-model.ts\nclass SelectModel {\n    constructor(key, value, selected) {\n        this.key = key;\n        this.value = value;\n        this.selected = selected;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/playlist-group-chooser.ts\nvar playlist_group_chooser_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass Model {\n    constructor(name, playlistIds) {\n        this.name = name;\n        this.playlistIds = playlistIds;\n    }\n}\nclass PlaylistGroupChooser extends AbstractChooser {\n    constructor(object, callback, options) {\n        super(object, options);\n        const pls = playlists().contents.filter((pl) => { var _a; return !((_a = pl.flags) === null || _a === void 0 ? void 0 : _a.playlistGroup); });\n        this.selectedPlaylist = pls.length > 0 ? pls[0]._id : '';\n        this.model.playlists = pls.map((pl) => new SelectModel(pl._id, pl.name, this.selectedPlaylist === pl._id));\n        this.updateSelectedPlaylists();\n        this.callback = callback;\n    }\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            id: 'playlist-group-chooser',\n            title: i18n().localize('PLAYLISTGROUP.playlists.group.edit'),\n            template: `modules/playlist-group/templates/playlist-group-chooser.html`,\n            width: 400,\n        });\n    }\n    static selectPlaylists(initName, initPlaylistIds, callback) {\n        return playlist_group_chooser_awaiter(this, void 0, void 0, function* () {\n            new PlaylistGroupChooser(new Model(initName, initPlaylistIds), callback).render(true);\n        });\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        this.handleChange(html, '#nameInput', (event) => {\n            this.updateName(event.currentTarget.value);\n        });\n        this.handleChange(html, '#selectPlaylists', (event) => {\n            this.selectedPlaylist = event.currentTarget.value;\n            this.model.playlists.forEach((pl) => {\n                pl.selected = pl.key === this.selectedPlaylist;\n            });\n        });\n        this.handleClick(html, '#addPlaylistButton', () => {\n            if (!this.model.data.playlistIds.includes(this.selectedPlaylist)) {\n                this.model.data.playlistIds.push(this.selectedPlaylist);\n                this.updateSelectedPlaylists();\n                this.render();\n            }\n        });\n        this.handleClick(html, '.remove-playlist-button', (event) => {\n            const key = event.currentTarget.value;\n            if (this.model.data.playlistIds.includes(key)) {\n                this.model.data.playlistIds = this.model.data.playlistIds.filter((pli) => pli !== key);\n                this.updateSelectedPlaylists();\n                this.render();\n            }\n        });\n    }\n    isValid(data) {\n        var _a;\n        return ((_a = data === null || data === void 0 ? void 0 : data.name) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    yes(data) {\n        this.callback(data === null || data === void 0 ? void 0 : data.name, data === null || data === void 0 ? void 0 : data.playlistIds);\n    }\n    updateName(name) {\n        this.model.data.name = name;\n    }\n    updateSelectedPlaylists() {\n        this.model.selectedPlaylists = this.model.playlists.filter((pl) => this.model.data.playlistIds.includes(pl.key));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/random-util.ts\nclass RandomUtil {\n    static getRandomId() {\n        return randomID(16);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/playlist-group.ts\nvar playlist_group_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass PlaylistGroup {\n    static createPlaylistGroup() {\n        return playlist_group_awaiter(this, void 0, void 0, function* () {\n            yield PlaylistGroupChooser.selectPlaylists('', [], (name, ids) => playlist_group_awaiter(this, void 0, void 0, function* () {\n                var _a;\n                const playlistGroup = yield Playlist.create({\n                    name: name,\n                    flags: {\n                        playlistGroup: true,\n                        playlists: ids,\n                    },\n                });\n                yield this.updatePlaylistGroupSounds(playlistGroup !== null && playlistGroup !== void 0 ? playlistGroup : {});\n                (_a = playlistGroup === null || playlistGroup === void 0 ? void 0 : playlistGroup.sheet) === null || _a === void 0 ? void 0 : _a.render(true);\n            }));\n        });\n    }\n    static updatePlaylistGroupFromSound(sound) {\n        return playlist_group_awaiter(this, void 0, void 0, function* () {\n            const playlist = sound.parent;\n            if (playlist != null) {\n                const playlistGroups = playlists().contents.filter((pl) => {\n                    var _a, _b, _c;\n                    return ((_a = pl === null || pl === void 0 ? void 0 : pl.flags) === null || _a === void 0 ? void 0 : _a.playlistGroup) &&\n                        ((_c = (_b = pl === null || pl === void 0 ? void 0 : pl.flags) === null || _b === void 0 ? void 0 : _b.playlists) === null || _c === void 0 ? void 0 : _c.includes(playlist._id));\n                });\n                for (const plg of playlistGroups) {\n                    yield this.updatePlaylistGroupSounds(plg);\n                }\n            }\n        });\n    }\n    static updatePlaylistGroupSounds(playlistGroup) {\n        var _a, _b, _c, _d, _e;\n        return playlist_group_awaiter(this, void 0, void 0, function* () {\n            const playListIds = (_c = (_b = (_a = playlistGroup) === null || _a === void 0 ? void 0 : _a.flags) === null || _b === void 0 ? void 0 : _b.playlists) !== null && _c !== void 0 ? _c : [];\n            yield playlistGroup.deleteEmbeddedDocuments(PlaylistSound.documentName, (_e = (_d = playlistGroup === null || playlistGroup === void 0 ? void 0 : playlistGroup.sounds) === null || _d === void 0 ? void 0 : _d.contents) === null || _e === void 0 ? void 0 : _e.map((s) => { var _a, _b; return (_b = (_a = s) === null || _a === void 0 ? void 0 : _a._id) !== null && _b !== void 0 ? _b : ''; }));\n            const sounds = [];\n            for (const pli of playListIds) {\n                const playlist = playlists().contents.find((pl) => pl._id === pli);\n                if (playlist != null) {\n                    for (const sound of playlist.sounds.contents) {\n                        const clonedSoundData = duplicate(sound);\n                        clonedSoundData._id = RandomUtil.getRandomId();\n                        sounds.push(clonedSoundData);\n                    }\n                }\n            }\n            if (sounds.length > 0) {\n                yield playlistGroup.createEmbeddedDocuments(PlaylistSound.metadata.name, this.toRecords(sounds));\n            }\n        });\n    }\n    static toRecords(arrays) {\n        return arrays.map((d) => (d.toObject != null ? d.toObject() : d));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/main.ts\nvar main_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nHooks.once('init', () => {\n    initTemplates([\n        'modules/playlist-group/templates/playlist-group-chooser.html',\n        'modules/playlist-group/templates/chooser-action.html',\n    ]);\n});\nHooks.once('ready', () => main_awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    for (const playlist of playlists().contents) {\n        if ((_a = playlist === null || playlist === void 0 ? void 0 : playlist.flags) === null || _a === void 0 ? void 0 : _a.playlistGroup) {\n            yield PlaylistGroup.updatePlaylistGroupSounds(playlist);\n        }\n    }\n}));\nHooks.on('getPlaylistDirectoryEntryContext', (_, options) => {\n    options.push({\n        name: i18nLocalize('PLAYLISTGROUP.playlists.group.edit'),\n        condition: isGM(),\n        icon: '<i class=\"fas fa-edit fa-fw\"></i>',\n        callback: (target) => main_awaiter(void 0, void 0, void 0, function* () {\n            var _a, _b, _c, _d, _e, _f;\n            const id = target.attr('data-document-id');\n            if (id != null) {\n                const playlist = playlists().contents.find((pl) => pl._id === id);\n                if ((_b = (_a = playlist) === null || _a === void 0 ? void 0 : _a.flags) === null || _b === void 0 ? void 0 : _b.playlistGroup) {\n                    yield PlaylistGroupChooser.selectPlaylists((_c = playlist.name) !== null && _c !== void 0 ? _c : '', (_f = (_e = (_d = playlist) === null || _d === void 0 ? void 0 : _d.flags) === null || _e === void 0 ? void 0 : _e.playlists) !== null && _f !== void 0 ? _f : [], (name, ids) => main_awaiter(void 0, void 0, void 0, function* () {\n                        yield playlist.update({\n                            name: name,\n                            flags: {\n                                playlists: ids,\n                            },\n                        });\n                        yield PlaylistGroup.updatePlaylistGroupSounds(playlist);\n                    }));\n                }\n            }\n        }),\n    });\n});\nHooks.on('renderPlaylistConfig', (_, html) => {\n    var _a;\n    const id = html[0].id.replace('playlist-config-', '');\n    if (id != null) {\n        const playlist = playlists().contents.find((pl) => pl._id === id);\n        if ((_a = playlist === null || playlist === void 0 ? void 0 : playlist.flags) === null || _a === void 0 ? void 0 : _a.playlistGroup) {\n            html[0].classList.add('playlist-group-config');\n            html.find('.form-group').last().addClass('playlist-group-hide');\n        }\n    }\n});\nHooks.on('createPlaylistSound', (sound) => main_awaiter(void 0, void 0, void 0, function* () {\n    yield PlaylistGroup.updatePlaylistGroupFromSound(sound);\n}));\nHooks.on('deletePlaylistSound', (sound) => main_awaiter(void 0, void 0, void 0, function* () {\n    yield PlaylistGroup.updatePlaylistGroupFromSound(sound);\n}));\nHooks.on('renderPlaylistDirectory', (_, html) => main_awaiter(void 0, void 0, void 0, function* () {\n    if (user().can('ACTOR_CREATE')) {\n        addPlaylistGroupActionButton(html, 'PLAYLISTGROUP.common.add.button', (_) => main_awaiter(void 0, void 0, void 0, function* () {\n            yield PlaylistGroup.createPlaylistGroup();\n        }));\n    }\n    html.find('.playlist-header').each((_, elm) => {\n        var _a, _b, _c;\n        const id = elm.dataset.documentId;\n        if (id != null) {\n            const playlist = playlists().contents.find((pl) => pl._id === id);\n            if ((_a = playlist === null || playlist === void 0 ? void 0 : playlist.flags) === null || _a === void 0 ? void 0 : _a.playlistGroup) {\n                html\n                    .find(elm)\n                    .children()\n                    .first()\n                    .before('<i class=\"fas fa-file-audio playlist-group-icon\"></i>');\n                (_c = (_b = elm === null || elm === void 0 ? void 0 : elm.parentElement) === null || _b === void 0 ? void 0 : _b.classList) === null || _c === void 0 ? void 0 : _c.add('playlist-group');\n                html.find(elm).find('a[data-action=\"sound-create\"]').remove();\n            }\n            else {\n                elm.classList.add('playlist-legacy');\n            }\n        }\n    });\n}));\nfunction addPlaylistGroupActionButton(html, label, onClick) {\n    const button = document.createElement('button');\n    button.style.width = '95%';\n    button.innerHTML = i18nLocalize(label);\n    button.addEventListener('click', (event) => {\n        onClick(event);\n    });\n    html.find('.header-actions').after(button);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///555\n")}},__webpack_exports__={};__webpack_modules__[555]()})();