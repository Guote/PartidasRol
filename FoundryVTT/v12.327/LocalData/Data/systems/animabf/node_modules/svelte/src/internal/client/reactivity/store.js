import { subscribe_to_store } from "../../../store/utils.js";
import { noop } from "../../shared/utils.js";
import { get } from "../runtime.js";
import { teardown } from "./effects.js";
import { mutable_source, set } from "./sources.js";
function store_get(store, store_name, stores) {
  const entry = stores[store_name] ??= {
    store: null,
    source: mutable_source(void 0),
    unsubscribe: noop
  };
  if (entry.store !== store) {
    entry.unsubscribe();
    entry.store = store ?? null;
    if (store == null) {
      entry.source.v = void 0;
      entry.unsubscribe = noop;
    } else {
      var is_synchronous_callback = true;
      entry.unsubscribe = subscribe_to_store(store, (v) => {
        if (is_synchronous_callback) {
          entry.source.v = v;
        } else {
          set(entry.source, v);
        }
      });
      is_synchronous_callback = false;
    }
  }
  return get(entry.source);
}
function store_set(store, value) {
  store.set(value);
  return value;
}
function invalidate_store(stores, store_name) {
  var entry = stores[store_name];
  if (entry.store !== null) {
    store_set(entry.store, entry.source.v);
  }
}
function setup_stores() {
  const stores = {};
  teardown(() => {
    for (var store_name in stores) {
      const ref = stores[store_name];
      ref.unsubscribe();
    }
  });
  return stores;
}
function store_mutate(store, expression, new_value) {
  store.set(new_value);
  return expression;
}
export {
  invalidate_store,
  setup_stores,
  store_get,
  store_mutate,
  store_set
};
