import { run, run_all } from "../../../shared/utils.js";
import { user_pre_effect, user_effect } from "../../reactivity/effects.js";
import { untrack, get, deep_read_state, component_context } from "../../runtime.js";
function init() {
  const context = (
    /** @type {ComponentContextLegacy} */
    component_context
  );
  const callbacks = context.l.u;
  if (!callbacks) return;
  if (callbacks.b.length) {
    user_pre_effect(() => {
      observe_all(context);
      run_all(callbacks.b);
    });
  }
  user_effect(() => {
    const fns = untrack(() => callbacks.m.map(run));
    return () => {
      for (const fn of fns) {
        if (typeof fn === "function") {
          fn();
        }
      }
    };
  });
  if (callbacks.a.length) {
    user_effect(() => {
      observe_all(context);
      run_all(callbacks.a);
    });
  }
}
function observe_all(context) {
  if (context.l.s) {
    for (const signal of context.l.s) get(signal);
  }
  deep_read_state(context.s);
}
export {
  init
};
