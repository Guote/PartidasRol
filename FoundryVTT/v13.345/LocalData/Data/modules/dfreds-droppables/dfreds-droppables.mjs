var __defProp2=Object.defineProperty;var __name2=(target,value)=>__defProp2(target,"name",{value,configurable:!0});var __defProp=Object.defineProperty,__name=__name2((target,value)=>__defProp(target,"name",{value,configurable:!0}),"__name");const id="dfreds-droppables",title="DFreds Droppables",description="A FoundryVTT module that adds support for dropping folders onto the canvas.",version="1.2.5",compatibility={minimum:13,verified:13,maximum:13},esmodules=["dfreds-droppables.mjs"],scripts=[],styles=["styles/dfreds-droppables.css"],packs=[],packFolders=[],persistentStorage=!0,relationships={systems:[],requires:[]},languages=[{lang:"en",name:"English",path:"lang/en.json"},{lang:"ja",name:"\u65E5\u672C\u8A9E",path:"lang/ja.json"},{lang:"es",name:"Spanish",path:"lang/es.json"},{lang:"fr",name:"Fran\xE7ais",path:"lang/fr.json"},{lang:"pt-BR",name:"Portugu\xEAs (Brasil)",path:"lang/pt-BR.json"}],authors=[{name:"DFreds",url:"https://github.com/DFreds",discord:"DFreds#1238"}],socket=!1,url="https://github.com/DFreds/dfreds-droppables",manifest="https://github.com/DFreds/dfreds-droppables/releases/latest/download/module.json",download="https://github.com/DFreds/dfreds-droppables/releases/download/v1.2.5/dfreds-droppables.zip",license="https://github.com/DFreds/dfreds-droppables/blob/main/LICENSE",readme="https://github.com/DFreds/dfreds-droppables/blob/main/README.md",bugs="https://github.com/DFreds/dfreds-droppables/issues",changelog="https://github.com/DFreds/dfreds-droppables/releases",library=!1,media=[],moduleData={id,title,description,version,compatibility,esmodules,scripts,styles,packs,packFolders,persistentStorage,relationships,languages,authors,socket,url,manifest,download,license,readme,bugs,changelog,library,media},MODULE_ID=moduleData.id;class Settings{static{__name2(this,"Settings")}static{__name(this,"Settings")}#FOLDER_DROP_STYLE="dropStyle";#ENABLE_CANVAS_DRAG_UPLOAD="enableCanvasDragUpload";#LAST_USED_FOLDER_DROP_STYLE="lastUsedDropStyle";register(){game.settings.register(MODULE_ID,this.#FOLDER_DROP_STYLE,{name:"Droppables.SettingDropStyle",hint:"Droppables.SettingDropStyleHint",scope:"client",config:!0,default:"dialog",choices:{dialog:"Droppables.SettingDropStyleDialog",stack:"Droppables.SettingDropStyleStack",random:"Droppables.SettingDropStyleRandom",horizontalLine:"Droppables.SettingDropStyleHorizontalLine",verticalLine:"Droppables.SettingDropStyleVerticalLine"},type:String}),game.settings.register(MODULE_ID,this.#ENABLE_CANVAS_DRAG_UPLOAD,{name:"Droppables.SettingEnableCanvasDragUpload",hint:"Droppables.SettingEnableCanvasDragUploadHint",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register(MODULE_ID,this.#LAST_USED_FOLDER_DROP_STYLE,{name:"Last Used Folder Drop Style",scope:"client",config:!1,default:"random",type:String})}get dropStyle(){return game.settings.get(MODULE_ID,this.#FOLDER_DROP_STYLE)}get canvasDragUpload(){return game.settings.get(MODULE_ID,this.#ENABLE_CANVAS_DRAG_UPLOAD)}get lastUsedDropStyle(){return game.settings.get(MODULE_ID,this.#LAST_USED_FOLDER_DROP_STYLE)}set lastUsedDropStyle(value){game.settings.set(MODULE_ID,this.#LAST_USED_FOLDER_DROP_STYLE,value)}}const Init={listen(){Hooks.once("init",async()=>{new Settings().register()})}},Setup={listen(){Hooks.once("setup",async()=>{})}};function log(data){console.log(typeof data=="string"?`${MODULE_ID} | ${data}`:data)}__name2(log,"log"),__name(log,"log");function translateToTopLeftGrid(event){const transform=canvas.tokens.worldTransform,tx=(event.clientX-transform.tx)/canvas.stage.scale.x,ty=(event.clientY-transform.ty)/canvas.stage.scale.y;return canvas.grid.getTopLeftPoint({x:tx,y:ty})}__name2(translateToTopLeftGrid,"translateToTopLeftGrid"),__name(translateToTopLeftGrid,"translateToTopLeftGrid");const{DialogV2:DialogV2$1}=foundry.applications.api,{renderTemplate:renderTemplate$1}=foundry.applications.handlebars;class FolderDropHandler{static{__name2(this,"FolderDropHandler")}static{__name(this,"FolderDropHandler")}data;#event;#settings=new Settings;constructor(event){this.#event=event,this.data=this.retrieveData()}canHandleDrop(){return this.data.type==="Folder"}retrieveData(){const json=TextEditor.getDragEventData(this.#event);return{type:json.type,uuid:json.uuid,x:json.x,y:json.y,elevation:json.elevation}}async handleDrop(){if(!this.canHandleDrop())return!1;this.#event.preventDefault();const folder=await this.#getFolder();return folder?.type==="Actor"?(await this.#handleActorFolder(this.data,folder,this.#event),!0):folder?.type==="JournalEntry"?(await this.#handleJournalFolder(folder,this.#event),!0):!1}async#getFolder(){return fromUuid(this.data.uuid)}async#handleActorFolder(data,folder,event){const actors=folder?.contents,topLeft=translateToTopLeftGrid(event),xPosition=data.x??topLeft.x,yPosition=data.y??topLeft.y,elevation=data.elevation??0;if(!actors?.length)return;const dropStyle=this.#settings.dropStyle;log(`Dropping ${actors.length} onto the canvas via ${dropStyle}`),dropStyle==="dialog"?await this.#handleDialogChoice({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="stack"?await this.#dropStack({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="random"?await this.#dropRandom({actors,xPosition,yPosition,elevation,isHidden:event.altKey}):dropStyle==="horizontalLine"?await this.#dropLine({actors,xPosition,yPosition,elevation,isHidden:event.altKey,isHorizontal:!0}):dropStyle==="verticalLine"&&await this.#dropLine({actors,xPosition,yPosition,elevation,isHidden:event.altKey,isHorizontal:!1})}async#handleDialogChoice({actors,xPosition,yPosition,elevation,isHidden}){const dropStyles=[{value:"stack",label:game.i18n.localize("Droppables.StackedUp")},{value:"random",label:game.i18n.localize("Droppables.Randomly")},{value:"horizontalLine",label:game.i18n.localize("Droppables.HorizontalLine")},{value:"verticalLine",label:game.i18n.localize("Droppables.VerticalLine")}],content=await renderTemplate$1("modules/dfreds-droppables/templates/drop-dialog.hbs",{dropStyles,savedDropStyle:this.#settings.lastUsedDropStyle,startingElevation:elevation?Math.round(elevation):null});return DialogV2$1.confirm({window:{title:game.i18n.localize("Droppables.DropActorsFolder"),controls:[]},content,position:{width:320},yes:{icon:"fas fa-level-down-alt",label:game.i18n.localize("Droppables.DropButton"),callback:__name(async(_event,_button,dialog)=>{const $html=$(dialog.element),dropStyle=$html.find('select[name="drop-style"]').val(),dropElevation=parseFloat($html.find('input[name="elevation"]').val());this.#settings.lastUsedDropStyle=dropStyle,dropStyle==="stack"?await this.#dropStack({actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="random"?await this.#dropRandom({actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="horizontalLine"?await this.#dropLine({isHorizontal:!0,actors,xPosition,yPosition,isHidden,elevation:dropElevation}):dropStyle==="verticalLine"&&await this.#dropLine({isHorizontal:!1,actors,xPosition,yPosition,isHidden,elevation:dropElevation})},"callback")}})}async#dropStack({actors,xPosition,yPosition,isHidden,elevation=void 0}){for(const actor of actors)await this.#dropActor({actor,xPosition,yPosition,isHidden,elevation})}async#dropRandom({actors,xPosition,yPosition,isHidden,elevation=void 0}){let distance=0,dropped=0,offsetX=0,offsetY=0;for(const actor of actors){const totalTries=Math.pow(1+distance*2,2)-Math.pow(distance*2-1,2),tries=Math.pow(1+distance*2,2)-dropped;await this.#dropActor({actor,xPosition:xPosition+offsetX,yPosition:yPosition+offsetY,isHidden,elevation}),totalTries-tries<totalTries/4?offsetX+=canvas.grid.sizeX:totalTries-tries<2*totalTries/4?offsetY+=canvas.grid.sizeY:totalTries-tries<3*totalTries/4?offsetX-=canvas.grid.sizeX:offsetY-=canvas.grid.sizeY,dropped+=1,dropped===Math.pow(1+distance*2,2)&&(distance+=1,offsetX=-1*distance*canvas.grid.sizeX,offsetY=-1*distance*canvas.grid.sizeY)}}async#dropLine({isHorizontal,actors,xPosition,yPosition,isHidden,elevation=void 0}){const step=isHorizontal?canvas.grid.sizeX:canvas.grid.sizeY;let offsetX=0,offsetY=0;for(const actor of actors){const width=foundry.utils.getProperty(actor,"prototypeToken.width")||1,height=foundry.utils.getProperty(actor,"prototypeToken.height")||1;await this.#dropActor({actor,xPosition:xPosition+offsetX,yPosition:yPosition+offsetY,isHidden,elevation}),isHorizontal?offsetX+=width*step:offsetY+=height*step}}async#dropActor({actor,xPosition,yPosition,isHidden,elevation}){const tokenDocument=await actor.getTokenDocument({x:xPosition,y:yPosition,hidden:isHidden,elevation:Number.isNaN(elevation)?0:elevation}),token=new CONFIG.Token.documentClass(tokenDocument);return TokenDocument.create(token.toObject(),{parent:canvas.scene})}async#handleJournalFolder(folder,event){const entries=folder?.contents,topLeft=translateToTopLeftGrid(event);return DialogV2$1.confirm({window:{title:game.i18n.localize("Droppables.DropJournalFolder"),controls:[]},content:`<p>${game.i18n.format("Droppables.DropJournalFolderExplanation",{folderName:folder?.name??""})}</p>`,yes:{icon:"fas fa-level-down-alt",label:game.i18n.localize("Droppables.DropButton"),callback:__name(async()=>{for(const entry of entries)await this.#dropJournalEntry({entry,xPosition:topLeft.x,yPosition:topLeft.y})},"callback")}})}async#dropJournalEntry({entry,xPosition,yPosition}){return NoteDocument.create({entryId:entry.id,x:xPosition,y:yPosition},{parent:canvas.scene})}}const ThreeDCanvasConfig={listen(){Hooks.on("3DCanvasConfig",config=>{config.INTERACTIONS.dropFunctions.Folder=async function(event,data){canvas.tokens.activate();const droppableFolders=new FolderDropHandler(event);droppableFolders.data=data,await droppableFolders.handleDrop()}})}};class DroppableManager{static{__name2(this,"DroppableManager")}static{__name(this,"DroppableManager")}#handlers=[];registerHandler(handler){this.#handlers.push(handler)}async handleDrop(){for(const handler of this.#handlers)if(handler.canHandleDrop())return handler.handleDrop();return!1}}const{DialogV2}=foundry.applications.api,{renderTemplate}=foundry.applications.handlebars;class TokensOnCanvasHandler{static{__name2(this,"TokensOnCanvasHandler")}static{__name(this,"TokensOnCanvasHandler")}data;#event;#settings=new Settings;constructor(event){this.#event=event,this.data=this.retrieveData()}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!canvas.activeLayer?.name?.includes("TokenLayer")||!this.data.files.length||this.data.url)return!1;if(!isGM){const permissions=[{check:"FILES_UPLOAD",message:"Droppables.NoUploadFiles"},{check:"TOKEN_CREATE",message:"Droppables.NoCreateTokens"},{check:"ACTOR_CREATE",message:"Droppables.NoCreateActors"}];for(const{check,message}of permissions)if(!game.user.hasPermission(check))return ui.notifications.warn(game.i18n.localize(message)),!1}return!0}retrieveData(){const files=this.#event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")),url:this.#event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.#event.preventDefault();const types=game.documentTypes.Actor.filter(type=>type!==CONST.BASE_DOCUMENT_TYPE),typeLocalizations=types.reduce((obj,typeLabel)=>{const label=CONFIG.Actor.typeLabels[typeLabel]??typeLabel;return obj[typeLabel]=game.i18n.has(label)?game.i18n.localize(label):typeLabel,obj},{}),uploadedData=await this.#uploadData({typeLocalizations,selectedType:types[0]});return await this.#promptForActorTypes(uploadedData),!0}async#uploadData({typeLocalizations,selectedType}){const uploadedData=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(MODULE_ID,"tokens",file);uploadedData.push({response,types:typeLocalizations,selectedType,fileName:file.name})}return uploadedData}async#promptForActorTypes(uploadedData){const content=await renderTemplate(`modules/${MODULE_ID}/templates/drop-token-files-dialog.hbs`,{uploadedData});return DialogV2.prompt({window:{title:game.i18n.localize("Droppables.TokenActorTypes"),controls:[]},content,ok:{label:game.i18n.localize("Droppables.Confirm"),callback:__name(async(_event,_button,dialog)=>{const dropData=$(dialog.element).find('select[name="type"]').map((_idx,ele)=>{const data=$(ele).data(),typeSelection=$(ele).val();return{fileName:data?.fileName??"Unknown",filePath:data?.filePath,type:typeSelection?.toString()??CONST.BASE_DOCUMENT_TYPE}}).get();await this.#createActorsAndTokens(dropData)},"callback")}})}async#createActorsAndTokens(dropData){const actorSources=[];for(const tokenDropData of dropData){const actorSource={name:tokenDropData.fileName.split(".")[0],type:tokenDropData.type,img:tokenDropData.filePath};actorSources.push(actorSource)}const createdActors=await Actor.createDocuments(actorSources),tokenSources=[];for(const actor of createdActors){const topLeft=translateToTopLeftGrid(this.#event),tokenSource={texture:{src:actor.img},hidden:this.#event.altKey,x:topLeft.x,y:topLeft.y,actorId:actor.id,actorLink:!1};tokenSources.push(tokenSource),await actor.update({prototypeToken:tokenSource})}return canvas.scene?.createEmbeddedDocuments("Token",tokenSources,{broadcast:!0,data:[]})}}class TilesOnCanvasHandler{static{__name2(this,"TilesOnCanvasHandler")}static{__name(this,"TilesOnCanvasHandler")}data;#event;#settings=new Settings;constructor(event){this.#event=event,this.data=this.retrieveData()}canHandleDrop(){return!this.#settings.canvasDragUpload||!canvas.activeLayer?.name?.includes("TilesLayer")||!this.data.files.length||this.data.url?!1:!game.user.isGM&&!game.user.hasPermission("FILES_UPLOAD")?(ui.notifications.warn(game.i18n.localize("Droppables.NoUploadFiles")),!1):!0}retrieveData(){const files=this.#event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")||file.type.includes("video")),url:this.#event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.#event.preventDefault();const overhead=ui.controls.controls.tiles?.tools?.foreground?.active??!1,tileSources=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(MODULE_ID,"tiles",file),topLeft=translateToTopLeftGrid(this.#event),texture=await loadTexture(response.path),tileSource={texture:{src:response.path},width:texture?.baseTexture.width,height:texture?.baseTexture.height,elevation:overhead?20:0,hidden:this.#event.altKey,x:topLeft.x,y:topLeft.y};tileSources.push(tileSource)}return canvas.perception.update({refreshLighting:!0,refreshOcclusion:!0}),await canvas.scene?.createEmbeddedDocuments("Tile",tileSources,{broadcast:!0,data:[]}),!0}}class SoundsOnCanvasHandler{static{__name2(this,"SoundsOnCanvasHandler")}static{__name(this,"SoundsOnCanvasHandler")}data;#event;#settings=new Settings;constructor(event){this.#event=event,this.data=this.retrieveData()}canHandleDrop(){return!this.#settings.canvasDragUpload||!canvas.activeLayer?.name?.includes("SoundsLayer")||!this.data.files.length||this.data.url?!1:!game.user.isGM&&!game.user.hasPermission("FILES_UPLOAD")?(ui.notifications.warn(game.i18n.localize("Droppables.NoUploadFiles")),!1):!0}retrieveData(){const files=this.#event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("audio")),url:this.#event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.#event.preventDefault();const ambientSoundSources=[];for(const file of this.data.files){const response=await FilePicker.uploadPersistent(MODULE_ID,"sounds",file),topLeft=translateToTopLeftGrid(this.#event),ambientSoundSource={path:response.path,x:topLeft.x,y:topLeft.y,radius:10,easing:!0,repeat:!0,volume:1};ambientSoundSources.push(ambientSoundSource)}return await canvas.scene?.createEmbeddedDocuments("AmbientSound",ambientSoundSources),!0}}class NotesOnCanvasHandler{static{__name2(this,"NotesOnCanvasHandler")}static{__name(this,"NotesOnCanvasHandler")}data;#event;#settings=new Settings;constructor(event){this.#event=event,this.data=this.retrieveData()}canHandleDrop(){const isGM=game.user.isGM;if(!this.#settings.canvasDragUpload||!canvas.activeLayer?.name?.includes("NotesLayer")||!this.data.files.length||this.data.url)return!1;if(!isGM){const permissions=[{permission:"FILES_UPLOAD",message:"Droppables.NoUploadFiles"},{permission:"JOURNAL_CREATE",message:"Droppables.NoCreateJournals"},{permission:"NOTE_CREATE",message:"Droppables.NoCreateNotes"}];for(const{permission,message}of permissions)if(!game.user.hasPermission(permission))return ui.notifications.warn(game.i18n.localize(message)),!1}return!0}retrieveData(){const files=this.#event.dataTransfer?.files||new FileList;return{files:Array.from(files).filter(file=>file.type.includes("image")||file.type.includes("pdf")||file.type.includes("video")||file.type.includes("text")),url:this.#event.dataTransfer?.getData("text")}}async handleDrop(){if(!this.canHandleDrop())return!1;this.#event.preventDefault();const uploadedData=await this.#uploadData();return await this.#createJournalAndNotes(uploadedData),!0}async#uploadData(){const uploadedData=[];for(const file of this.data.files){const type=this.#determineFileType(file);if(type==="text"){const text=await new Promise(resolve=>{const reader=new FileReader;reader.addEventListener("load",async()=>{resolve(reader.result?.toString())}),reader.readAsText(file)});uploadedData.push({text,type,fileName:file.name})}else{const response=await FilePicker.uploadPersistent(MODULE_ID,"journals",file);uploadedData.push({response,type,fileName:file.name})}}return uploadedData}#determineFileType(file){let type="image";return file.type.includes("pdf")?type="pdf":file.type.includes("video")?type="video":file.type.includes("text")&&(type="text"),type}async#createJournalAndNotes(uploadedData){const journalPageSources=uploadedData.map(data=>({name:data.fileName,type:data.type,src:data.response?.path,text:{content:data.text}})),dateTime=new Date().toLocaleString(void 0,{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"}),journalSource={name:game.i18n.format("Droppables.JournalSceneName",{name:canvas.scene?.name??"",dateTime}),pages:journalPageSources},journal=await JournalEntry.create(journalSource),topLeft=translateToTopLeftGrid(this.#event),noteSource={entryId:journal?.id,x:topLeft.x,y:topLeft.y};await canvas.scene?.createEmbeddedDocuments("Note",[noteSource])}}const CanvasInit={listen(){Hooks.on("canvasInit",_canvas=>{const board=document.getElementById("board");if(!board)return;const defaultOnDrop=board.ondrop;board.ondrop=async event=>{const manager=new DroppableManager;manager.registerHandler(new FolderDropHandler(event)),manager.registerHandler(new TokensOnCanvasHandler(event)),manager.registerHandler(new TilesOnCanvasHandler(event)),manager.registerHandler(new SoundsOnCanvasHandler(event)),manager.registerHandler(new NotesOnCanvasHandler(event)),await manager.handleDrop()||defaultOnDrop?.call(board,event)}})}},HooksDroppables={listen(){const listeners=[Init,Setup,ThreeDCanvasConfig,CanvasInit];for(const listener of listeners)listener.listen()}};HooksDroppables.listen();
