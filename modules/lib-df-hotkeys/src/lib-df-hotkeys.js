class Keys{constructor(){this._data={KeyA:{key:"KeyA",label:"DF_HOTKEYS.KeyA"},KeyB:{key:"KeyB",label:"DF_HOTKEYS.KeyB"},KeyC:{key:"KeyC",label:"DF_HOTKEYS.KeyC"},KeyD:{key:"KeyD",label:"DF_HOTKEYS.KeyD"},KeyE:{key:"KeyE",label:"DF_HOTKEYS.KeyE"},KeyF:{key:"KeyF",label:"DF_HOTKEYS.KeyF"},KeyG:{key:"KeyG",label:"DF_HOTKEYS.KeyG"},KeyH:{key:"KeyH",label:"DF_HOTKEYS.KeyH"},KeyI:{key:"KeyI",label:"DF_HOTKEYS.KeyI"},KeyJ:{key:"KeyJ",label:"DF_HOTKEYS.KeyJ"},KeyK:{key:"KeyK",label:"DF_HOTKEYS.KeyK"},KeyL:{key:"KeyL",label:"DF_HOTKEYS.KeyL"},KeyM:{key:"KeyM",label:"DF_HOTKEYS.KeyM"},KeyN:{key:"KeyN",label:"DF_HOTKEYS.KeyN"},KeyO:{key:"KeyO",label:"DF_HOTKEYS.KeyO"},KeyP:{key:"KeyP",label:"DF_HOTKEYS.KeyP"},KeyQ:{key:"KeyQ",label:"DF_HOTKEYS.KeyQ"},KeyR:{key:"KeyR",label:"DF_HOTKEYS.KeyR"},KeyS:{key:"KeyS",label:"DF_HOTKEYS.KeyS"},KeyT:{key:"KeyT",label:"DF_HOTKEYS.KeyT"},KeyU:{key:"KeyU",label:"DF_HOTKEYS.KeyU"},KeyV:{key:"KeyV",label:"DF_HOTKEYS.KeyV"},KeyW:{key:"KeyW",label:"DF_HOTKEYS.KeyW"},KeyX:{key:"KeyX",label:"DF_HOTKEYS.KeyX"},KeyY:{key:"KeyY",label:"DF_HOTKEYS.KeyY"},KeyZ:{key:"KeyZ",label:"DF_HOTKEYS.KeyZ"},Digit1:{key:"Digit1",label:"DF_HOTKEYS.Digit1"},Digit2:{key:"Digit2",label:"DF_HOTKEYS.Digit2"},Digit3:{key:"Digit3",label:"DF_HOTKEYS.Digit3"},Digit4:{key:"Digit4",label:"DF_HOTKEYS.Digit4"},Digit5:{key:"Digit5",label:"DF_HOTKEYS.Digit5"},Digit6:{key:"Digit6",label:"DF_HOTKEYS.Digit6"},Digit7:{key:"Digit7",label:"DF_HOTKEYS.Digit7"},Digit8:{key:"Digit8",label:"DF_HOTKEYS.Digit8"},Digit9:{key:"Digit9",label:"DF_HOTKEYS.Digit9"},Digit0:{key:"Digit0",label:"DF_HOTKEYS.Digit0"},Numpad1:{key:"Numpad1",label:"DF_HOTKEYS.Numpad1"},Numpad2:{key:"Numpad2",label:"DF_HOTKEYS.Numpad2"},Numpad3:{key:"Numpad3",label:"DF_HOTKEYS.Numpad3"},Numpad4:{key:"Numpad4",label:"DF_HOTKEYS.Numpad4"},Numpad5:{key:"Numpad5",label:"DF_HOTKEYS.Numpad5"},Numpad6:{key:"Numpad6",label:"DF_HOTKEYS.Numpad6"},Numpad7:{key:"Numpad7",label:"DF_HOTKEYS.Numpad7"},Numpad8:{key:"Numpad8",label:"DF_HOTKEYS.Numpad8"},Numpad9:{key:"Numpad9",label:"DF_HOTKEYS.Numpad9"},Numpad0:{key:"Numpad0",label:"DF_HOTKEYS.Numpad0"},NumpadDecimal:{key:"NumpadDecimal",label:"DF_HOTKEYS.NumpadDecimal"},NumpadDivide:{key:"NumpadDivide",label:"DF_HOTKEYS.NumpadDivide"},NumpadMultiply:{key:"NumpadMultiply",label:"DF_HOTKEYS.NumpadMultiply"},NumpadSubtract:{key:"NumpadSubtract",label:"DF_HOTKEYS.NumpadSubtract"},NumpadAdd:{key:"NumpadAdd",label:"DF_HOTKEYS.NumpadAdd"},NumpadEnter:{key:"NumpadEnter",label:"DF_HOTKEYS.NumpadEnter"},Backspace:{key:"Backspace",label:"DF_HOTKEYS.Backspace"},Enter:{key:"Enter",label:"DF_HOTKEYS.Enter"},Insert:{key:"Insert",label:"DF_HOTKEYS.Insert"},Delete:{key:"Delete",label:"DF_HOTKEYS.Delete"},PageUp:{key:"PageUp",label:"DF_HOTKEYS.PageUp"},PageDown:{key:"PageDown",label:"DF_HOTKEYS.PageDown"},Home:{key:"Home",label:"DF_HOTKEYS.Home"},End:{key:"End",label:"DF_HOTKEYS.End"},BracketLeft:{key:"BracketLeft",label:"DF_HOTKEYS.BracketLeft"},BracketRight:{key:"BracketRight",label:"DF_HOTKEYS.BracketRight"},Slash:{key:"Slash",label:"DF_HOTKEYS.Slash"},Backslash:{key:"Backslash",label:"DF_HOTKEYS.Backslash"},Minus:{key:"Minus",label:"DF_HOTKEYS.Minus"},Equal:{key:"Equal",label:"DF_HOTKEYS.Equal"},Semicolon:{key:"Semicolon",label:"DF_HOTKEYS.Semicolon"},Quote:{key:"Quote",label:"DF_HOTKEYS.Quote"},Comma:{key:"Comma",label:"DF_HOTKEYS.Comma"},Period:{key:"Period",label:"DF_HOTKEYS.Period"},Backquote:{key:"Backquote",label:"DF_HOTKEYS.Backquote"}};}get(key){return this._data[key]}get keys(){return Object.values(this._data).map(x=>x.key)}get labels(){return Object.values(this._data).map(x=>x.label)}get entries(){return Object.values(this._data)}get KeyA(){return this._data.KeyA.key}get KeyB(){return this._data.KeyB.key}get KeyC(){return this._data.KeyC.key}get KeyD(){return this._data.KeyD.key}get KeyE(){return this._data.KeyE.key}get KeyF(){return this._data.KeyF.key}get KeyG(){return this._data.KeyG.key}get KeyH(){return this._data.KeyH.key}get KeyI(){return this._data.KeyI.key}get KeyJ(){return this._data.KeyJ.key}get KeyK(){return this._data.KeyK.key}get KeyL(){return this._data.KeyL.key}get KeyM(){return this._data.KeyM.key}get KeyN(){return this._data.KeyN.key}get KeyO(){return this._data.KeyO.key}get KeyP(){return this._data.KeyP.key}get KeyQ(){return this._data.KeyQ.key}get KeyR(){return this._data.KeyR.key}get KeyS(){return this._data.KeyS.key}get KeyT(){return this._data.KeyT.key}get KeyU(){return this._data.KeyU.key}get KeyV(){return this._data.KeyV.key}get KeyW(){return this._data.KeyW.key}get KeyX(){return this._data.KeyX.key}get KeyY(){return this._data.KeyY.key}get KeyZ(){return this._data.KeyZ.key}get Digit1(){return this._data.Digit1.key}get Digit2(){return this._data.Digit2.key}get Digit3(){return this._data.Digit3.key}get Digit4(){return this._data.Digit4.key}get Digit5(){return this._data.Digit5.key}get Digit6(){return this._data.Digit6.key}get Digit7(){return this._data.Digit7.key}get Digit8(){return this._data.Digit8.key}get Digit9(){return this._data.Digit9.key}get Digit0(){return this._data.Digit0.key}get Numpad1(){return this._data.Numpad1.key}get Numpad2(){return this._data.Numpad2.key}get Numpad3(){return this._data.Numpad3.key}get Numpad4(){return this._data.Numpad4.key}get Numpad5(){return this._data.Numpad5.key}get Numpad6(){return this._data.Numpad6.key}get Numpad7(){return this._data.Numpad7.key}get Numpad8(){return this._data.Numpad8.key}get Numpad9(){return this._data.Numpad9.key}get Numpad0(){return this._data.Numpad0.key}get NumpadDecimal(){return this._data.NumpadDecimal.key}get NumpadDivide(){return this._data.NumpadDivide.key}get NumpadMultiply(){return this._data.NumpadMultiply.key}get NumpadSubtract(){return this._data.NumpadSubtract.key}get NumpadAdd(){return this._data.NumpadAdd.key}get NumpadEnter(){return this._data.NumpadEnter.key}get Backspace(){return this._data.Backspace.key}get Enter(){return this._data.Enter.key}get Insert(){return this._data.Insert.key}get Delete(){return this._data.Delete.key}get PageUp(){return this._data.PageUp.key}get PageDown(){return this._data.PageDown.key}get Home(){return this._data.Home.key}get End(){return this._data.End.key}get BracketLeft(){return this._data.BracketLeft.key}get BracketRight(){return this._data.BracketRight.key}get Slash(){return this._data.Slash.key}get Backslash(){return this._data.Backslash.key}get Minus(){return this._data.Minus.key}get Equal(){return this._data.Equal.key}get Semicolon(){return this._data.Semicolon.key}get Quote(){return this._data.Quote.key}get Comma(){return this._data.Comma.key}get Period(){return this._data.Period.key}get Backquote(){return this._data.Backquote.key}}

var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator.throw(value));}catch(e){reject(e);}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value);})).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());})};class SETTINGS{static get MOD_NAME(){return this._MOD_NAME}static init(modName){this._MOD_NAME=modName;}static register(key,config){game.settings.register(SETTINGS._MOD_NAME,key,config);}static get(key){return game.settings.get(SETTINGS._MOD_NAME,key)}static set(key,value){return __awaiter(this,void 0,void 0,function*(){return yield game.settings.set(SETTINGS._MOD_NAME,key,value)})}static default(key){return game.settings.settings.get(`${SETTINGS._MOD_NAME}.${key}`).default}static typeOf(){return Object}}

var __awaiter$1=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator.throw(value));}catch(e){reject(e);}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value);})).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());})};function printErrors(errors){console.error(errors.join(",\n")+"\n"+(new Error).stack);}class _Hotkeys{static get isShim(){return !1}static _metaKey(event){return (event.altKey?1:0)|(event.ctrlKey?2:0)|(event.shiftKey?4:0)}static _isMeta(event){return "Shift"===event.key||"Ctrl"===event.key||"Alt"===event.key}static _handleKeyDown(event){if(this._isMeta(event))return;if(document.activeElement instanceof HTMLInputElement)return;if(document.activeElement instanceof HTMLTextAreaElement)return;if("true"===document.activeElement.getAttribute("contenteditable"))return;const metaKey=this._metaKey(event),metaHandlers=this._handlers.get(metaKey);if(!metaHandlers||0==metaHandlers.size)return;const eventHandlers=metaHandlers.get(event.code);if(eventHandlers&&0!=eventHandlers.length){event.preventDefault(),this._handled.add(event.code);for(let handler of eventHandlers)handler.onKeyDown&&(event.repeat&&!handler.repeat||handler.onKeyDown(handler,event,event.repeat));}}static _handleKeyUp(event){if(!this._handled.has(event.code))return;this._handled.delete(event.code);const metaKey=this._metaKey(event),metaHandlers=this._handlers.get(metaKey);if(!metaHandlers||0==metaHandlers.size)return;const eventHandlers=metaHandlers.get(event.code);if(eventHandlers&&0!=eventHandlers.length){event.preventDefault(),this._handled.add(event.code);for(let handler of eventHandlers)handler.onKeyUp&&handler.onKeyUp(handler,event);}}static _init(){window.addEventListener("keydown",this._handleKeyDown.bind(this)),window.addEventListener("keyup",this._handleKeyUp.bind(this)),this._settings.set(_Hotkeys.GENERAL,{name:_Hotkeys.GENERAL,label:"DF_HOTKEYS.GeneralGroup_Label",description:"",items:[]});}static _getOrDefault(map,key,defValue){return map.has(key)?map.get(key):(map.set(key,defValue()),map.get(key))}static showConfig(title,filters){return __awaiter$1(this,void 0,void 0,function*(){throw new Error("The Shim does not contain the HotkeysConfig application. Please only use this function when DF Hotkeys is activated.")})}static createConfig(title,filters){throw new Error("The Shim does not contain the HotkeysConfig application. Please only use this function when DF Hotkeys is activated.")}static registerShortcut(config,throwOnFail=!0){const errors=[];if("string"==typeof config.name||config.name instanceof String||errors.push("Hotkeys.registerShortcut(): config.name must be a string!"),config.name.includes("::")&&errors.push('Hotkeys.registerShortcut(): config.name cannot contain "::"'),"string"==typeof config.label||config.label instanceof String||errors.push("Hotkeys.registerShortcut(): config.label must be a string!"),void 0===config.group||null===config.group||"string"==typeof config.group||config.group instanceof String||errors.push("Hotkeys.registerShortcut(): config.group must be null, undefined, or a string!"),!config.get||config.get instanceof Function||errors.push("Hotkeys.registerShortcut(): config.get must be a Function!"),!config.set||config.set instanceof Function||errors.push("Hotkeys.registerShortcut(): config.set must be a Function!"),!config.set!=!config.get&&errors.push("Hotkeys.registerShortcut(): If either `get` or `set` is defined, both must be defined!"),config.default instanceof Function||void 0!==config.default.key&&void 0!==config.default.alt&&void 0!==config.default.ctrl&&void 0!==config.default.shift||errors.push("Hotkeys.registerShortcut(): config.default must be either a Function or a KeyMap!"),!config.handle||config.handle instanceof Function||errors.push("Hotkeys.registerShortcut(): DEPRECATED! config.handle must be a Function!"),!config.onKeyDown||config.onKeyDown instanceof Function||errors.push("Hotkeys.registerShortcut(): config.onKeyDown must be a Function!"),!config.onKeyUp||config.onKeyUp instanceof Function||errors.push("Hotkeys.registerShortcut(): config.onKeyUp must be a Function!"),this._settingsNames.has(config.name)&&errors.push(`Hotkeys.registerShortcut(): '${config.name}' hotkey has already been registered!`),errors.length>0){if(throwOnFail)throw Error(errors.join(",\n"));return printErrors(errors),!1}if(config.handle&&console.warn(`Hotkeys: The configuration "${config.name}" is using the deprecated 'handle()' function. Please use 'onKeyDown' and/or 'onKeyUp' instead.\nThis function will still work for now, but will be removed in a later update.`),config.get||(SETTINGS.register("KEYMAP."+config.name,{scope:"world",config:!1,type:SETTINGS.typeOf(),default:config.default instanceof Function?config.default():config.default}),config.get=(()=>SETTINGS.get("KEYMAP."+config.name)),config.set=(value=>SETTINGS.set("KEYMAP."+config.name,value))),this._settingsNames.add(config.name),config.group){if(!this._settings.has(config.group)){if(throwOnFail)throw Error(`Hotkeys.registerShortcut(): '${config.group}' group does not exist. Please make sure you call Hotkeys.registerGroup() before adding hotkeys for a custom group.`);return !1}}else config.group=_Hotkeys.GENERAL;this._settings.get(config.group).items.push(config);const keyMap=config.get(),metaKey=(keyMap.alt?1:0)|(keyMap.ctrl?2:0)|(keyMap.shift?4:0),metaHandlers=this._getOrDefault(this._handlers,metaKey,()=>new Map);return this._getOrDefault(metaHandlers,keyMap.key,()=>[]).push(config),!0}static deregisterShortcut(name){var found=!1;for(let group of this._settings.values()){const idx=group.items.findIndex(x=>x.name===name);if(!(idx<0)){group.items.splice(idx,1),found=!0;break}}if(!found)return !1;for(let meta of this._handlers.values())for(let handlers of meta.values()){const idx=handlers.findIndex(x=>x.name===name);idx<0||handlers.splice(idx,1);}return !0}static registerGroup(group,throwOnFail=!0){var _a;const errors=[];if("string"==typeof group.name||group.name instanceof String||errors.push("Hotkeys.registerGroup(): group.name must be a string!"),group.name.includes("::")&&errors.push('Hotkeys.registerGroup(): group.name cannot contain "::"'),"string"==typeof group.label||group.label instanceof String||errors.push("Hotkeys.registerGroup(): group.label must be a string!"),void 0===group.description||null===group.description||"string"==typeof group.description||group.description instanceof String||errors.push("Hotkeys.registerGroup(): group.description must be null, undefined, or a string!"),this._settings.has(group.name)&&errors.push(`Hotkeys.registerGroup(): '${group.name}' group has already been registered!`),errors.length>0){if(throwOnFail)throw Error(errors.join(",\n"));return printErrors(errors),!1}return this._settings.set(group.name,{name:group.name,label:group.label,description:null!==(_a=group.description)&&void 0!==_a?_a:"",items:[]}),!0}}_Hotkeys.GENERAL="general",_Hotkeys._handlers=new Map,_Hotkeys._handled=new Set,_Hotkeys._settings=new Map,_Hotkeys._settingsNames=new Set,_Hotkeys.keys=new Keys;

var __awaiter$2=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator.throw(value));}catch(e){reject(e);}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value);})).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());})};function isGroupFilter(object){return object instanceof Object&&"group"in object&&"hotkeys"in object}function isStringRegex(object){return "string"==typeof object||object instanceof RegExp||object instanceof String}class HotkeyConfig extends FormApplication{constructor(titleOverride,filter){super({},{title:titleOverride}),this._filters=filter;}static get defaultOptions(){return mergeObject(super.defaultOptions,{title:"DF_HOTKEYS.Config_Title",editable:!0,resizable:!0,submitOnChange:!1,submitOnClose:!1,closeOnSubmit:!0,width:525,id:"DFHotkeyConfig",template:"modules/lib-df-hotkeys/templates/HotkeyConfig.hbs"})}static init(){game.settings.registerMenu("lib-df-hotkeys",this.PREF_MENU,{restricted:!0,type:HotkeyConfig,icon:"fas fa-keyboard",label:"DF_HOTKEYS.Config_Title",name:"DF_HOTKEYS.Config_Title"});}_filterGroups(groups){return this._filters&&this._filters instanceof Array&&0!==this._filters.length?groups.filter(group=>this._filters.some(pattern=>isGroupFilter(pattern)?group.name.match(pattern.group):group.name.match(pattern))).map(group=>({name:group.name,description:group.description,label:group.label,items:group.items.filter(item=>this._filters.some(pattern=>isGroupFilter(pattern)&&null!==item.group.match(pattern.group)?0===pattern.hotkeys.length||pattern.hotkeys.some(gfPattern=>null!==item.name.match(gfPattern)):!!isStringRegex(pattern)&&null!==item.group.match(pattern)))})):groups}getData(options){return {title:this._filters?this.options.title:void 0,keys:_Hotkeys.keys.entries,groups:this._filterGroups([...Hotkeys._settings.values()]).filter(x=>x.items.length>0).map(g=>({name:g.name,label:g.label,description:g.description,items:g.items.map(i=>({name:i.name,label:i.label,map:i.get()}))}))}}_updateObject(event,formData){return __awaiter$2(this,void 0,void 0,function*(){if(!formData)return;const settings=_Hotkeys._settings,groups=new Map;settings.forEach(x=>groups.set(x.name,new Map(x.items.map(x=>[x.name,x]))));const saveData=new Map;for(let entry of Object.keys(formData)){const tokens=entry.split("::"),group=saveData.has(tokens[0])?saveData.get(tokens[0]):saveData.set(tokens[0],new Map).get(tokens[0]),key=tokens[1];(group.has(key)?group.get(key):group.set(key,[]).get(key)).push(tokens[tokens.length-1]);}for(let groupName of saveData.keys()){if(!groups.has(groupName)){console.error(`Did not find hotkey group with the name "${groupName}"`);continue}const group=groups.get(groupName);for(let itemName of saveData.get(groupName).keys()){if(!group.has(itemName)){console.error(`Did not find hotkey with the name "${itemName}"`);continue}const item=group.get(itemName),rootKey=`${groupName}::${itemName}::`,keyMap={key:formData[rootKey+"key"],alt:formData[rootKey+"alt"],ctrl:formData[rootKey+"ctrl"],shift:formData[rootKey+"shift"]};void 0!==keyMap.key&&"string"==typeof keyMap.key?void 0!==keyMap.alt&&"boolean"==typeof keyMap.alt?void 0!==keyMap.ctrl&&"boolean"==typeof keyMap.ctrl?void 0!==keyMap.shift&&"boolean"==typeof keyMap.shift?yield item.set(keyMap):console.error(`HotkeyConfig: "${itemName}" was missing 'shift' field`):console.error(`HotkeyConfig: "${itemName}" was missing 'ctrl' field`):console.error(`HotkeyConfig: "${itemName}" was missing 'alt' field`):console.error(`HotkeyConfig: "${itemName}" was missing 'key' field`);}}HotkeyConfig.requestReload();})}activateListeners(html){super.activateListeners(html),html.find("#reset").on("click",e=>{e.preventDefault();const groups=this._filterGroups([..._Hotkeys._settings.values()]).filter(x=>x.items.length>0);for(let group of groups)group.items.forEach(x=>{const defValue=x.default instanceof Function?x.default():x.default;$(`#DFHotkeyConfig select[name="${group.name}::${x.name}::key"]`).val(defValue.key.toString()),$(`#DFHotkeyConfig input[name="${group.name}::${x.name}::alt"]`)[0].checked=defValue.alt,$(`#DFHotkeyConfig input[name="${group.name}::${x.name}::ctrl"]`)[0].checked=defValue.ctrl,$(`#DFHotkeyConfig input[name="${group.name}::${x.name}::shift"]`)[0].checked=defValue.shift;});});}static requestReload(){const dialog=new Dialog({title:game.i18n.localize("DF_HOTKEYS.ReloadRequired_Title"),content:game.i18n.localize("DF_HOTKEYS.ReloadRequired_Content"),default:"yes",buttons:{no:{label:game.i18n.localize("DF_HOTKEYS.ReloadRequired_Negative"),callback:()=>__awaiter$2(this,void 0,void 0,function*(){return yield dialog.close()})},yes:{label:game.i18n.localize("DF_HOTKEYS.ReloadRequired_Positive"),callback:()=>window.location.reload()}}});dialog.render(!0);}}HotkeyConfig.PREF_MENU="HotkeySettingsMenu";

var __awaiter$3=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator.throw(value));}catch(e){reject(e);}}function step(result){var value;result.done?resolve(result.value):(value=result.value,value instanceof P?value:new P(function(resolve){resolve(value);})).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());})};const Hotkeys$1=_Hotkeys;window.Hotkeys=Hotkeys$1,Hotkeys$1._init(),Hotkeys$1.showConfig=function(title,filters){return __awaiter$3(this,void 0,void 0,function*(){if(!title||""===title)throw new Error("You must provide a title for the config menu");if(!filters||0===filters.length)throw new Error("You must provide at least one filter");const config=new HotkeyConfig(title,filters);yield config.render(!0);})},Hotkeys$1.createConfig=function(title,filters){if(!title||""===title)throw new Error("You must provide a title for the config menu");if(!filters||0===filters.length)throw new Error("You must provide at least one filter");return class extends HotkeyConfig{constructor(){super(title,filters);}}};SETTINGS.init("lib-df-hotkeys"),Hooks.once("init",function(){HotkeyConfig.init();SETTINGS.register("select",{scope:"world",config:!1,default:{key:Hotkeys$1.keys.KeyS,alt:!1,ctrl:!1,shift:!1},type:SETTINGS.typeOf()}),Hotkeys$1.registerShortcut({name:`${SETTINGS.MOD_NAME}.select`,label:"DF_HOTKEYS.SelectTool",get:()=>SETTINGS.get("select"),set:value=>__awaiter$3(this,void 0,void 0,function*(){return SETTINGS.set("select",value)}),default:()=>SETTINGS.default("select"),onKeyDown:self=>ui.controls._onClickTool({preventDefault:()=>{},currentTarget:{dataset:{tool:"select"}}})});});

export { Hotkeys$1 as Hotkeys };
