const moduleMetadata = {"id":"illandril-token-hud-scale","version":"2.2.2","title":"Illandril's Token HUD scaler","bugs":"https://github.com/illandril/FoundryVTT-token-hud-scale/issues"};

const validationPattern=/^[a-z_][a-z0-9\-_]*[a-z0-9_]$/i,assertValidPrefixSection=a=>{if(!validationPattern.test(a))throw new Error("CSS prefixes must be at least two characters, start and end with a letter or \"_\", and contain only letters, numbers, \"_\", or \"-\"")};class CSSPrefix{#prefix;constructor(a){assertValidPrefixSection(a),this.#prefix=`${a}--`;}child(a){return assertValidPrefixSection(a),`${this.#prefix}${a}`}childPrefix(a){return assertValidPrefixSection(a),new CSSPrefix(this.child(a))}}

class Logger{#logName;#logColor;#logPrefix;#logStyle;#logLevel;constructor(a,b){let c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:"#4f0104";this.#logName=a,this.#logLevel=b,this.#logColor=c,this.#logPrefix=`%c${a}`,this.#logStyle=`background-color: ${c}; color: #fff; padding: 0.1em 0.5em;`;}child(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:this.#logColor;return new Logger(`${this.#logName} - ${a}`,this.#logLevel,b)}debug(){if(this.#logLevel.debug){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.debug(this.#logPrefix,this.#logStyle,...b);}}info(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.info(this.#logPrefix,this.#logStyle,...b);}warn(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.warn(this.#logPrefix,this.#logStyle,...b);}error(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];console.error(this.#logPrefix,this.#logStyle,...b);}}

let canRegister=!1;const pendingRegistrations=[];let pendingDebugRegistration;Hooks.once("init",()=>{canRegister=!0,pendingRegistrations.forEach(a=>a()),pendingDebugRegistration?.();});class Settings{#namespace;#localize;constructor(a,b){this.#namespace=a,this.#localize=b;}registerMenu(a,b){const c={...b,name:`${this.#namespace}.setting.menu.${a}.name`,label:`${this.#namespace}.setting.menu.${a}.label`,hint:`${this.#namespace}.setting.menu.${a}.hint`},d=()=>{game.settings.registerMenu(this.#namespace,a,c);};return canRegister?d():pendingRegistrations.push(d),{id:`${this.#namespace}--menu--${a}`,title:`${this.#namespace}.setting.menu.${a}.title`,template:`modules/${this.#namespace}/templates/menu-${a}.html`}}#mapChoices(a,b){let c;return b&&(Array.isArray(b)?c={choices:Object.fromEntries(b.map(b=>[b,this.#localize(`setting.${a}.choice.${b}`)]))}:c={choices:b}),c}register(a,b,c){let{scope:i="world",hasHint:d,config:j=!0,requiresReload:k=!1,choices:e,callOnChangeOnInit:f,onChange:g,...h}=3<arguments.length&&void 0!==arguments[3]?arguments[3]:{};const l={set:b=>{game.settings.set(this.#namespace,a,b);},get:()=>game.settings.get(this.#namespace,a)},m=()=>{const m=this.#mapChoices(a,e);game.settings.register(this.#namespace,a,{name:this.#localize(`setting.${a}.label`),hint:d?this.#localize(`setting.${a}.hint`):void 0,scope:i,config:j,type:b,default:c,requiresReload:k,onChange:g,...m,...h}),f&&g?.(l.get());};return canRegister?m():"debug"===a?pendingDebugRegistration=m:pendingRegistrations.push(m),l}}

class Template{#path;constructor(a,b){this.#path=`modules/${a}/templates/${b}`,Hooks.on("init",()=>{void getTemplate(this.#path);});}async render(a){return renderTemplate(this.#path,a)}}

class ModuleUtils{#id;#logger;#settings;#cssPrefix;constructor(a){let{id:b,title:c,version:d,bugs:e,color:f}=a;const g=this.localize.bind(this);this.localize=g,this.#id=b,this.#settings=new Settings(b,g);const h={debug:!1};this.#settings.register("debug",Boolean,!1,{scope:"client",hasHint:!0,callOnChangeOnInit:!0,onChange:a=>{h.debug=a;}}),this.#logger=new Logger(`${c} v${d}`,h,f),e?this.logger.info(`Started. To report bugs, go to: ${e}`):this.logger.info("Started");}get id(){return this.#id}get logger(){return this.#logger}get cssPrefix(){return this.#cssPrefix||(this.#cssPrefix=new CSSPrefix(this.#id)),this.#cssPrefix}get settings(){return this.#settings}localize(a,b){let c=!!(2<arguments.length&&arguments[2]!==void 0)&&arguments[2];const d=`${this.#id}.${a}`;return !0!==c||game.i18n.has(d)?b?game.i18n.format(d,b):game.i18n.localize(d):void 0}registerTemplate(a){return new Template(this.#id,a)}}

const module=new ModuleUtils(moduleMetadata);

const refresh$4=()=>{game.canvas?.tokens?.placeables.forEach(a=>{void a.drawEffects();});},effectIconsLayoutSetting=module.settings.register("effectIconsLayout",String,"horizontal",{hasHint:!0,onChange:refresh$4,choices:["horizontal","vertical","above"]}),effectIconsPerRowSetting=module.settings.register("effectIconsPerRow",Number,3,{hasHint:!0,onChange:refresh$4,range:{min:2,max:10,step:1}}),origRefreshEffects=Token.prototype._refreshEffects;Token.prototype._refreshEffects=function(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];origRefreshEffects.apply(this,b),this&&updateEffectScales(this);};const countEffects=a=>{if(!a)return 0;let b=a.document.effects?.length||0;return a.actor?.temporaryEffects?.forEach(a=>{a.getFlag("core","overlay")||b++;}),b},sortIcons=(a,b)=>a.position.x===b.position.x?a.position.y-b.position.y:a.position.x-b.position.x,updateIconSize=(a,b)=>{a.width=b,a.height=b;},updateIconPosition=(a,b,c,d,e)=>{const f=b%c*a.width;let g=Math.floor(b/c)*a.width;e&&(g=-1*g-a.width),a.position.x=d?f:g,a.position.y=d?g:f;},drawBG=(a,b)=>{b.drawRoundedRect(a.position.x,a.position.y,a.width,a.width,2);},updateEffectScales=a=>{const b=countEffects(a);if(0<b&&0<a.effects.children.length){const c=effectIconsLayoutSetting.get(),d="above"===c,e=d||"horizontal"===c,f=Math.ceil(effectIconsPerRowSetting.get()*(e?a.document.width:a.document.height)),g=(e?a.bounds.width:a.bounds.height)/f,h=a.effects.children[0];if(!(h instanceof PIXI.Graphics))return void module.logger.warn("token.effects.children[0] was not a PIXI.Graphics instance",h);h.clear().beginFill(0,.6).lineStyle(1,0);const i=a.effects.children.slice(1,1+b);i.sort(sortIcons),i.forEach((a,b)=>a instanceof PIXI.Sprite?void(updateIconSize(a,g),updateIconPosition(a,b,f,e,d),drawBG(a,h)):void module.logger.warn(`token.effects.children[${b+1}] was not a PIXI.Sprite instance`,a));}};

const CSS_STATUS_SLECTOR_SCALE=module.cssPrefix.child("status-selector-scale"),refresh$3=()=>{enableStatusSelectorScale.get()?document.body.classList.add(CSS_STATUS_SLECTOR_SCALE):document.body.classList.remove(CSS_STATUS_SLECTOR_SCALE);},enableStatusSelectorScale=module.settings.register("enableStatusSelectorScale",Boolean,!0,{hasHint:!0,onChange:refresh$3});Hooks.on("init",refresh$3);

const CSS_CENTER_HUD_BUTTONS=module.cssPrefix.child("center-hud-buttons"),refresh$2=()=>{centerHUDButtonsSetting.get()?document.body.classList.add(CSS_CENTER_HUD_BUTTONS):document.body.classList.remove(CSS_CENTER_HUD_BUTTONS);},centerHUDButtonsSetting=module.settings.register("centerHUDButtons",Boolean,!0,{onChange:refresh$2});Hooks.on("init",refresh$2);

const CSS_HUD_BUTTON_BG=module.cssPrefix.child("darken-hud-button-bg"),refresh$1=()=>{darkenHUDSetting.get()?document.body.classList.add(CSS_HUD_BUTTON_BG):document.body.classList.remove(CSS_HUD_BUTTON_BG);},darkenHUDSetting=module.settings.register("darkenHUDButtonBG",Boolean,!0,{hasHint:!0,onChange:refresh$1});Hooks.on("init",refresh$1);

const refresh=foundry.utils.debounce(()=>{game.canvas.hud?.token.rendered&&game.canvas.hud?.token.setPosition(),game.canvas.hud?.tile.rendered&&game.canvas.hud?.tile.setPosition(),game.canvas.hud?.drawing.rendered&&game.canvas.hud?.drawing.setPosition();},100),enableStaticSizedHUDSetting=module.settings.register("enableStaticSizedHUD",Boolean,!0,{hasHint:!0,onChange:refresh}),enableOneXOneHUDSetting=module.settings.register("enableOneXOneHUD",Boolean,!0,{hasHint:!0,onChange:refresh}),hudButtonScaleSetting=module.settings.register("hudButtonScale",Number,1,{hasHint:!0,onChange:refresh,range:{min:.25,max:5,step:.25}}),HUD_COLUMN_WIDTH=70,BASE_TILE_SIZE=100,HALF_BASE_TILE_SIZE=BASE_TILE_SIZE/2,calculateScale=(a,b,c)=>{let d;return d=b?a/(game.canvas.stage?.scale?.x||1):a*(c/BASE_TILE_SIZE),d},getPositionCSS=(a,b,c,d,e)=>{const f={width:b*BASE_TILE_SIZE,height:c*BASE_TILE_SIZE,left:a.x-b*d*HALF_BASE_TILE_SIZE,top:a.y-c*d*HALF_BASE_TILE_SIZE};return e&&(f.width+=2*HUD_COLUMN_WIDTH,f.left-=HUD_COLUMN_WIDTH*d),1!==d&&(f.transform=`scale(${d})`),f},extendSetPosition=(a,b)=>{const c=a.prototype.setPosition;a.prototype.setPosition=function(){const a=hudButtonScaleSetting.get(),d=enableStaticSizedHUDSetting.get(),e=enableOneXOneHUDSetting.get();if(!e&&!d&&1===a||!this.object){for(var f=arguments.length,g=Array(f),h=0;h<f;h++)g[h]=arguments[h];return void c.apply(this,g)}const i=game.canvas.dimensions?.size||BASE_TILE_SIZE,{width:j,height:k}=this.object.bounds,l=calculateScale(a,d,i),m=e?a:j/i,n=e?a:k/i;this.element.css(getPositionCSS(this.object.center,m,n,l,b));};};Hooks.on("init",()=>{extendSetPosition(TokenHUD),extendSetPosition(TileHUD,!0),extendSetPosition(DrawingHUD,!0);}),Hooks.on("canvasPan",refresh);
