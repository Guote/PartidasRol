{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/pdfoundry/Api.ts","src/pdfoundry/Main.ts","src/pdfoundry/Settings.ts","src/pdfoundry/Setup.ts","src/pdfoundry/Util.ts","src/pdfoundry/app/ActorSheetSelect.ts","src/pdfoundry/app/PDFActorDataBrowser.ts","src/pdfoundry/app/PDFActorSheetAdapter.ts","src/pdfoundry/app/PDFConfig.ts","src/pdfoundry/app/PlayerSelect.ts","src/pdfoundry/app/SelectApp.ts","src/pdfoundry/cache/CacheError.ts","src/pdfoundry/cache/CacheHelper.ts","src/pdfoundry/cache/PDFCache.ts","src/pdfoundry/commands/ChatCommand.ts","src/pdfoundry/commands/FixMissingTypes.ts","src/pdfoundry/commands/PurgeCache.ts","src/pdfoundry/common/Whitelist.ts","src/pdfoundry/common/helpers/events.ts","src/pdfoundry/common/helpers/header.ts","src/pdfoundry/common/types/PDFType.ts","src/pdfoundry/enricher/HTMLEnricher.ts","src/pdfoundry/enricher/TinyMCEPlugin.ts","src/pdfoundry/migrate/MigrateLegacy.ts","src/pdfoundry/socket/Socket.ts","src/pdfoundry/socket/events/PreloadEvent.ts","src/pdfoundry/socket/events/SetViewEvent.ts","src/pdfoundry/socket/events/SocketEvent.ts","src/pdfoundry/viewer/ActorViewer.ts","src/pdfoundry/viewer/BaseViewer.ts","src/pdfoundry/viewer/FillableViewer.ts","src/pdfoundry/viewer/StaticViewer.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The PDFoundry API.\n *\n * You can access the API with `ui.PDFoundry`.\n * @moduledefinition API\n */\n\nimport {\n    canOpenPDF,\n    deletePDFData,\n    getAbsoluteURL,\n    getPDFData,\n    getRoutePrefix,\n    getUserIdsExceptMe,\n    isEntityPDF,\n    setPDFData,\n    validateAbsoluteURL,\n} from './Util';\nimport StaticViewer from './viewer/StaticViewer';\nimport { PDFData } from './common/types/PDFData';\nimport Settings from './Settings';\nimport PDFCache from './cache/PDFCache';\nimport BaseViewer from './viewer/BaseViewer';\nimport { PDFType } from './common/types/PDFType';\nimport FillableViewer from './viewer/FillableViewer';\nimport { Collection } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/utils/module.mjs';\n\n// noinspection JSUnusedGlobalSymbols\n\n/**\n * A function to passed to {@link Api.findPDFData} to find user specified PDF data.\n * @module API\n */\nexport type PDFValidator = (data: PDFData) => boolean;\n\n/**\n * Open the specified PDF in a provided viewer\n * @param viewer\n * @param url\n * @param page\n * @param cache\n * @internal\n */\nexport async function _handleOpen(viewer: BaseViewer, url: string, page: number | undefined, cache: boolean) {\n    if (cache) {\n        const cachedBytes = await PDFCache.getCache(url);\n        // If we have a cache hit open the cached data\n        if (cachedBytes) {\n            await viewer.open(cachedBytes, page);\n        } else {\n            // Otherwise we should open it by url\n            await viewer.open(url, page);\n            // And when the download is complete set the cache\n            viewer.download().then((bytes) => {\n                PDFCache.setCache(url, bytes);\n            });\n        }\n    } else {\n        await viewer.open(url, page);\n    }\n}\n\n/**\n * Options passed to the {@link Api.openPDF} function.\n * @module API\n */\nexport interface PDFOpenOptions {\n    /**\n     * The page to open to. If not specified, PDFoundry will attempt to open the\n     *  last page the user was viewing.\n     */\n    page?: number;\n    /**\n     * If you're opening a fillable pdf, you must specify an entity for data storage.\n     */\n    entity?: JournalEntry;\n}\n\n/**\n * A definition for a viewer theme.\n * @module API\n */\nexport interface ViewerTheme {\n    /**\n     *\n     */\n    id: string;\n    name: string;\n    filePath: string;\n}\n\n/**\n * The PDFoundry API\n *\n * You can access the API with `ui.PDFoundry`.\n * @module API\n */\nexport default class Api {\n    /**\n     * Enable additional debug information for the specified category.\n     * @category Debug\n     */\n    public static DEBUG = {\n        // TODO\n        /**\n         * When set to true, enables the logging event names and arguments to console.\n         */\n        EVENTS: false,\n    };\n\n    // <editor-fold desc=\"Static Methods\">\n\n    private static _availableThemes: { [id: string]: ViewerTheme } = {};\n\n    /**\n     * Get a full theme definition by id.\n     * @param id The unique id of the theme to lookup.\n     */\n    public static getTheme(id: string): ViewerTheme | null {\n        return Api._availableThemes[id] ?? null;\n    }\n\n    /**\n     * Get the currently enabled theme id.\n     */\n    public static get activeTheme(): ViewerTheme {\n        const id = Settings.get(Settings.SETTINGS_KEY.VIEWER_THEME) as string;\n        return Api._availableThemes[id];\n    }\n\n    /**\n     * Get a map of themes available for use.\n     */\n    public static get availableThemes() {\n        const themesMap = {};\n        for (const key of Object.keys(Api._availableThemes)) {\n            themesMap[key] = Api._availableThemes[key].name;\n        }\n        return themesMap;\n    }\n\n    /**\n     * Register a theme for use with PDFoundry. You must register a theme before `ready`. Do so in `setup`.\n     * @param id The unique id of the theme. Providing an already existing id will over-write the existing theme.\n     * @param name The user-facing display name of the theme.\n     * @param filePath The relative path of the theme css file\n     */\n    public static registerTheme(id: string, name: string, filePath: string) {\n        if (!filePath.endsWith('.css')) {\n            throw new Error('You may only register css files as themes.');\n        }\n\n        if (Api._availableThemes.hasOwnProperty(id)) {\n            console.warn(`PDFoundry theme with id of \"${id}\" is already registered!`);\n        }\n\n        this._availableThemes[id] = {\n            id,\n            name,\n            filePath,\n        };\n    }\n\n    // </editor-fold>\n\n    /**\n     * A reference to the unclassified utility functions.\n     * @category Utility\n     */\n    public static get Utilities() {\n        return {\n            getRoutePrefix,\n            getAbsoluteURL,\n            validateAbsoluteURL,\n            isEntityPDF,\n            getPDFData,\n            setPDFData,\n            deletePDFData,\n            canOpenPDF,\n            getUserIdsExceptMe,\n        };\n    }\n\n    // <editor-fold desc=\"GetPDFData Methods\">\n\n    /**\n     * Find a PDF containing journal entry from the journals directory using a specified comparer.\n     * @param comparer The function to compare PDF data with.\n     * @param allowInvisible If true, PDFs hidden from the active user will be returned.\n     * @category PDFData\n     */\n    public static findPDFEntity(comparer: PDFValidator, allowInvisible: boolean = true): ReturnType<Collection<JournalEntry>['find']> {\n        return game!.journal!.find((journalEntry: JournalEntry) => {\n            if (!isEntityPDF(journalEntry)) {\n                return false;\n            }\n\n            const pdfData = getPDFData(journalEntry);\n            if (pdfData === undefined) {\n                return false;\n            }\n\n            return (journalEntry.visible || allowInvisible) && comparer(pdfData);\n        });\n    }\n\n    /**\n     * Helper method. Alias for {@link Api.findPDFData} with a comparer that searches by PDF Code.\n     * @param code Which code to search for a PDF with.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFDataByCode(code: string, allowInvisible: boolean = true): PDFData | undefined {\n        return Api.findPDFData((data: PDFData) => {\n            return data.code === code;\n        }, allowInvisible);\n    }\n\n    /**\n     * Helper method. Alias for {@link Api.findPDFData} with a comparer that searches by PDF Name.\n     * @param name Which name to search for a PDF with.\n     * @param caseInsensitive If a case insensitive search should be done.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFDataByName(name: string, caseInsensitive: boolean = true, allowInvisible: boolean = true): PDFData | undefined {\n        if (caseInsensitive) {\n            return Api.findPDFData((data) => {\n                return data.name.toLowerCase() === name.toLowerCase();\n            }, allowInvisible);\n        } else {\n            return Api.findPDFData((data) => {\n                return data.name === name;\n            }, allowInvisible);\n        }\n    }\n\n    /**\n     * Finds a PDF entity created by the user and constructs a {@link PDFData} object of the resulting PDF's data.\n     * @param comparer A comparison function that will be used.\n     * @param allowInvisible See allowVisible on {@link findPDFEntity}\n     * @category PDFData\n     */\n    public static findPDFData(comparer: PDFValidator, allowInvisible: boolean = true): PDFData | undefined {\n        const pdf = this.findPDFEntity(comparer, allowInvisible);\n        if (pdf === null) {\n            return undefined;\n        }\n\n        return getPDFData(pdf);\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"OpenPDF Methods\">\n\n    /**\n     * Open the PDF with the provided code to the specified page.\n     * Helper for {@link findPDFDataByCode} then {@link openPDF}.\n     * @category Open\n     */\n    public static async openPDFByCode(code: string, options?: PDFOpenOptions): Promise<BaseViewer> {\n        const pdf = this.findPDFDataByCode(code);\n\n        if (pdf === undefined) {\n            const error = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithCode');\n\n            ui.notifications.error(error);\n\n            return Promise.reject(error);\n        }\n\n        return this.openPDF(pdf, options);\n    }\n\n    /**\n     * Open the PDF with the provided code to the specified page.\n     * Helper for {@link findPDFDataByCode} then {@link openPDF}.\n     * @category Open\n     */\n    public static async openPDFByName(name: string, options?: PDFOpenOptions): Promise<BaseViewer> {\n        const pdf = this.findPDFDataByName(name);\n\n        if (pdf === undefined) {\n            const message = game.i18n.localize('PDFOUNDRY.ERROR.NoPDFWithName');\n            const error = new Error(message);\n\n            ui.notifications.error(error.message);\n\n            return Promise.reject(error);\n        }\n\n        return this.openPDF(pdf, options);\n    }\n\n    /**\n     * Open the provided {@link PDFData} to the specified page.\n     * @param pdf The PDF to open. See {@link Api.findPDFData}.\n     * @param options The specified options for PDFs.\n     * @category Open\n     */\n    public static async openPDF(pdf: PDFData, options?: PDFOpenOptions): Promise<BaseViewer> {\n        if (options === undefined) {\n            options = {};\n        }\n\n        let { url, offset, cache } = pdf;\n\n        if (typeof offset === 'string') {\n            if (offset === '') {\n                offset = 0;\n            } else {\n                offset = parseInt(offset);\n            }\n        } else if (offset === null) {\n            offset = 0;\n        }\n\n        if (!validateAbsoluteURL(url)) {\n            url = getAbsoluteURL(url);\n        }\n\n        if (options.page !== undefined) {\n            options.page = options.page + offset;\n        }\n\n        let viewer: BaseViewer;\n\n        switch (pdf.type) {\n            case PDFType.Static:\n                viewer = new StaticViewer(pdf);\n                viewer.render(true);\n\n                await _handleOpen(viewer, url, options.page, cache);\n                break;\n            case PDFType.Fillable:\n                if (!(options.entity instanceof JournalEntry)) {\n                    throw new Error('Provided entity was not a journal entry.');\n                }\n\n                viewer = new FillableViewer(options.entity, pdf);\n                viewer.render(true);\n\n                await _handleOpen(viewer, url, options.page, cache);\n                break;\n            case PDFType.Actor:\n                throw new Error('Actor sheets can only be opened through the actor.sheet accessor.');\n        }\n        return viewer;\n    }\n\n    /**\n     * Open a URL as a static PDF. For form fillable PDFs you muse use {@link Api.openPDF}\n     * @param url The URL to open (must be absolute).\n     * @param page Which page to open to. Must be >= 1.\n     * @param cache If URL based caching should be used.\n     * @category Open\n     */\n    public static async openURL(url: string, page: number = 1, cache: boolean = true): Promise<BaseViewer> {\n        if (isNaN(page) || page <= 0) {\n            throw new Error(`Page must be > 0, but ${page} was given.`);\n        }\n\n        if (!validateAbsoluteURL(url)) {\n            url = getAbsoluteURL(url);\n        }\n\n        const viewer = new StaticViewer();\n        viewer.render(true);\n\n        await _handleOpen(viewer, url, page, cache);\n\n        return viewer;\n    }\n\n    /**\n     * Shows the user manual to the active user.\n     * @category Utility\n     */\n    public static async showHelp(): Promise<BaseViewer> {\n        await Settings.set(Settings.SETTINGS_KEY.HELP_SEEN, true);\n\n        const lang = game.i18n.lang;\n        let manualPath = getAbsoluteURL(`${Settings.PATH_ASSETS}/manual/${lang}/manual.pdf`);\n        // @ts-ignore\n        const manualExists = await srcExists(manualPath);\n\n        if (!manualExists) {\n            manualPath = getAbsoluteURL(`${Settings.PATH_ASSETS}/manual/en/manual.pdf`);\n        }\n\n        const pdfData: PDFData = {\n            name: game.i18n.localize('PDFOUNDRY.MANUAL.Name'),\n            type: PDFType.Static,\n            code: '',\n            offset: 0,\n            url: manualPath,\n            cache: false,\n        };\n\n        return Api.openPDF(pdfData);\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Setup from './Setup';\n\nSetup.run();\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from './Api';\n\n/**\n * Internal settings and helper methods for PDFoundry.\n * @internal\n */\nexport default class Settings {\n    public static readonly MODULE_NAME: string = 'pdfoundry';\n\n    public static get PATH_MODULE() {\n        return `modules/${Settings.MODULE_NAME}`;\n    }\n    public static get PATH_ASSETS() {\n        return `${Settings.PATH_MODULE}/assets`;\n    }\n    public static get PATH_LOCALE() {\n        return `${Settings.PATH_MODULE}/locale`;\n    }\n    public static get PATH_TEMPLATES() {\n        return `${Settings.PATH_MODULE}/templates`;\n    }\n    public static get PATH_PDFJS() {\n        return `${Settings.PATH_MODULE}/pdfjs`;\n    }\n\n    public static get SOCKET_NAME() {\n        return `module.${Settings.MODULE_NAME}`;\n    }\n\n    public static readonly CSS_CLASS = 'pdf-app';\n\n    public static readonly MENU_KEY = 'PDFoundrySettings';\n\n    public static readonly SETTINGS_KEY = {\n        EXISTING_VIEWER: 'ShowInExistingViewer',\n        CACHE_SIZE: 'CacheSize',\n        VIEWER_THEME: 'ViewerTheme',\n        HELP_SEEN: 'HelpSeen',\n        DATA_VERSION: 'DataVersion',\n    };\n    public static readonly FLAGS_KEY = {\n        // PDF Data\n        PDF_DATA: 'PDFData',\n        // Actor Sheets\n        FORM_DATA: 'FormData',\n        SHEET_ID: 'ActorSheet',\n        // Canvas Notes\n        PAGE_NUMBER: 'PageNumber',\n    };\n\n    public static initialize() {\n        Settings.register(Settings.SETTINGS_KEY.CACHE_SIZE, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.CacheSizeHint'),\n            scope: 'user',\n            type: Number,\n            default: 256,\n            config: true,\n            onChange: async (mb) => {\n                if (Settings.get(Settings.SETTINGS_KEY.CACHE_SIZE) === mb) {\n                    return;\n                }\n\n                mb = Math.round(mb);\n                mb = Math.max(mb, 64);\n                mb = Math.min(mb, 1024);\n                await Settings.set(Settings.SETTINGS_KEY.CACHE_SIZE, mb);\n            },\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.EXISTING_VIEWER, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.ShowInExistingViewerHint'),\n            scope: 'user',\n            type: Boolean,\n            default: true,\n            config: true,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.VIEWER_THEME, {\n            name: game.i18n.localize('PDFOUNDRY.SETTINGS.ViewerThemeName'),\n            hint: game.i18n.localize('PDFOUNDRY.SETTINGS.ViewerThemeHint'),\n            scope: 'user',\n            type: String,\n            default: 'fantasy',\n            choices: Api.availableThemes,\n            config: true,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.HELP_SEEN, {\n            scope: 'user',\n            type: Boolean,\n            default: false,\n            config: false,\n        });\n\n        Settings.register(Settings.SETTINGS_KEY.DATA_VERSION, {\n            scope: 'world',\n            type: String,\n            default: undefined,\n            config: false,\n        });\n    }\n\n    /**\n     * Wrapper around game.settings.register. Ensures scope is correct.\n     * @param key\n     * @param data\n     * @internal\n     */\n    public static register(key: string, data: any) {\n        game.settings.register(Settings.MODULE_NAME, key, data);\n    }\n\n    /**\n     * Wrapper around game.settings.get. Ensures scope is correct.\n     * @param key\n     * @internal\n     */\n    public static get(key: string) {\n        return game.settings.get(Settings.MODULE_NAME, key);\n    }\n\n    /**\n     * Wrapper around game.settings.set. Ensures scope is correct.\n     * @param key\n     * @param value\n     * @internal\n     */\n    public static async set(key: string, value: any) {\n        return game.settings.set(Settings.MODULE_NAME, key, value);\n    }\n}\n","/*\n * Copyright 2022 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getAbsoluteURL, getPDFData, isEntityPDF } from './Util';\nimport PreloadEvent from './socket/events/PreloadEvent';\nimport { Socket } from './socket/Socket';\nimport Settings from './Settings';\nimport PDFCache from './cache/PDFCache';\nimport Api, { ViewerTheme } from './Api';\nimport HTMLEnricher from './enricher/HTMLEnricher';\nimport TinyMCEPlugin from './enricher/TinyMCEPlugin';\nimport PDFActorSheetAdapter from './app/PDFActorSheetAdapter';\nimport { PDFType } from './common/types/PDFType';\nimport { PDFConfig } from './app/PDFConfig';\nimport FixMissingTypes from './commands/FixMissingTypes';\nimport PurgeCache from './commands/PurgeCache';\nimport { legacyMigrationRequired, migrateLegacy } from './migrate/MigrateLegacy';\n\n/**\n * A collection of methods used for setting up the API & system state.\n * @internal\n */\nexport default class Setup {\n    /**\n     * Run setup tasks.\n     */\n    public static run() {\n        if (hasProperty(ui, 'PDFoundry')) {\n            Hooks.once('init', async () => {\n                let d = new Dialog({\n                    title: 'PDFoundry: Error',\n                    content: [\n                        '<div style=\"text-align: justify; margin: 0; padding: 0;\">',\n                        '<h1 style=\"color: red\">PDFoundry Is Already Installed</h1>',\n                        '<p style=\"font-weight: bold\">You have enabled the module version of PDFoundry, but the system you ' +\n                            'are using already has PDFoundry installed.</p>',\n                        '<p>1. If you installed PDFoundry using a nightly build, uninstall and reinstall your system with the ' +\n                            '\"Game Systems\" menu in Foundry VTT setup, or simply update the system if an update is available. ' +\n                            'Your world data is safe either way.</p>',\n                        '<p>2. If the system you are using comes with PDFoundry already installed - you must use that version of ' +\n                            'PDFoundry by disabling the module version.</p>',\n                        '<p style=\"font-weight: bold\">The module version of PDFoundry will not function.</p>',\n                        '</div>',\n                    ].join(''),\n                    default: '',\n                    buttons: {},\n                });\n                d.render(true);\n            });\n            return;\n        }\n\n        // Register the PDFoundry APi on the UI\n        ui['PDFoundry'] = Api;\n\n        // Register the PDF sheet with the class picker\n        Setup.setupSheets();\n\n        // Setup tasks requiring that FVTT is loaded\n        Hooks.once('ready', Setup.lateRun);\n\n        Hooks.on('renderJournalDirectory', Setup.createJournalButton);\n        Hooks.on('renderJournalDirectory', Setup.hookListItems);\n\n        // getItemDirectoryEntryContext - Setup context menu for 'Open PDF' links\n        Hooks.on('getJournalDirectoryEntryContext', Setup.getJournalContextOptions);\n\n        // Cogwheel settings menu\n        Hooks.on('renderSettings', Setup.onRenderSettings);\n\n        // Load base themes\n        Setup.registerThemes();\n\n        // Patch the TextEnricher with a proxy\n        HTMLEnricher.patchEnrich();\n        // Bind click handlers to renderers\n        Hooks.on('renderApplication', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderItemSheet', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderActorSheet', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n        Hooks.on('renderChatMessage', (app: Application, html: JQuery) => HTMLEnricher.bindRichTextLinks(html));\n    }\n\n    private static readonly COMMANDS = [new FixMissingTypes(), new PurgeCache()];\n\n    /**\n     * Late setup tasks happen when the system is loaded\n     */\n    public static lateRun() {\n        // Register socket event handlers\n        Socket.initialize();\n\n        // Chat command processing\n        Hooks.on('chatMessage', Setup.onChatMessage);\n\n        // Canvas notes processing\n        Hooks.on('renderNoteConfig', Setup.onNoteConfig);\n        Hooks.on('hoverNote', Setup.onNoteHover);\n\n        // Register TinyMCE drag + drop events\n        TinyMCEPlugin.Register();\n\n        return new Promise(async () => {\n            // Initialize the settings\n            Settings.initialize();\n            await PDFCache.initialize();\n\n            if (legacyMigrationRequired()) {\n                migrateLegacy().then(() => {\n                    Settings.set(Settings.SETTINGS_KEY.DATA_VERSION, 'v0.6.0');\n                });\n            }\n\n            // PDFoundry is ready\n            // Setup.userLogin();\n        });\n    }\n\n    /**\n     * Register the PDF sheet and unregister invalid sheet types from it.\n     */\n    public static setupSheets() {\n        // Register actor \"sheet\"\n        Actors.registerSheet(Settings.MODULE_NAME, PDFActorSheetAdapter);\n    }\n\n    /**\n     * Get additional context menu icons for PDF items\n     * @param html\n     * @param options\n     */\n    public static getJournalContextOptions(html: JQuery, options: any[]) {\n        const getJournalEntryFromLi = (html: JQuery): JournalEntry => {\n            const id = html.data('document-id');\n            return game!.journal!.get(id)!;\n        };\n\n        const shouldAdd = (entityHtml: JQuery) => {\n            const journalEntry = getJournalEntryFromLi(entityHtml);\n            return isEntityPDF(journalEntry) && getPDFData(journalEntry)?.type !== PDFType.Actor;\n        };\n\n        if (game!.user!.isGM) {\n            options.unshift({\n                name: game.i18n.localize('PDFOUNDRY.CONTEXT.PreloadPDF'),\n                icon: '<i class=\"fas fa-download fa-fw\"></i>',\n                condition: shouldAdd,\n                callback: (entityHtml: JQuery) => {\n                    const journalEntry = getJournalEntryFromLi(entityHtml);\n                    const pdf = getPDFData(journalEntry);\n\n                    if (pdf === undefined) {\n                        return;\n                    }\n\n                    const { url } = pdf;\n                    const event = new PreloadEvent(null, getAbsoluteURL(url));\n                    event.emit();\n\n                    PDFCache.preload(url);\n                },\n            });\n        }\n\n        options.unshift({\n            name: game.i18n.localize('PDFOUNDRY.CONTEXT.OpenPDF'),\n            icon: '<i class=\"far fa-file-pdf\"></i>',\n            condition: shouldAdd,\n            callback: (entityHtml: JQuery) => {\n                const journalEntry = getJournalEntryFromLi(entityHtml);\n                const pdf = getPDFData(journalEntry);\n\n                if (pdf === undefined) {\n                    return;\n                }\n\n                if (pdf.type === PDFType.Actor) {\n                    throw new Error(`Unhandled PDF context type ${pdf.type}`);\n                } else {\n                    Api.openPDF(pdf, {\n                        entity: journalEntry,\n                    });\n                }\n            },\n        });\n    }\n\n    private static userLogin() {\n        if (!game!.user!.isGM) {\n            return;\n        }\n\n        let viewed;\n        try {\n            viewed = Settings.get(Settings.SETTINGS_KEY.HELP_SEEN);\n        } catch (error) {\n            viewed = false;\n        } finally {\n            if (!viewed) {\n                Api.showHelp();\n            }\n        }\n    }\n\n    private static onChatMessage(app, content: string, options) {\n        content = content.toLocaleLowerCase();\n\n        for (let command of Setup.COMMANDS) {\n            if (command.execute(content)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Hook handler for rendering the settings tab\n     */\n    public static onRenderSettings(settings: any, html: JQuery, data: any) {\n        // const icon = '<i class=\"far fa-file-pdf\"></i>';\n        // const button = $(`<button>${icon} ${game.i18n.localize('PDFOUNDRY.SETTINGS.OpenHelp')}</button>`);\n        // button.on('click', Api.showHelp);\n        //\n        // html.find('#settings-documentation').append(button);\n    }\n\n    private static async createPDF() {\n        const journalEntry = (await JournalEntry.create({\n            name: game.i18n.localize('PDFOUNDRY.MISC.NewPDF'),\n            [`flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}.type`]: PDFType.Static,\n        })) as JournalEntry;\n\n        new PDFConfig(journalEntry).render(true);\n    }\n\n    private static createJournalButton(app: Application, html: JQuery) {\n        if (!game!.user!.isGM) {\n            return;\n        }\n\n        const button = $(`<button class=\"create-pdf\"><i class=\"fas fa-file-pdf\"></i> ${game.i18n.localize('PDFOUNDRY.MISC.CreatePDF')}</button>`);\n        button.on('click', () => {\n            Setup.createPDF();\n        });\n\n        let footer = html.find('.directory-footer');\n        if (footer.length === 0) {\n            footer = $(`<footer class=\"directory-footer\"></footer>`);\n            html.append(footer);\n        }\n        footer.append(button);\n    }\n\n    private static hookListItems(app: Application, html: JQuery) {\n        const lis = html.find('li.journalentry');\n\n        for (const li of lis) {\n            const target = $(li);\n            const id = target.data('document-id');\n            const journalEntry = game!.journal!.get(id)!;\n\n            if (isEntityPDF(journalEntry)) {\n                target.find('h4').on('click', (event) => {\n                    event.stopImmediatePropagation();\n                    if (journalEntry.isOwner) {\n                        Setup.onClickPDFName(journalEntry);\n                    } else {\n                        Setup.onClickPDFThumbnail(journalEntry);\n                    }\n                });\n\n                const pdfData = getPDFData(journalEntry);\n                if (pdfData) {\n                    const thumbnail = $(`<img class=\"pdf-thumbnail\" src=\"${Settings.PATH_ASSETS}/pdf_icon.svg\" alt=\"PDF Icon\">`);\n                    target.append(thumbnail);\n\n                    switch (pdfData.type) {\n                        case PDFType.Static:\n                        case PDFType.Fillable:\n                            target.find('img').on('click', (event) => {\n                                event.stopImmediatePropagation();\n                                Setup.onClickPDFThumbnail(journalEntry);\n                            });\n                            break;\n                        case PDFType.Actor:\n                            // Actors can't be opened by link\n                            thumbnail.css('filter', 'grayscale(100%)');\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    private static onClickPDFName(journalEntry: JournalEntry) {\n        new PDFConfig(journalEntry).render(true);\n    }\n\n    private static onClickPDFThumbnail(journalEntry: JournalEntry) {\n        const pdfData = getPDFData(journalEntry);\n        if (pdfData) {\n            switch (pdfData.type) {\n                case PDFType.Static:\n                    Api.openPDF(pdfData);\n                    break;\n                case PDFType.Fillable:\n                    Api.openPDF(pdfData, {\n                        entity: journalEntry,\n                    });\n                    break;\n                case PDFType.Actor:\n                    // Pass - no functionality\n                    break;\n            }\n        }\n    }\n\n    private static onNoteConfig(app: NoteConfig, html: JQuery, data: any) {\n        const journalId = data.data.entryId;\n        const journal = game!.journal!.get(journalId)!;\n        if (isEntityPDF(journal)) {\n            const container = $(`<div class=\"form-group\"></div>`);\n            const label = $(`<label>${game.i18n.localize('PDFOUNDRY.COMMON.PageNumber')}</label>`);\n\n            let pageNumber = data.data['flags']?.[Settings.MODULE_NAME]?.[Settings.FLAGS_KEY.PAGE_NUMBER];\n            if (pageNumber === undefined) {\n                pageNumber = '';\n            }\n\n            const subContainer = $(`<div class=\"form-fields\"></div>`);\n\n            const input = $(\n                `<input type=\"number\" name=\"flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PAGE_NUMBER}\" value=\"${pageNumber}\" data-dtype=\"String\">`,\n            );\n\n            subContainer.append(input);\n\n            container.append(label);\n            container.append(subContainer);\n\n            html.find('button[type=submit]').before(container);\n        }\n    }\n\n    private static onNoteHover(note: Note, enter: boolean) {\n        if (!enter) {\n            return;\n        }\n\n        const journal = note.entry as JournalEntry;\n        const pdf = getPDFData(journal);\n        if (isEntityPDF(journal) && pdf) {\n            note!.mouseInteractionManager!.callbacks['clickLeft2'] = () => {\n                let pageText: string | number | undefined = (note.data.flags?.[Settings.MODULE_NAME] as string | number | undefined)?.[\n                    Settings.FLAGS_KEY.PAGE_NUMBER\n                ];\n                let pageNumber = 0;\n\n                if (typeof pageText === 'string') {\n                    try {\n                        pageNumber = parseInt(pageText);\n                    } catch (e) {\n                        pageNumber = 0;\n                    }\n                } else if (typeof pageText === 'number') {\n                    pageNumber = pageText;\n                }\n\n                if (pageNumber === 0) {\n                    Api.openPDF(pdf);\n                } else {\n                    Api.openPDF(pdf, {\n                        page: pageNumber,\n                    });\n                }\n            };\n        }\n    }\n\n    private static registerThemes() {\n        const themes: ViewerTheme[] = [\n            {\n                id: 'fantasy',\n                name: 'Fantasy (Default)',\n                filePath: `${Settings.PATH_MODULE}/themes/fantasy.css`,\n            },\n            {\n                id: 'dark',\n                name: 'Dark',\n                filePath: `${Settings.PATH_MODULE}/themes/default-dark.css`,\n            },\n            {\n                id: 'light',\n                name: 'Light',\n                filePath: `${Settings.PATH_MODULE}/themes/default-light.css`,\n            },\n            {\n                id: 'net-runner-dark',\n                name: 'Net Runner',\n                filePath: `${Settings.PATH_MODULE}/themes/net-runner.css`,\n            },\n\n            {\n                id: 'gay-pride-light',\n                name: 'Gay Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/gay-pride-light.css`,\n            },\n            {\n                id: 'gay-pride-dark',\n                name: 'Gay Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/gay-pride-dark.css`,\n            },\n            {\n                id: 'trans-light',\n                name: 'Trans Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/trans-pride-light.css`,\n            },\n            {\n                id: 'trans-dark',\n                name: 'Trans Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/trans-pride-dark.css`,\n            },\n            {\n                id: 'nonbinary-light',\n                name: 'Non-binary Pride (Light)',\n                filePath: `${Settings.PATH_MODULE}/themes/nonbinary-pride-light.css`,\n            },\n            {\n                id: 'nonbinary-dark',\n                name: 'Non-binary Pride (Dark)',\n                filePath: `${Settings.PATH_MODULE}/themes/nonbinary-pride-dark.css`,\n            },\n        ];\n\n        for (const theme of themes) {\n            Api.registerTheme(theme.id, theme.name, theme.filePath);\n        }\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of utilities that are used internally or made to be used externally by you.\n *\n * You can access these utilities with `ui.PDFoundry.Utilities`.\n * @moduledefinition Utilities\n */\n\nimport { PDFData, PDFDataDelete, PDFDataUpdate } from './common/types/PDFData';\nimport Settings from './Settings';\nimport { PDFType } from './common/types/PDFType';\nimport { DOMAIN_WHITELIST } from './common/Whitelist';\nimport { Document } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/module.mjs';\nimport { AnyDocumentData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/data.mjs';\n\n// *************\n// URL HELPERS\n// *************\n// <editor-fold desc='URL Helpers\">\n\n/**\n * Gets the correct route prefix used to support servers using a route prefix.\n * Appended to all window.location paths.\n * @module Utilities\n */\nexport function getRoutePrefix(): string {\n    let prefixArr = window.location.pathname.split('/');\n    prefixArr.pop(); // don't want the 'game' at the end\n    return prefixArr.join('/');\n}\n\n/**\n * Convert a relative URL to a absolute URL by prepending the window origin to the relative URL.\n * If the URL is of a white listed domain, will simply return the provided URL.\n * @param dataUrl A url to be validated.\n * @see {@link DOMAIN_WHITELIST}\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getAbsoluteURL(dataUrl: string): string {\n    // Some domains are white listed, these should be considered absolute already\n    for (const domain of DOMAIN_WHITELIST) {\n        if (dataUrl.includes(domain)) {\n            return dataUrl;\n        }\n    }\n\n    return `${window.origin}${getRoutePrefix()}/${dataUrl}`;\n}\n\n/**\n * Returns true if the URL starts with the origin or the domain is one of the\n *  white listed domains.\n * @param dataUrl A url to be validated.\n * @see {@link DOMAIN_WHITELIST}\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function validateAbsoluteURL(dataUrl: string): boolean {\n    // Some domains are white listed\n    for (const domain of DOMAIN_WHITELIST) {\n        if (dataUrl.includes(domain)) {\n            return true;\n        }\n    }\n\n    return dataUrl.startsWith(window.origin);\n}\n\n// </editor-fold>\n\n// *************\n// DATA HELPERS\n// *************\n// <editor-fold desc='Data Helpers\">\n\n/**\n * Returns true if the provided entity contains PDF data\n * @param entity The entity to check. Only JournalEntities are allowed to be PDFs natively.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function isEntityPDF(entity: Document<AnyDocumentData>): boolean {\n    return entity !== undefined && entity !== null && entity.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA) !== undefined;\n}\n\n/**\n * Pull relevant data from an journal entry, creating a {@link PDFData} object.\n * @param journalEntry The journal entry to pull data from.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getPDFData(journalEntry: JournalEntry | null | undefined): PDFData | undefined {\n    if (journalEntry === undefined || journalEntry === null) {\n        return undefined;\n    }\n\n    const pdfData = journalEntry.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA) as PDFData | undefined;\n    if (pdfData === undefined) {\n        return undefined;\n    }\n    pdfData.name = journalEntry.name!;\n    return pdfData;\n}\n\n/**\n * Set one or more {@link PDFData} attributes to the provided values. Makes no changes to fields that\n *  are not specified. If you wish to update the PDF name, use Entity.update as normal in Foundry.\n * @param journalEntry The PDF to update the data on.\n * @param pdfData A partial mapping of a {@link PDFData} object.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function setPDFData(journalEntry: JournalEntry, pdfData: Partial<PDFDataUpdate>) {\n    return journalEntry.setFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.PDF_DATA, pdfData);\n}\n\n/**\n * Deletes a key from the PDF data. Requires the value of the key to be set to null.\n * @param journalEntry The journal entry to delete the key from.\n * @param pdfData A mapping of {key: null} pairs to delete.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function deletePDFData(journalEntry: JournalEntry, pdfData: Partial<PDFDataDelete>) {\n    const update = {};\n\n    // TODO: Feature request to use Symbols to perform this type of operation\n    for (const key of Object.keys(pdfData)) {\n        update[`flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}.-=${key}`] = null;\n    }\n\n    return journalEntry.update(update);\n}\n\n/**\n * Returns true or false if all required data is set such that the PDF is possible to open.\n *  Does not guarantee any specific data for a type of open (e.g. opening as a fillable PDF)\n *  only that the static viewer is able to open the PDF.\n * @param pdfData The PDF data to check.\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function canOpenPDF(pdfData: PDFData) {\n    if (PDFType[pdfData.type] === undefined) {\n        return false;\n    }\n\n    return !(pdfData.url === undefined || pdfData.url === '');\n}\n\n// </editor-fold>\n\n// *************\n// USER HELPERS\n// *************\n// <editor-fold desc='User Helpers\">\n/**\n * Return all users ids except the current user\n * @see {@link Api.Utilities}\n * @module Utilities\n */\nexport function getUserIdsExceptMe() {\n    return game!\n        .users!.filter((user: User) => {\n            return user.id !== game.userId;\n        })\n        .map((user: User) => user.id);\n}\n\n// </editor-fold>\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFType } from '../common/types/PDFType';\nimport SelectApp, { SelectOption } from './SelectApp';\nimport { getPDFData, isEntityPDF } from '../Util';\n\n/**\n * Selects an actor sheet in a pop up window.\n * @internal\n */\nexport default class ActorSheetSelect extends SelectApp {\n    protected get selectTitle(): string {\n        return 'PDFOUNDRY.VIEWER.SelectSheet';\n    }\n\n    protected get selectId(): string {\n        return 'actor-sheet';\n    }\n\n    protected get selectLabel(): string {\n        return 'PDFOUNDRY.VIEWER.SelectSheet';\n    }\n\n    protected get selectOptions(): SelectOption[] {\n        const journals: JournalEntry[] = game!.journal!.filter((entry: JournalEntry) => {\n            return isEntityPDF(entry) && getPDFData(entry)?.type === PDFType.Actor;\n        });\n\n        return journals.map((entry) => {\n            return {\n                text: entry.data.name,\n                value: entry.id!,\n            };\n        });\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport { BUTTON_GITHUB, BUTTON_KOFI } from '../common/helpers/header';\n\n/**\n * Basic app to allow the user to see data keys for actor sheets\n * @internal\n */\nexport default class PDFActorDataBrowser extends Application {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n\n        options.template = `${Settings.PATH_TEMPLATES}/app/pdf-actor-data-browser.html`;\n        options.width = 600;\n        options.height = 400;\n        options.resizable = true;\n\n        return options;\n    }\n\n    private actor: Actor;\n    private timeout: any;\n\n    constructor(actor: Actor, options?: Application.Options) {\n        super(options);\n        this.actor = actor;\n    }\n\n    get title(): string {\n        return `${this.actor.name}`;\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        buttons.unshift({\n            class: 'pdf-sheet-refresh',\n            icon: 'fas fa-sync',\n            label: game.i18n.localize('PDFOUNDRY.MISC.Refresh'),\n            onclick: () => this.render(),\n        });\n        return buttons;\n    }\n\n    getData(options?: any): any {\n        const data = super.getData(options);\n\n        enum DangerLevel {\n            Safe = 0,\n            Low = 1,\n            High = 2,\n            Critical = 3,\n        }\n        type DataPath = { key: string; value: string; danger: DangerLevel };\n        const flatten = (data: object, current: string = '', danger: DangerLevel = DangerLevel.Safe): DataPath[] => {\n            let results: DataPath[] = [];\n\n            window['actorData'] = this.actor.data.data;\n\n            const path = (curr: string, ...next: (string | number)[]) => {\n                if (curr.length > 0) {\n                    for (let i = 0; i < next.length; i++) {\n                        curr = `${curr}.${next[i]}`;\n                    }\n                    return curr;\n                } else {\n                    return `${next}`;\n                }\n            };\n\n            const wrap = (value: string) => {\n                return `\\{\\{${value}\\}\\}`;\n            };\n\n            const boundDanger = (curr: DangerLevel, next: DangerLevel) => {\n                if (curr < next) {\n                    return next;\n                }\n                return curr;\n            };\n\n            if (data === null) return results;\n            if (data === undefined) return results;\n\n            if (typeof data === 'object') {\n                for (const [key, value] of Object.entries(data)) {\n                    if (Array.isArray(value)) {\n                        // Case 1 : The value is an array\n                        if (value.length === 0) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.Critical,\n                                value: wrap('Empty Array, do not use!'),\n                            });\n                        } else {\n                            for (let i = 0; i < value.length; i++) {\n                                const next = value[i];\n                                results = [...results, ...flatten(next, path(current, key, i), boundDanger(danger, DangerLevel.High))];\n                            }\n                        }\n                    } else if (typeof value === 'object') {\n                        // Case 2 : The value is an object\n                        if (value === null || value === undefined) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.High,\n                                value: wrap('Null/Undefined, be cautious!'),\n                            });\n                        } else if (isObjectEmpty(value)) {\n                            results.push({\n                                key: path(current, key),\n                                danger: DangerLevel.Critical,\n                                value: wrap('Empty Object, do not use!'),\n                            });\n                        } else {\n                            for (let [key2, value2] of Object.entries(value)) {\n                                results = [...results, ...flatten(value2 as any, path(current, key, key2), boundDanger(danger, DangerLevel.Low))];\n                            }\n                        }\n                    } else if (typeof value === 'function') {\n                        // Case 3 : Base Case : The value is a function\n                        results.push({\n                            key: path(current, key),\n                            danger: boundDanger(danger, DangerLevel.Critical),\n                            value: wrap('Function, do not use!'),\n                        });\n                    } else {\n                        // Case 4 : Base Case : The value is a primitive\n                        results.push({\n                            key: path(current, key),\n                            danger: boundDanger(danger, DangerLevel.Safe),\n                            value: (value as any).toString(),\n                        });\n                    }\n                }\n            } else if (typeof data === 'function') {\n                // Case 3 : Base Case : The value is a function\n                results.push({\n                    key: current,\n                    danger: boundDanger(danger, DangerLevel.Critical),\n                    value: wrap('Function, do not use!'),\n                });\n            } else {\n                // Case 4 : Base Case : The value is a primitive\n                results.push({\n                    key: current,\n                    danger: boundDanger(danger, DangerLevel.Safe),\n                    value: data,\n                });\n            }\n\n            return results;\n        };\n\n        const icons = {\n            [DangerLevel.Safe]: '<i class=\"fas fa-check-circle\"></i>',\n            [DangerLevel.Low]: '<i class=\"fas fa-question-circle\"></i>',\n            [DangerLevel.High]: '<i class=\"fas fa-exclamation-triangle\"></i>',\n            [DangerLevel.Critical]: '<i class=\"fas fa-radiation-alt\"></i>',\n        };\n        const tooltips = {\n            [DangerLevel.Safe]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Safe'),\n            [DangerLevel.Low]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Low'),\n            [DangerLevel.High]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.High'),\n            [DangerLevel.Critical]: game.i18n.localize('PDFOUNDRY.MISC.DANGER.Critical'),\n        };\n\n        data['paths'] = flatten(this.actor.data.data, 'data');\n        data['paths'].push({\n            key: 'name',\n            value: this.actor.name,\n            danger: DangerLevel.Safe,\n        });\n\n        data['paths'].sort((a: DataPath, b: DataPath) => a.key.localeCompare(b.key));\n        data['paths'] = data['paths'].map((element) => {\n            let splitRoll = element['key'].split('.') as string[];\n            splitRoll.shift();\n\n            return {\n                ...element,\n                icon: icons[element.danger],\n                roll: `@${splitRoll.join('.')}`,\n                tooltip: tooltips[element.danger],\n            };\n        });\n\n        return data;\n    }\n\n    public activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        html.find('i.copy').on('click', async (event) => {\n            const target = $(event.currentTarget);\n\n            await navigator.clipboard.writeText(target.data('value') as string);\n\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.MISC.CopiedToClipboard'));\n        });\n    }\n\n    render(force?: boolean, options?: Application.RenderOptions) {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.render.bind(this), 10000);\n        return super.render(force, options);\n    }\n\n    close(): Promise<any> {\n        clearTimeout(this.timeout);\n        return super.close();\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ActorViewer from '../viewer/ActorViewer';\nimport Settings from '../Settings';\nimport { PDFData } from '../common/types/PDFData';\n\n/**\n * Adapts a FillableViewer to function as a ActorSheet\n * @internal\n */\nexport default class PDFActorSheetAdapter extends ActorSheet<ActorSheet.Options> {\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    private _viewer: ActorViewer;\n    private readonly _options?: Application.Options;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(actor: Actor, options?: ActorSheet.Options) {\n        super(actor, options);\n\n        this._options = options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get viewer(): ActorViewer {\n        return this._viewer;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    public activateListeners(html: JQuery) {\n        $(this.element).css('display', 'none');\n        this.form = $(html).first().get(0)!;\n        super.activateListeners(html);\n    }\n\n    protected async _onSubmit(...args): Promise<any> {\n        // PDFoundry handles data in the FillableViewer\n        return;\n    }\n\n    async getData(): Promise<ActorSheet.Data> {\n        return mergeObject(await super.getData(), await this._viewer.getData());\n    }\n\n    protected _updateObject(event: Event, formData: any): Promise<any> {\n        return super._updateObject(event, formData);\n    }\n\n    public render(force?: boolean, options?: Application.RenderOptions) {\n        if (!this._viewer) {\n            const sheetId = this.actor.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID) as PDFData;\n            this._viewer = new ActorViewer(this.actor as any, sheetId, this, this._options);\n        }\n\n        // If this window is already open, don't re-render\n        if (this._state === Application.RENDER_STATES.RENDERED) {\n            return this;\n        }\n\n        this._viewer.render(force, options);\n        return super.render(force, options as any);\n    }\n\n    // TODO: Sandbox compatibility - should force this class to extend CONFIG class instead.\n    async scrollbarSet() {\n        return;\n    }\n\n    async close(): Promise<void> {\n        if (this._viewer) {\n            await this._viewer.close();\n            // @ts-ignore\n            delete this._viewer;\n        }\n        return super.close();\n    }\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport Api from '../Api';\nimport { getAbsoluteURL, getPDFData } from '../Util';\nimport { PDFType } from '../common/types/PDFType';\nimport { BUTTON_GITHUB, BUTTON_HELP, BUTTON_KOFI } from '../common/helpers/header';\n\n/**\n * Extends the base ItemSheet for linked PDF viewing.\n * @private\n */\nexport class PDFConfig extends FormApplication {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = [...options.classes!, Settings.CSS_CLASS];\n        options.template = `${Settings.PATH_TEMPLATES}/sheet/pdf-config.html`;\n        options.width = 650;\n        options.height = 'auto';\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    public readonly object: JournalEntry;\n    private picker: FilePicker;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(journalEntry: JournalEntry, options?: Application.Options) {\n        super(journalEntry, options);\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get title(): string {\n        return this.object.name!;\n    }\n\n    public get id(): string {\n        return `pdf-${this.object.id}`;\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        buttons.unshift(BUTTON_HELP);\n        return buttons;\n    }\n\n    get isEditable(): boolean {\n        // @ts-ignore TODO: 0.8.x compat\n        return this.object.testUserPermission(game.user, CONST.ENTITY_PERMISSIONS.OWNER);\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    public activateListeners(html: JQuery): void {\n        super.activateListeners(html);\n\n        const urlInput = html.find('#data-url');\n        const offsetInput = html.find('#data-offset');\n\n        // Default behavior opens the file picker in this form setup, override\n        html.find('input').on('keypress', (event: any) => {\n            if (event.key === 'Enter') {\n                this._onSubmit(event, { preventClose: true });\n            }\n        });\n        html.find('input, select').on('input', (event: any) => {\n            this._onSubmit(event, { preventClose: true });\n        });\n\n        // Browse button\n        html.find('#pdf-browse').on('click', async (event) => {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            this.picker =\n                this.picker ??\n                new FilePicker({\n                    // @ts-ignore TODO\n                    callback: () => {\n                        this._onSubmit(new Event('input'), { preventClose: true });\n                    },\n                });\n\n            // @ts-ignore TODO: Foundry Types\n            this.picker.extensions = ['.pdf'];\n            this.picker.field = urlInput[0];\n\n            if (!this.filepickers.includes(this.picker)) {\n                this.filepickers.push(this.picker);\n            }\n\n            let urlValue = urlInput.val();\n            if (urlValue !== undefined) {\n                await this.picker.browse(urlValue.toString().trim());\n            }\n\n            this.picker.render(true);\n        });\n\n        // Test pdf settings button\n        html.find('#pdf-test').on('click', (event) => {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            let urlValue = urlInput.val();\n            let offsetValue = offsetInput.val();\n\n            if (urlValue === null || urlValue === undefined) return;\n            if (offsetValue === null || offsetValue === undefined) return;\n\n            urlValue = urlValue.toString();\n            urlValue = getAbsoluteURL(urlValue);\n\n            if (offsetValue.toString().trim() === '') {\n                offsetValue = 0;\n            }\n            offsetValue = parseInt(offsetValue as string);\n\n            Api.openURL(urlValue, 5 + offsetValue, false);\n        });\n    }\n\n    public getData() {\n        const data = super.getData();\n\n        data['types'] = Object.entries(PDFType).map(([key]) => {\n            return {\n                value: PDFType[key],\n                text: `PDFOUNDRY.MISC.PDFTYPE.${key}`,\n            };\n        });\n\n        data['dataPath'] = `flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.PDF_DATA}`;\n        data['flags'] = getPDFData(this.object);\n        data['name'] = this.object.data.name;\n\n        return data;\n    }\n\n    protected async _updateObject(event: Event | JQuery.Event, formData: any): Promise<void> {\n        await this.object.update(formData);\n    }\n\n    // @ts-ignore TODO\n    submit({ updateData }: { updateData?: any }): FormApplication {\n        // @ts-ignore TODO\n        return super.submit({ updateData });\n    }\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\n\n/**\n * Callback type for player selection\n * @private\n */\nexport type PDFPlayerSelectCallback = (ids: string[]) => void;\n\n/**\n * An application that allows selection of players.\n * @private\n */\nexport default class PlayerSelect extends Application {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['sheet', 'item'];\n        options.template = `${Settings.PATH_TEMPLATES}/app/pdf-player-select.html`;\n        // @ts-ignore\n        options.width = 'auto';\n        options.height = 'auto';\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.SelectPlayers');\n        return options;\n    }\n\n    private readonly _ids;\n    private readonly _callback: PDFPlayerSelectCallback;\n\n    constructor(ids: string[], cb: PDFPlayerSelectCallback, options?: Application.Options) {\n        super(options);\n\n        this._ids = ids;\n        this._callback = cb;\n    }\n\n    getData(options?: any): any | Promise<any> {\n        const data = super.getData(options);\n\n        const users: any[] = [];\n        for (const id of this._ids) {\n            users.push({\n                name: game!.users!.get(id)!.name,\n                id,\n            });\n        }\n\n        users.sort((a, b) => a.name.localeCompare(b.name));\n\n        data['users'] = users;\n        return data;\n    }\n\n    public activateListeners(html: JQuery): void {\n        super.activateListeners(html);\n\n        const button = $(html).find('#confirm');\n        button.on('click', () => {\n            this._callback(this.collectIds());\n            this.close();\n        });\n    }\n\n    /**\n     * Collect selected ids from the html\n     */\n    private collectIds(): string[] {\n        const ids: string[] = [];\n        const checkboxes = $(this.element).find('input[type=checkbox]');\n        for (let i = 0; i < checkboxes.length; i++) {\n            const checkbox = $(checkboxes[i]);\n            if (checkbox.prop('checked')) {\n                ids.push(checkbox.prop('id'));\n            }\n        }\n        return ids;\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\n\n/**\n * Callback type for select apps\n * @internal\n */\nexport type SelectAppCallback = (value: string, text: string) => void;\n\n/**\n * Data layout for select options\n * @internal\n */\nexport interface SelectOption {\n    text: string;\n    value: string;\n}\n\n/**\n * Base class for app that uses a select drop down\n * @internal\n */\nexport default abstract class SelectApp extends Application {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = [...options.classes!, Settings.CSS_CLASS];\n        options.template = `${Settings.PATH_TEMPLATES}/app/select-app.html`;\n        options.width = 200;\n        options.height = 'auto';\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    private readonly _current?: string;\n    private readonly _callback?: SelectAppCallback;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(callback?: SelectAppCallback, currentValue?: string, options?: Application.Options) {\n        super(options);\n\n        this._current = currentValue;\n        this._callback = callback;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get title(): string {\n        return game.i18n.localize(this.selectTitle);\n    }\n\n    public get id(): string {\n        return this.unique ? this.selectId : super.id;\n    }\n\n    /**\n     * Should duplicate of this app be allowed\n     * @protected\n     */\n    protected get unique(): boolean {\n        return true;\n    }\n\n    /**\n     * The localization string to be used in the header for the title\n     * @protected\n     */\n    protected abstract get selectTitle(): string;\n\n    /**\n     * The localization string to be used in the body to label the select\n     * @protected\n     */\n    protected abstract get selectLabel(): string;\n\n    /**\n     * The id of the select, to preserve uniqueness. Used for app id if not\n     *  unique, and select id attribute for global finds.\n     * @protected\n     */\n    protected abstract get selectId(): string;\n\n    /**\n     * Array of options that will be used for the select options\n     * @protected\n     */\n    protected abstract get selectOptions(): SelectOption[];\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    getData(options?: any): any | Promise<any> {\n        const data = super.getData(options);\n\n        data['data'] = {\n            id: this.selectId,\n            label: this.selectLabel,\n            selected: this._current,\n            options: this.selectOptions,\n        };\n\n        return data;\n    }\n\n    public activateListeners(html: JQuery): void {\n        super.activateListeners(html);\n\n        const button = html.find(`button#${this.selectId}-confirm`);\n        button.on('click', async (event) => {\n            event.preventDefault();\n            const select = html.find(`#${this.selectId}`) as JQuery<HTMLSelectElement>;\n            const value = select.val() as string;\n            if (value !== this._current && this._callback !== undefined) {\n                this._callback(value, select.find('option:selected').text());\n            }\n            await this.close();\n        });\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An error that occurs during cache operations\n * @private\n */\nexport class CacheError extends Error {\n    constructor(index: string, store: string, message?: string) {\n        super(`Error in ${index}>${store}: ${message}`);\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheError } from './CacheError';\n\n/**\n * Class that deals with getting/setting from an indexed db\n * Mostly exists to separate logic for the PDFCache from logic\n * dealing with the database\n * @private\n */\nexport default class CacheHelper {\n    private _version: number;\n\n    private readonly _indexName: string;\n    private readonly _storeNames: string[];\n\n    private _db: IDBDatabase;\n\n    public static async createAndOpen(indexName: string, storeNames: string[], version: number) {\n        const helper = new CacheHelper(indexName, storeNames, version);\n        await helper.open();\n        return helper;\n    }\n\n    public get ready() {\n        return this._db !== undefined;\n    }\n\n    public constructor(indexName: string, storeNames: string[], version: number) {\n        this._indexName = `${indexName}`;\n        this._storeNames = storeNames;\n        this._version = version;\n    }\n\n    private newTransaction(storeName: string) {\n        const transaction = this._db.transaction(storeName, 'readwrite');\n        const store = transaction.objectStore(storeName);\n        return { transaction, store };\n    }\n\n    public open(): Promise<void> {\n        const that = this;\n        return new Promise<void>(function (resolve, reject) {\n            const request = indexedDB.open(that._indexName, that._version);\n            request.onsuccess = function (event) {\n                that._db = this.result;\n                resolve();\n            };\n            request.onupgradeneeded = function (event) {\n                that._db = this.result;\n                for (let i = 0; i < that._storeNames.length; i++) {\n                    try {\n                        // Create object store if it doesn't exist\n                        that._db.createObjectStore(that._storeNames[i], {});\n                    } catch (error) {\n                        // Otherwise pass\n                    }\n                }\n                resolve();\n            };\n            request.onerror = function (event) {\n                // @ts-ignore\n                reject(event.target.error);\n            };\n        });\n    }\n\n    public set(key: IDBValidKey, value: any, storeName: string, force: boolean = false): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._db) {\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\n            } else {\n                const that = this;\n                let { transaction, store } = this.newTransaction(storeName);\n\n                // Propagate errors upwards, otherwise they fail silently\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                const keyRequest = store.getKey(key);\n                keyRequest.onsuccess = function (event) {\n                    // key already exists in the store\n                    if (keyRequest.result) {\n                        // should we force the new value by deleting the old?\n                        if (force) {\n                            that.del(key, storeName).then(() => {\n                                ({ transaction, store } = that.newTransaction(storeName));\n                                store.add(value, key);\n                                resolve();\n                            });\n                        } else {\n                            throw new CacheError(that._indexName, storeName, `Key ${key} already exists.`);\n                        }\n                    } else {\n                        store.add(value, key);\n                        resolve();\n                    }\n                };\n            }\n        });\n    }\n\n    public get(key: IDBValidKey, storeName: string): Promise<any> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this._db) {\n                throw new CacheError(this._indexName, storeName, 'Database is not initialized.');\n            } else {\n                let { transaction, store } = this.newTransaction(storeName);\n\n                // Propagate errors upwards, otherwise they fail silently\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                const getRequest = store.get(key);\n                getRequest.onsuccess = function (event) {\n                    resolve(this.result);\n                };\n\n                getRequest.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n            }\n        });\n    }\n\n    public del(key: IDBValidKey, storeName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                const { transaction, store } = this.newTransaction(storeName);\n\n                transaction.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n                transaction.oncomplete = function (event) {\n                    resolve();\n                };\n\n                store.delete(key);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    public keys(storeName: string): Promise<IDBValidKey[]> {\n        return new Promise<IDBValidKey[]>((resolve, reject) => {\n            try {\n                const { transaction, store } = this.newTransaction(storeName);\n                const keysRequest = store.getAllKeys();\n\n                keysRequest.onsuccess = function () {\n                    resolve(keysRequest.result);\n                };\n                keysRequest.onerror = function (event) {\n                    // @ts-ignore\n                    reject(event.target.error);\n                };\n\n                return;\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    public clr(storeName: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            try {\n                const { store } = this.newTransaction(storeName);\n                const keys = store.getAllKeys();\n                keys.onsuccess = (result) => {\n                    const promises: Promise<void>[] = [];\n                    for (const key of keys.result) {\n                        promises.push(this.del(key, storeName));\n                    }\n                    Promise.all(promises).then(() => {\n                        resolve();\n                    });\n                };\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport CacheHelper from './CacheHelper';\n\n/**\n * Meta information about a cache entry\n * @private\n */\ntype CacheData = {\n    /**\n     * The size in bytes this cache entry takes up.\n     */\n    size: number;\n    /**\n     * The date the cache was last accessed, represented by a ISO string.\n     */\n    dateAccessed: string;\n};\n\n/**\n * Handles caching for PDFs\n * @private\n */\nexport default class PDFCache {\n    // <editor-fold desc=\"Static Properties\">\n    /**\n     * Max size of the cache for the active user, defaults to 256 MB.\n     */\n    private static get MAX_BYTES() {\n        return (Settings.get(Settings.SETTINGS_KEY.CACHE_SIZE) as number) * 2 ** 20;\n    }\n\n    private static readonly IDB_NAME: string = 'PDFoundry';\n    private static readonly IDB_VERSION: number = 1;\n\n    private static readonly CACHE: string = `Cache`;\n    private static readonly META: string = `Meta`;\n\n    private static _cacheHelper: CacheHelper;\n    // </editor-fold>\n\n    public static async initialize() {\n        PDFCache._cacheHelper = await CacheHelper.createAndOpen(PDFCache.IDB_NAME, [PDFCache.CACHE, PDFCache.META], PDFCache.IDB_VERSION);\n    }\n\n    /**\n     * Get meta information about a provided key (url).\n     * @param key\n     */\n    public static async getMeta(key: string): Promise<CacheData | null> {\n        try {\n            return await PDFCache._cacheHelper.get(key, PDFCache.META);\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set meta information about a provided key (url). See {@link CacheData}.\n     * @param key\n     * @param meta\n     */\n    public static async setMeta(key: string, meta: CacheData): Promise<void> {\n        await PDFCache._cacheHelper.set(key, meta, PDFCache.META, true);\n    }\n\n    /**\n     * Get the byte array representing the key (url) from the user's cache.\n     * @param key\n     */\n    public static async getCache(key: string): Promise<Uint8Array | null> {\n        try {\n            const bytes = await PDFCache._cacheHelper.get(key, PDFCache.CACHE);\n            const meta: CacheData = {\n                dateAccessed: new Date().toISOString(),\n                size: bytes.length,\n            };\n            await PDFCache.setMeta(key, meta);\n\n            return bytes;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * Set the value of the cache for the specific key (url) to the provided byte array.\n     * @param key\n     * @param bytes\n     */\n    public static async setCache(key: string, bytes: Uint8Array) {\n        const meta: CacheData = {\n            dateAccessed: new Date().toISOString(),\n            size: bytes.length,\n        };\n\n        await PDFCache._cacheHelper.set(key, bytes, PDFCache.CACHE, true);\n        await PDFCache.setMeta(key, meta);\n        await this.prune();\n    }\n\n    /**\n     * Preload the PDF at the specified key (url), caching it immediately.\n     * @param key\n     */\n    public static preload(key: string): Promise<void> {\n        return new Promise<void>(async (resolve, reject) => {\n            const cachedBytes = await PDFCache.getCache(key);\n            if (cachedBytes !== null && cachedBytes.byteLength > 0) {\n                resolve();\n                return;\n            }\n\n            const response = await fetch(key);\n            if (response.ok) {\n                const fetchedBytes = new Uint8Array(await response.arrayBuffer());\n                if (fetchedBytes.byteLength > 0) {\n                    await PDFCache.setCache(key, fetchedBytes);\n                    resolve();\n                    return;\n                } else {\n                    reject('Fetch failed.');\n                }\n            } else {\n                reject('Fetch failed.');\n            }\n        });\n    }\n\n    /**\n     * Prune the active user's cache until it is below the user's cache size limit.\n     */\n    public static async prune() {\n        const keys = await this._cacheHelper.keys(PDFCache.META);\n\n        let totalBytes = 0;\n        let metas: any[] = [];\n        for (const key of keys) {\n            const meta = await this._cacheHelper.get(key, PDFCache.META);\n            meta.dateAccessed = Date.parse(meta.dateAccessed);\n            meta.size = parseInt(meta.size);\n\n            totalBytes += meta.size;\n\n            metas.push({\n                key,\n                meta,\n            });\n        }\n\n        metas = metas.sort((a, b) => {\n            return a.meta.dateAccessed - b.meta.dateAccessed;\n        });\n\n        for (let i = 0; i < metas.length; i++) {\n            if (totalBytes < PDFCache.MAX_BYTES) {\n                break;\n            }\n\n            const next = metas[i];\n\n            await this._cacheHelper.del(next.key, PDFCache.META);\n            await this._cacheHelper.del(next.key, PDFCache.CACHE);\n\n            totalBytes -= next.meta.size;\n        }\n    }\n\n    /**\n     * Clear the PDF cache\n     */\n    public static async clear() {\n        const keys = await this._cacheHelper.keys(PDFCache.META);\n\n        for (const key of keys) {\n            await this._cacheHelper.del(key, PDFCache.META);\n            await this._cacheHelper.del(key, PDFCache.CACHE);\n        }\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Chat command processor\n * @internal\n */\nexport default abstract class ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get CommandPrefix() {\n        return `/pdfoundry`;\n    }\n\n    public abstract get CommandName(): string;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Execute the command, returning true if the command completes successfully\n     * @param content\n     */\n    public execute(content: string): boolean {\n        const realArgs = content.split(' ');\n        if (realArgs[0] !== this.CommandPrefix) {\n            return false;\n        }\n\n        if (realArgs[1] !== this.CommandName) {\n            return false;\n        }\n\n        // pop first two args\n        realArgs.shift();\n        realArgs.shift();\n\n        this.run(realArgs)\n            .then(() => {\n                let message = game.i18n.localize('PDFOUNDRY.COMMANDS.Success');\n                message = message.replace('$COMMAND_NAME$', this.CommandName);\n                ui.notifications.info(message);\n            })\n            .catch((error) => {\n                let message = game.i18n.localize('PDFOUNDRY.COMMANDS.Failure');\n                message = message.replace('$COMMAND_NAME$', this.CommandName);\n                ui.notifications.error(message);\n                console.error(error);\n            });\n        return true;\n    }\n\n    /**\n     * Run the command\n     * @param args\n     * @protected\n     */\n    protected abstract run(args: string[]): Promise<void>;\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getPDFData, setPDFData } from '../Util';\nimport { PDFType } from '../common/types/PDFType';\nimport ChatCommand from './ChatCommand';\n\n/**\n * Fixes missing types\n * @internal\n */\nexport default class FixMissingTypes extends ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    get CommandName(): string {\n        return 'fix-missing-types';\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async run(args: string[]): Promise<void> {\n        let fixedPDFs = 0;\n        const journals = game!.journal!.filter((je: JournalEntry) => getPDFData(je) !== undefined && getPDFData(je)?.type === undefined) as JournalEntry[];\n        for (const journalEntry of journals) {\n            await setPDFData(journalEntry, {\n                type: PDFType.Static,\n            });\n            fixedPDFs += 1;\n        }\n\n        // @ts-ignore\n        ui.journal.render();\n\n        if (fixedPDFs > 0) {\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.FixMissingTypesSuccess'));\n        } else {\n            ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.FixMissingTypesFailure'));\n        }\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ChatCommand from './ChatCommand';\nimport PDFCache from '../cache/PDFCache';\n\n/**\n * @internal\n */\nexport default class PurgeCache extends ChatCommand {\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get CommandName(): string {\n        return 'purge-cache';\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async run(args: string[]): Promise<void> {\n        await PDFCache.clear();\n\n        ui.notifications.info(game.i18n.localize('PDFOUNDRY.COMMANDS.PurgeCacheSuccess'));\n    }\n\n    // </editor-fold>\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The domain white list includes domains that are allowed other than 'localhost' or\n *  the equivalent domain the user is running the server on.\n */\nexport const DOMAIN_WHITELIST = ['amazonaws.com', 'digitaloceanspaces.com', 'assets.forge-vtt.com', 'wasabisys.com', 'backblazeb2.com'];\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../../Api';\nimport Settings from '../../Settings';\n\n/**\n * @internal\n */\nexport default class EventStore<TKeys extends string = string> {\n    private readonly _map: Map<string, Function[]>;\n\n    public constructor() {\n        this._map = new Map<string, Function[]>();\n    }\n\n    /**\n     * Turn on an event callback for the specified event.\n     * @param eventName\n     * @param callback\n     */\n    public on(eventName: TKeys, callback: Function) {\n        if (!this._map.has(eventName)) {\n            this._map.set(eventName, []);\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (let i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] === callback) return;\n        }\n        callbacks.push(callback);\n    }\n\n    /**\n     * Like {@see on} but only fires once.\n     * @param eventName\n     * @param callback\n     */\n    public once(eventName: TKeys, callback: Function) {\n        const that = this;\n        const wrapper = function (...args) {\n            callback(args);\n            that.off(eventName, wrapper);\n        };\n        that.on(eventName, wrapper);\n    }\n\n    /**\n     * Turn off an event callback for the specified event.\n     * @param eventName\n     * @param callback\n     */\n    public off(eventName: TKeys, callback: Function) {\n        if (!this._map.has(eventName)) {\n            this._map.set(eventName, []);\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (let i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] === callback) {\n                callbacks.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Fire an event and forward the args to all handlers\n     * @param eventName\n     * @param args\n     */\n    public fire(eventName: TKeys, ...args) {\n        if (Api.DEBUG.EVENTS) {\n            console.debug(`${Settings.MODULE_NAME.toUpperCase()}::${eventName}`);\n            console.debug(args);\n        }\n\n        if (!this._map.has(eventName)) {\n            return;\n        }\n\n        const callbacks = this._map.get(eventName) as Function[];\n        for (const callback of callbacks) {\n            callback(...args);\n        }\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../../Api';\n\n/**\n * Github link header button.\n * @internal\n */\nexport const BUTTON_GITHUB = {\n    class: 'pdf-sheet-github',\n    icon: 'fas fa-external-link-alt',\n    label: 'PDFoundry',\n    onclick: () => window.open('https://github.com/Djphoenix719/PDFoundry', '_blank'),\n};\n\n/**\n * Manual link header button.\n * @internal\n */\nexport const BUTTON_HELP = {\n    class: 'pdf-sheet-manual',\n    icon: 'fas fa-question-circle',\n    label: 'Help',\n    onclick: () => Api.showHelp(),\n};\n\n/**\n * Shameless shill link\n * @internal\n */\nexport const BUTTON_KOFI = {\n    class: 'pdf-sheet-kofi',\n    icon: 'fas fa-coffee',\n    label: '',\n    onclick: () => window.open('https://ko-fi.com/djsmods', '_blank'),\n};\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The type of PDF file, as specified by the user.\n * @module API\n */\nexport enum PDFType {\n    /**\n     * Static PDFs contain no form fillable elements.\n     */\n    Static = 'static',\n    /**\n     * Fillable PDFs are not linked to actor sheets, but do contain form fillable elements.\n     */\n    Fillable = 'fillable',\n    /**\n     * Actor-linked PDFs store their data on the actor, so they can represent actors.\n     */\n    Actor = 'actor',\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Api from '../Api';\n\n/**\n * @private\n * Enriches TinyMCE editor content\n */\nexport default class HTMLEnricher {\n    public static patchEnrich() {\n        const oldEnrich = TextEditor.enrichHTML;\n\n        // @ts-ignore\n        TextEditor.enrichHTML = function (html: string, options: any) {\n            html = oldEnrich.apply(this, [html, options]);\n            html = HTMLEnricher.enrichAll(html);\n            return html;\n        };\n    }\n\n    public static bindRichTextLinks(html: JQuery) {\n        html.find('a.pdfoundry-link').on('click', (event) => {\n            event.preventDefault();\n\n            // This will always be an anchor\n            const target = $(event.currentTarget as HTMLAnchorElement);\n            const ref = target.data('ref') as string;\n            const page = target.data('page') as number;\n\n            // ref can match name or code\n            let pdfData = Api.findPDFData((data) => {\n                return data.name === ref || data.code === ref;\n            });\n\n            if (!pdfData) {\n                ui.notifications.error(`Unable to find a PDF with a name or code matching ${ref}.`);\n                return;\n            }\n\n            if (page === 0) {\n                Api.openPDF(pdfData);\n            } else {\n                Api.openPDF(pdfData, {\n                    page,\n                });\n            }\n        });\n    }\n\n    /**\n     * Replace the first @PDF link in the text with a rich link.\n     * @param text\n     */\n    public static enrich(text: string): string {\n        const sPos = text.indexOf('@');\n        const ePos = text.indexOf('}', sPos);\n\n        const enrichMe = text.slice(sPos, ePos + 1);\n\n        const lBracket = enrichMe.indexOf('[');\n        const rBracket = enrichMe.indexOf(']');\n        const lCurly = enrichMe.indexOf('{');\n        const rCurly = enrichMe.indexOf('}');\n\n        // Required character is missing\n        if (lBracket === -1 || rBracket === -1 || lCurly === -1 || rCurly === -1) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n        // Order is not correct\n        if (rCurly < lCurly || lCurly < rBracket || rBracket < lBracket) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n\n        const options = enrichMe.slice(lBracket + 1, rBracket);\n        // Multiple dividers are not supported\n        if (options.indexOf('|') !== options.lastIndexOf('|')) {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.InvalidFormat'));\n        }\n\n        let linkText = enrichMe.slice(lCurly + 1, rCurly);\n        // Empty names are not supported\n        if (linkText === undefined || linkText === '') {\n            throw new Error(game.i18n.localize('PDFOUNDRY.ENRICH.EmptyLinkText'));\n        }\n\n        let pageNumber = 0;\n        const [nameOrCode, queryString] = options.split('|');\n\n        // Getting the PDF without invisible PDFs to check permissions\n        let pdfData = Api.findPDFData((data) => {\n            return data.name === nameOrCode || data.code === nameOrCode;\n        }, false);\n\n        if (pdfData) {\n            // Case 1 - User has permissions to see the PDF\n            if (queryString !== undefined && queryString !== '') {\n                const [_, pageString] = queryString.split('=');\n                try {\n                    pageNumber = parseInt(pageString);\n                } catch (error) {\n                    // Ignore page number\n                }\n            }\n\n            if (pageNumber < 0) {\n                throw new Error('PDFOUNDRY.ERROR.PageMustBePositive');\n            }\n\n            const i18nOpen = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitleOpen');\n            const i18nPage = game.i18n.localize('PDFOUNDRY.ENRICH.LinkTitlePage');\n            const linkTitle = `${i18nOpen} ${nameOrCode} ${i18nPage} ${pageNumber}`;\n            const result = `<a class=\"pdfoundry-link\" title=\"${linkTitle}\" data-ref=\"${nameOrCode}\" data-page=\"${pageNumber}\">${linkText}</a>`;\n\n            return text.slice(0, sPos) + result + text.slice(ePos + 1);\n        } else {\n            // Case 2 - User does not have permissions to see the PDF\n            return text.slice(0, sPos) + linkText + text.slice(ePos + 1);\n        }\n    }\n\n    /**\n     * Replace all rich text markup with appropriate rich text HTML in the specified text.\n     * @param text\n     */\n    public static enrichAll(text: string): string {\n        while (text.includes('@PDF')) {\n            text = HTMLEnricher.enrich(text);\n        }\n\n        return text;\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getPDFData, isEntityPDF } from '../Util';\n\n/**\n * @private\n * A plugin for TinyMCE that handles Drag + Drop\n */\nexport default class TinyMCEPlugin {\n    private static pluginName = 'PDFoundry_HTMLEnrich_Drop';\n\n    /**\n     * Register plugin with Foundry + TinyMCE\n     */\n    public static Register() {\n        // @ts-ignore\n        tinyMCE.PluginManager.add(TinyMCEPlugin.pluginName, function (editor) {\n            editor.on('BeforeSetContent', (event) => TinyMCEPlugin.Handle(event));\n        });\n        CONFIG.TinyMCE.plugins = `${TinyMCEPlugin.pluginName} ${CONFIG.TinyMCE.plugins}`;\n    }\n\n    private static Handle(event: any) {\n        if (event.initial) return;\n        if (!event.selection || event.set !== undefined) {\n            return;\n        }\n\n        const initialContent = event.content;\n\n        const lBracket = initialContent.indexOf('[');\n        const rBracket = initialContent.indexOf(']');\n        const entityId = initialContent.slice(lBracket + 1, rBracket);\n\n        const entity = game!.journal!.get(entityId);\n        if (entity === undefined || !isEntityPDF(entity)) {\n            return;\n        }\n\n        const pdfData = getPDFData(entity);\n        if (pdfData === undefined) {\n            return;\n        }\n\n        const codeOrName = pdfData.code ? pdfData.code : pdfData.name;\n\n        event.content = `@PDF[${codeOrName}|page=1]{${pdfData.name}}`;\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFData } from '../common/types/PDFData';\nimport { PDFType } from '../common/types/PDFType';\nimport { setPDFData } from '../Util';\nimport Settings from '../Settings';\n\n/**\n * Should this migration run\n * @internal\n */\nexport function legacyMigrationRequired(): boolean {\n    if (Settings.get(Settings.SETTINGS_KEY.DATA_VERSION) === 'undefined') {\n        if (game!.items!.find((i: Item) => i.data.type === 'PDFoundry_PDF') !== null) {\n            return true;\n        } else {\n            Settings.set(Settings.SETTINGS_KEY.DATA_VERSION, 'v0.6.0');\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Open the migration window for migration\n * @internal\n */\nexport function migrateLegacy(): Promise<void> {\n    return new Promise<void>(async (resolve, reject) => {\n        let d = new Dialog({\n            title: 'PDFoundry: Migration Required',\n            content: [\n                '<h1>Migration Required</h1>',\n                '<p>PDFoundry must convert legacy items to the new Journal format; You will not be able to use PDFoundry until you do.</p>',\n                '<p>If you wish to backup your world - just in case - you may do so now.</p>',\n                '<p>Please note folder structure will not be preserved.</p>',\n            ].join(''),\n            buttons: {\n                proceed: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: 'Migrate Now',\n                    callback: () => {\n                        convert()\n                            .then(() => resolve())\n                            .catch(() => reject());\n                    },\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Remind Me Later',\n                    callback: () => resolve(),\n                },\n            },\n            default: 'cancel',\n        });\n        d.render(true);\n    });\n}\n\n/**\n * Run the conversion\n * @internal\n */\nasync function convert() {\n    const items = game!.items!.filter((i: Item) => i.data.type === 'PDFoundry_PDF') as Item[];\n    for (const item of items) {\n        let pdfData = getLegacyData(item);\n        // @ts-ignore\n        const permission = item.data.permission;\n        const journalEntry = (await JournalEntry.create({\n            name: pdfData.name,\n            permission,\n        })) as JournalEntry;\n        // @ts-ignore\n        delete pdfData.name;\n\n        await setPDFData(journalEntry, pdfData);\n        await item.delete({});\n    }\n\n    // @ts-ignore\n    ui.journal.render();\n}\n\n/**\n * Get legacy PDF data & type\n * @param item\n * @internal\n */\nfunction getLegacyData(item: Item): PDFData {\n    const typeMap = {\n        PDFoundry_PDF: PDFType.Static,\n        PDFoundry_FillablePDF: PDFType.Fillable,\n        PDFoundry_FillableActor: PDFType.Actor,\n    };\n    // @ts-ignore\n    let type = typeMap[item.data.data.pdf_type] ?? PDFType.Static;\n    return {\n        name: item.data.name,\n        // @ts-ignore\n        url: item.data.data.url,\n        // @ts-ignore\n        code: item.data.data.code,\n        // @ts-ignore\n        offset: item.data.data.offset,\n        // @ts-ignore\n        cache: item.data.data.cache,\n        type,\n    };\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport PreloadEvent from './events/PreloadEvent';\nimport StaticViewer from '../viewer/StaticViewer';\nimport Api from '../Api';\nimport Settings from '../Settings';\nimport SetViewEvent from './events/SetViewEvent';\nimport PDFCache from '../cache/PDFCache';\n\n/**\n * @private\n */\nexport class Socket {\n    public static initialize() {\n        // @ts-ignore TODO\n        game.socket.on(Settings.SOCKET_NAME, (event) => {\n            try {\n                const { userIds, type, payload } = event;\n                // null = all users, otherwise check if this event effects us\n                if (userIds !== null && !userIds.includes(game.userId)) {\n                    return;\n                }\n\n                if (type === SetViewEvent.EVENT_TYPE) {\n                    Socket.handleSetView(payload);\n                    return;\n                } else if (type === PreloadEvent.EVENT_TYPE) {\n                    Socket.handlePreloadPDF(payload);\n                    return;\n                } else {\n                    if (type.includes('PDFOUNDRY')) {\n                        console.error(`Event of type ${type} has no handler.`);\n                        return;\n                    }\n                }\n            } catch (e) {\n                // Pass\n            }\n        });\n    }\n\n    public static handleSetView(data: any) {\n        if (Settings.get(Settings.SETTINGS_KEY.EXISTING_VIEWER)) {\n            function appIsViewer(app: Application): app is StaticViewer {\n                return app['pdfData'] !== undefined;\n            }\n\n            for (const app of Object.values(ui.windows)) {\n                if (!appIsViewer(app)) {\n                    continue;\n                }\n\n                const pdfData = app.pdfData;\n                if (data.pdfData.url === pdfData.url) {\n                    app.page = data.page;\n                    return;\n                }\n            }\n            // App not found, fall through.\n        }\n        Api.openPDF(data.pdfData, {\n            page: data.page,\n        });\n    }\n\n    public static handlePreloadPDF(data: any) {\n        PDFCache.preload(data.url);\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SocketEvent from './SocketEvent';\n\n/**\n * @private\n */\nexport default class PreloadEvent extends SocketEvent {\n    public static get EVENT_TYPE() {\n        return `${super.EVENT_TYPE}/PRELOAD_PDF`;\n    }\n\n    get type() {\n        return PreloadEvent.EVENT_TYPE;\n    }\n\n    public url: string;\n\n    constructor(userIds: string[] | null, url: string) {\n        super(userIds);\n\n        this.url = url;\n    }\n\n    protected getPayload(): any {\n        const payload = super.getPayload();\n        payload.url = this.url;\n        return payload;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SocketEvent from './SocketEvent';\nimport { PDFData } from '../../common/types/PDFData';\n\n/**\n * @private\n */\nexport default class SetViewEvent extends SocketEvent {\n    public static get EVENT_TYPE() {\n        return `${super.EVENT_TYPE}/SET_VIEW`;\n    }\n\n    get type() {\n        return SetViewEvent.EVENT_TYPE;\n    }\n\n    public page: number;\n    public pdfData: PDFData;\n\n    constructor(userIds: string[] | null, pdfData: PDFData, page: number) {\n        super(userIds);\n\n        this.pdfData = pdfData;\n        this.page = page;\n    }\n\n    protected getPayload() {\n        const payload = super.getPayload();\n        payload.pdfData = this.pdfData;\n        payload.page = this.page;\n        return payload;\n    }\n}\n","/* Copyright 2020 Andrew Cuccinello\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../../Settings';\n\n/**\n * @private\n */\nexport default abstract class SocketEvent {\n    /**\n     * The type of this event.\n     */\n    public static get EVENT_TYPE() {\n        return 'PDFOUNDRY';\n    }\n\n    /**\n     * The type of this event.\n     */\n    public abstract get type();\n\n    /**\n     * The user ids that should handle this event.\n     */\n    protected userIds: string[] | null;\n\n    protected constructor(userIds: string[] | null) {\n        this.userIds = userIds;\n    }\n\n    /**\n     * Get any data that will be sent with the event.\n     */\n    protected getPayload(): any {\n        return {};\n    }\n\n    public emit() {\n        // @ts-ignore TODO\n        game.socket.emit(Settings.SOCKET_NAME, {\n            type: this.type,\n            userIds: this.userIds,\n            payload: this.getPayload(),\n        });\n    }\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport ActorSheetSelect from '../app/ActorSheetSelect';\nimport { getAbsoluteURL, getPDFData } from '../Util';\nimport PDFActorSheetAdapter from '../app/PDFActorSheetAdapter';\nimport FillableViewer from './FillableViewer';\nimport { PDFData } from '../common/types/PDFData';\nimport PDFActorDataBrowser from '../app/PDFActorDataBrowser';\nimport { AnyDocumentData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/data.mjs';\nimport { Document } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/module.mjs';\n\n/**\n * The FillableViewer class provides an interface for displaying, serializing, and observing form-fillable PDFs,\n *  all while connecting their data to a specific actor. Extends the Fillable Viewer.\n * @module API\n */\nexport default class ActorViewer extends FillableViewer {\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\n\n    // <editor-fold desc=\"Properties\">\n    protected document: Document<AnyDocumentData>; //TODO: Can type properly\n    protected actorSheet: PDFActorSheetAdapter;\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n    constructor(actor: Document<AnyDocumentData>, pdfData: PDFData, sheet: PDFActorSheetAdapter, options?: Application.Options) {\n        super(actor, pdfData, options);\n\n        this.document = actor;\n        this.actorSheet = sheet;\n    }\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    get title(): string {\n        return this.document.name!;\n    }\n\n    /**\n     * Get the URL for the current sheet from the actor flags.\n     */\n    public getSheetId(): string | undefined {\n        return this.document.getFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID) as string;\n    }\n\n    /**\n     * Save the URL for the current sheet to the actor flags.\n     * @param value\n     */\n    public async setSheetId(value: string | undefined) {\n        if (typeof value === 'string') {\n            return this.document.setFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID, value);\n        } else {\n            return this.document.unsetFlag(Settings.MODULE_NAME, Settings.FLAGS_KEY.SHEET_ID);\n        }\n    }\n\n    /**\n     * Get pdf data for the currently set PDF sheet id\n     */\n    public getSheetPdf(): PDFData | undefined {\n        const id = this.getSheetId();\n        if (id === undefined) return undefined;\n\n        return getPDFData(game!.journal!.get(id));\n    }\n\n    protected _getHeaderButtons(): any[] {\n        const buttons: any[] = [];\n\n        buttons.unshift({\n            label: 'Close',\n            class: 'close',\n            icon: 'fas fa-times',\n            // actor sheet is responsible for our clean up\n            onclick: (ev) => this.actorSheet.close(),\n        });\n\n        // @ts-ignore\n        const canConfigure = game.user.isGM || (this.document.owner && game.user.can('TOKEN_CONFIGURE'));\n        if (this.options['editable'] && canConfigure) {\n            buttons.unshift({\n                // @ts-ignore TODO 0.8.x\n                label: this.token ? 'Token' : 'Prototype Token',\n                class: 'configure-token',\n                icon: 'fas fa-user-circle',\n                // @ts-ignore TODO 0.8.x\n                onclick: (ev) => this.actorSheet._onConfigureToken(ev),\n            });\n\n            buttons.unshift({\n                label: 'Sheet',\n                class: 'configure-sheet',\n                icon: 'fas fa-cog',\n                // @ts-ignore TODO 0.8.x\n                onclick: (ev) => this.actorSheet._onConfigureSheet(ev),\n            });\n\n            buttons.unshift({\n                class: 'pdf-sheet-select',\n                icon: 'fas fa-user-cog',\n                label: game.i18n.localize('PDFOUNDRY.VIEWER.SelectSheet'),\n                onclick: () => {\n                    const current = this.getSheetId();\n                    new ActorSheetSelect(async (id) => {\n                        await this.setSheetId(id);\n                        await this.actorSheet.close();\n                        const sheet = this.getSheetPdf();\n\n                        if (!sheet) {\n                            await this.setSheetId(undefined);\n                        }\n\n                        await this.actorSheet.render(true);\n                    }, current).render(true);\n                },\n            });\n\n            if (game!.user!.isGM) {\n                buttons.unshift({\n                    class: 'pdf-browse-data',\n                    icon: 'fas fa-search',\n                    label: game.i18n.localize('PDFOUNDRY.VIEWER.InspectData'),\n                    onclick: () => {\n                        new PDFActorDataBrowser(this.document as Actor).render(true);\n                    },\n                });\n            }\n        }\n\n        return buttons;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected async onViewerReady(): Promise<void> {\n        super.onViewerReady();\n        const sheet = this.getSheetPdf();\n        if (sheet) {\n            const url = getAbsoluteURL(sheet.url);\n            await this.open(url);\n        }\n    }\n\n    async open(pdfSource: string | Uint8Array, page?: number): Promise<void> {\n        if (pdfSource instanceof Uint8Array) {\n            throw new Error('Actor Sheets must be opened by ID');\n        }\n\n        try {\n            await super.open(pdfSource, page);\n        } catch (error) {\n            // @ts-ignore TODO: THIS IS SUPER FUCKING HACK AND THE WHOLE FLOW NEEDS TO BE ANALYZED\n            if (!(await srcExists(pdfSource))) {\n                ui.notifications.error(game.i18n.localize('PDFOUNDRY.ERROR.FileNotFound'));\n                await this.setSheetId(undefined);\n            }\n\n            await this.actorSheet.close();\n            new PDFActorSheetAdapter(this.document as Actor, this.options as any).render(true);\n        }\n    }\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Settings from '../Settings';\nimport EventStore from '../common/helpers/events';\nimport { PDFViewerEvent } from '../common/types/PDFHooks';\nimport { PDFjsViewer } from '../common/types/PDFjsViewer';\nimport { PDFjsEventBus } from '../common/types/PDFjsEventBus';\nimport { BUTTON_GITHUB, BUTTON_KOFI } from '../common/helpers/header';\nimport Api from '../Api';\nimport { getAbsoluteURL } from '../Util';\n\n/**\n * The base viewer class from which all other types of viewers inherit.\n * @see {@link StaticViewer}\n * @see {@link FillableViewer}\n * @see {@link ActorViewer}\n * @module API\n */\nexport default abstract class BaseViewer extends Application {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['app', 'window-app', 'pdfoundry-viewer'];\n        options.template = `${Settings.PATH_TEMPLATES}/app/viewer/static.html`;\n        options.title = game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\n        options.width = 8.5 * 100 + 64;\n        options.height = 11 * 100 + 64;\n        options.resizable = true;\n        return options;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Properties\">\n\n    protected _frame: HTMLIFrameElement;\n    protected _viewer: PDFjsViewer;\n    protected _eventBus: PDFjsEventBus;\n    protected _eventStore: EventStore<PDFViewerEvent>;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    protected constructor(options?: Application.Options) {\n        super(options);\n        this._eventStore = new EventStore<PDFViewerEvent>();\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Finish the download and return the byte array for the file.\n     * @returns A promise that resolves to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array|Uint8Array}\n     *  of file bytes once that download is finished. You can pass this to a viewer to open it, or do something else with it.\n     */\n    public download(): Promise<Uint8Array> {\n        return new Promise<Uint8Array>(async (resolve) => {\n            const viewer = await this.getViewer();\n            let timeout;\n            const returnOrWait = () => {\n                if (viewer.downloadComplete) {\n                    resolve(viewer.pdfDocument.getData());\n                    return;\n                }\n\n                timeout = setTimeout(returnOrWait, 50);\n            };\n            returnOrWait();\n        });\n    }\n\n    /**\n     * Open a PDF\n     * @param pdfSource A URL or byte array to open.\n     * @param page The initial page to open to\n     */\n    public async open(pdfSource: string | Uint8Array, page?: number | string) {\n        const pdfjsViewer = await this.getViewer();\n\n        if (typeof page === 'string') {\n            page = parseInt(page);\n        }\n\n        if (page) {\n            pdfjsViewer.initialBookmark = `page=${page}`;\n        }\n\n        await pdfjsViewer.initializedPromise;\n        await pdfjsViewer.open(pdfSource);\n        await pdfjsViewer.pdfViewer.pagesPromise;\n\n        // See #19 - fixes other scroll modes not loading with initial bookmark\n        if (page && pdfjsViewer.page !== page) {\n            pdfjsViewer.page = page;\n        }\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    /**\n     * Get the currently viewed page.\n     */\n    public get page() {\n        return this._viewer.page;\n    }\n\n    /**\n     * Set the currently viewed page.\n     * @param value\n     */\n    public set page(value: number) {\n        this._viewer.page = value;\n    }\n\n    /**\n     * Returns the localized name of the window title.\n     * @override\n     */\n    public get title(): string {\n        return game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF');\n    }\n\n    /**\n     * Wait for the internal PDFjs viewer to be ready and usable.\n     */\n    protected getViewer(): Promise<PDFjsViewer> {\n        if (this._viewer) {\n            return Promise.resolve(this._viewer);\n        }\n\n        return new Promise<any>((resolve) => {\n            let timeout;\n            const returnOrWait = () => {\n                // If our window has finished initializing...\n                if (this._frame) {\n                    // If PDFjs has finished initializing...\n                    if (this._frame.contentWindow && this._frame.contentWindow['PDFViewerApplication']) {\n                        const viewer = this._frame.contentWindow['PDFViewerApplication'];\n\n                        resolve(viewer);\n                        return;\n                    }\n                }\n\n                // If any ifs fall through, try again in a few ms\n                timeout = setTimeout(returnOrWait, 5);\n            };\n            returnOrWait();\n        });\n    }\n\n    /**\n     * Wait for the internal PDFjs eventBus to be ready and usable.\n     */\n    protected getEventBus(): Promise<PDFjsEventBus> {\n        if (this._eventBus) {\n            return Promise.resolve(this._eventBus);\n        }\n\n        return new Promise<any>((resolve) => {\n            this.getViewer().then((viewer) => {\n                let timeout;\n                const returnOrWait = () => {\n                    if (viewer.eventBus) {\n                        resolve(viewer.eventBus);\n                        return;\n                    }\n                    timeout = setTimeout(returnOrWait, 5);\n                };\n                returnOrWait();\n            });\n        });\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Foundry Overrides\">\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n        buttons.unshift(BUTTON_GITHUB);\n        buttons.unshift(BUTTON_KOFI);\n        return buttons;\n    }\n\n    /**\n     * @internal\n     */\n    public async getData(options?: any): Promise<any> {\n        const data: any = await super.getData(options);\n        data.viewerFramePath = `${Settings.PATH_PDFJS}/web/viewer.html`;\n        return data;\n    }\n\n    public async activateListeners(html: JQuery): Promise<void> {\n        this.onViewerOpening();\n        super.activateListeners(html);\n\n        this._frame = html.parent().find('iframe.pdfViewer').get(0) as HTMLIFrameElement;\n        this.getViewer().then(async (viewer) => {\n            this._viewer = viewer;\n\n            const theme = Api.activeTheme;\n            const frameDocument = $(this._frame.contentDocument as Document);\n            frameDocument.on('click',() => this.bringToTop());\n            const head = frameDocument.find('head');\n            head.append($(`<link href=\"${getAbsoluteURL(theme.filePath)}\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">`));\n\n            this.onViewerOpened();\n\n            this.getEventBus().then((eventBus) => {\n                this._eventBus = eventBus;\n                this._eventBus.on('pagerendered', this.onPageRendered.bind(this));\n                this._eventBus.on('pagechanging', this.onPageChanging.bind(this));\n                this._eventBus.on('updateviewarea', this.onViewAreaUpdated.bind(this));\n                this._eventBus.on('scalechanging', this.onScaleChanging.bind(this));\n\n                this.onViewerReady();\n            });\n        });\n\n        // _getHeaderButtons does not permit title attributes used for tooltips...\n        $(html).parents().parents().find('.pdf-sheet-show-players').prop('title', game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersTitle'));\n    }\n\n    /**\n     * Close the application and un-register references to it within UI mappings\n     * This function returns a Promise which resolves once the window closing animation concludes\n     */\n    public async close(): Promise<void> {\n        this.onViewerClosing();\n\n        await super.close();\n\n        this.onViewerClosed();\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Events\">\n\n    /**\n     * Fires when the viewer window first starts opening\n     * @protected\n     */\n    protected onViewerOpening() {\n        this._eventStore.fire('viewerOpening', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully opened, but not yet ready\n     * @protected\n     */\n    protected onViewerOpened() {\n        this._eventStore.fire('viewerOpened', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully opened and is ready for use\n     * @protected\n     */\n    protected onViewerReady() {\n        this._eventStore.fire('viewerReady', this);\n    }\n\n    /**\n     * Fires when the viewer window first starts closing\n     * @protected\n     */\n    protected onViewerClosing() {\n        this._eventStore.fire('viewerClosing', this);\n    }\n\n    /**\n     * Fires when the viewer window is fully closed\n     * @protected\n     */\n    protected onViewerClosed() {\n        this._eventStore.fire('viewerClosed', this);\n    }\n\n    /**\n     * Occurs during scrolling when a page passes the breakpoint\n     * @param event\n     * @protected\n     */\n    protected onPageChanging(event) {\n        this._eventStore.fire('pageChanging', this, {\n            pageLabel: event.pageLabel,\n            pageNumber: event.pageNumber,\n        });\n    }\n\n    /**\n     * Occurs when a new page is loaded and rendered\n     * @param event\n     * @protected\n     */\n    protected onPageRendered(event) {\n        this._eventStore.fire('pageRendered', this, {\n            pageNumber: event.pageNumber,\n            pageLabel: event.source.pageLabel,\n            width: event.source.width,\n            height: event.source.height,\n            rotation: event.source.rotation,\n            scale: event.source.scale,\n            canvas: event.source.canvas,\n            div: event.source.div,\n            error: event.source.error,\n        });\n    }\n\n    /**\n     * Occurs when the zoom is changed or window scrolled\n     * @param event\n     * @protected\n     */\n    protected onViewAreaUpdated(event) {\n        this._eventStore.fire('viewAreaUpdated', this, {\n            top: event.location.top,\n            left: event.location.left,\n            pageNumber: event.location.pageNumber,\n            rotation: event.location.rotation,\n            scale: event.location.scale,\n        });\n    }\n\n    /**\n     * Occurs when the zoom is changed\n     * @param event\n     * @protected\n     */\n    protected onScaleChanging(event) {\n        this._eventStore.fire('scaleChanging', this, {\n            presetValue: event.presetValue,\n            scale: event.scale,\n        });\n    }\n\n    /**\n     * Register a callback to occur when an event fires. See individual events for descriptions and use {@link Api.DEBUG.EVENTS} to log and analyze events.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public on(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.on(eventName, callback);\n    }\n\n    /**\n     * Deregister an event that has been registered with {@link on} or {@link once}.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public off(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.off(eventName, callback);\n    }\n\n    /**\n     * Like {@link on} but only fires on the next occurrence.\n     * @param eventName\n     * @param callback\n     * @category Events\n     */\n    public once(eventName: PDFViewerEvent, callback: Function): void {\n        this._eventStore.once(eventName, callback);\n    }\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2022 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport BaseViewer from './BaseViewer';\nimport Settings from '../Settings';\nimport { PDFData } from '../common/types/PDFData';\nimport { Document } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/module.mjs';\nimport { AnyDocumentData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/data.mjs';\n\n// TODO: Move to wrapped input model to standardize inputs.\n//  Current code is insane and has too much branching.\n//  Factory should be used to create the wrapped inputs.\n// /**\n//  * Wraps an input to standardize operations over various HTML elements.\n//  * @internal\n//  */\n// abstract class FormInput<TElement extends HTMLElement, TValue> {\n//     protected _element: TElement;\n//     protected _name: string;\n//     protected _value: TValue;\n//\n//     public static IsOfType(element: HTMLElement) {\n//         return false;\n//     }\n//\n//     /**\n//      * Return the HTML element for this input.\n//      */\n//     public get element() {\n//         return this._element;\n//     }\n//\n//     /**\n//      * Return the name of this input.\n//      */\n//     public get name() {\n//         return this._name;\n//     }\n//\n//     protected constructor(name: string, element: TElement, value: TValue) {\n//         this._name = name;\n//         this._element = element;\n//         this._value = value;\n//\n//         $(this._element).attr('name', this._name);\n//     }\n//\n//     /**\n//      * Get the value of this input.\n//      */\n//     public abstract get value();\n//\n//     /**\n//      * Set the value of this input.\n//      * @param newValue The value to set to.\n//      */\n//     public abstract set value(newValue: TValue);\n//\n//     public abstract onInputChanged(event: JQuery.ChangeEvent);\n// }\n//\n// class InputInput extends FormInput<HTMLInputElement, string> {\n//     public static IsOfType(element: HTMLElement): element is HTMLInputElement {\n//         return element.tagName === 'INPUT';\n//     }\n//\n//     onInputChanged(event: JQuery.ChangeEvent) {}\n//\n//     public get value() {\n//         return this._value;\n//     }\n//\n//     public set value(newValue: string) {\n//         this._value = newValue;\n//     }\n// }\n\n/**\n * Handles base form fillable support, can be used as a stand alone form fillable viewer.\n * @module API\n */\nexport default class FillableViewer extends BaseViewer {\n    // <editor-fold desc=\"Static Properties\">\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.template = `${Settings.PATH_TEMPLATES}/app/viewer/fillable.html`;\n        return options;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Static Methods\">\n\n    /**\n     * Validate the data path of the key.\n     * @param path\n     */\n    protected static dataPathValid(path: string): boolean {\n        return !path.includes('_id');\n    }\n\n    /**\n     * Fix keys by removing invalid characters\n     * @param key\n     */\n    protected static fixKey(key: string): string {\n        if (key.startsWith(`data.`)) {\n            return key;\n        }\n\n        key = key.trim();\n        return key.replace(/\\s/g, '_');\n    }\n\n    /**\n     * Resolve a key path to the proper flattened key\n     * @param key\n     */\n    protected static resolveKeyPath(key: string): string {\n        if (key === 'name') return key;\n        if (key.startsWith(`data.`)) {\n            return this.fixKey(key);\n        }\n\n        return `flags.${Settings.MODULE_NAME}.${Settings.FLAGS_KEY.FORM_DATA}.${this.fixKey(key)}`;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Properties\">\n\n    protected document: Document<AnyDocumentData>; // TODO: Can type this properly.\n    protected pdfData: PDFData;\n    private container: JQuery;\n\n    // </editor-fold>\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    public constructor(document: Document<AnyDocumentData>, pdfData: PDFData, options?: Application.Options) {\n        super(options);\n\n        this.document = document;\n        this.pdfData = pdfData;\n\n        this.bindHooks();\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Getters & Setters\">\n\n    public get title(): string {\n        return this.document.name ?? super.title;\n    }\n\n    protected flattenEntity(): Record<string, string> {\n        const data = flattenObject({\n            name: this.document.name,\n            data: this.document.data['data'],\n            flags: this.document.data['flags'],\n        }) as Record<string, string>;\n\n        // Do not allow non-data keys to make it into the flat object\n        for (const key of Object.keys(data)) {\n            if (!FillableViewer.dataPathValid(key)) {\n                delete data[key];\n            }\n        }\n\n        return data;\n    }\n\n    // </editor-fold>\n    // <editor-fold desc=\"Instance Methods\">\n\n    protected bindHooks(): void {\n        if (this.document['uuid'].startsWith('Actor')) {\n            Hooks.on('updateActor', this.onUpdateEntity.bind(this));\n        } else if (this.document['uuid'].startsWith('Item')) {\n            Hooks.on('updateItem', this.onUpdateEntity.bind(this));\n        }\n    }\n\n    protected unbindHooks(): void {\n        if (this.document['uuid'].startsWith('Actor')) {\n            Hooks.off('updateActor', this.onUpdateEntity.bind(this));\n        } else if (this.document['uuid'].startsWith('Item')) {\n            Hooks.off('updateItem', this.onUpdateEntity.bind(this));\n        }\n    }\n\n    protected elementIsCheckbox(element: HTMLElement): element is HTMLInputElement {\n        return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n    }\n\n    protected elementIsInput(element: HTMLElement): element is HTMLInputElement | HTMLTextAreaElement {\n        return (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') && element.getAttribute('type') !== 'radio';\n    }\n\n    protected elementIsSelect(element: HTMLElement): element is HTMLSelectElement {\n        return element.tagName === 'SELECT';\n    }\n\n    protected elementIsRadio(element: HTMLElement): element is HTMLInputElement {\n        return element.tagName === 'INPUT' && element.getAttribute('type') === 'radio';\n    }\n\n    protected onPageRendered(event) {\n        const POLL_INTERVAL = 5;\n        const MAX_POLL_TIME = 250;\n        const container = $(event.source.div);\n\n        new Promise<any>((resolve, reject) => {\n            let timeout;\n            let totalWait = 0;\n            let elements: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n\n            const returnOrWait = () => {\n                elements = container.find('input, textarea, select') as JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;\n\n                if (elements.length > 0) {\n                    clearTimeout(timeout);\n                    resolve(elements);\n                    return;\n                } else if (totalWait < MAX_POLL_TIME) {\n                    totalWait += POLL_INTERVAL;\n                    timeout = setTimeout(returnOrWait, POLL_INTERVAL);\n                } else {\n                    reject({\n                        message: 'Page did not render in the allowed time.',\n                        event,\n                    });\n                }\n            };\n            returnOrWait();\n        })\n            .then((elements: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n                if (this.container === undefined || this.container.length === 0) {\n                    this.container = $(container.parents().find('#viewerContainer'));\n                }\n\n                this.initializeInputs(elements);\n\n                elements.on('change', this.onInputChanged.bind(this));\n\n                super.onPageRendered(event);\n            })\n            .catch((reason) => console.error(reason));\n    }\n\n    protected onInputChanged(event) {\n        const element = event.currentTarget;\n        let value = '';\n\n        let key = $(element).attr('name');\n        if (key === undefined) {\n            return;\n        }\n\n        key = FillableViewer.resolveKeyPath(key);\n\n        if (!FillableViewer.dataPathValid(key)) {\n            return;\n        }\n\n        if (this.elementIsCheckbox(element)) {\n            value = this.getCheckInputValue($(element));\n        } else if (this.elementIsInput(element)) {\n            value = this.getTextInputValue($(element as HTMLInputElement | HTMLTextAreaElement));\n        } else if (this.elementIsSelect(element)) {\n            value = this.getTextInputValue($(element as HTMLSelectElement));\n        } else if (this.elementIsRadio(element)) {\n            value = this.getRadioInputValue($(element));\n        }\n\n        this.update(\n            this.resolveDelta(this.flattenEntity(), {\n                [key]: value,\n            }),\n        ).then((result) => {\n            const elementsToUpdate = this.container.find('input, textarea, select');\n            this.initializeInputs(elementsToUpdate);\n        });\n    }\n\n    protected initializeInputs(elements: JQuery) {\n        const oldData = this.flattenEntity();\n        const newData = duplicate(oldData);\n\n        // Load data from sheet as initialization data\n        // Fill in existing data where it exists on the actor\n        let write = false;\n        for (const element of elements) {\n            let key = element.getAttribute('name');\n            if (key === null || !FillableViewer.dataPathValid(key)) {\n                continue;\n            }\n\n            key = FillableViewer.resolveKeyPath(key);\n\n            if (this.elementIsCheckbox(element)) {\n                write = this.initializeCheckInput($(element), key, newData) || write;\n            } else if (this.elementIsInput(element)) {\n                write = this.initializeTextInput($(element), key, newData) || write;\n            } else if (this.elementIsSelect(element)) {\n                write = this.initializeTextInput($(element), key, newData) || write;\n            } else if (this.elementIsRadio(element)) {\n                write = this.initializeRadioInput($(element), key, newData) || write;\n            } else {\n                console.error('Unsupported input type in PDF.');\n            }\n        }\n\n        if (write) {\n            this.update(this.resolveDelta(oldData, newData));\n        }\n    }\n\n    protected resolveDelta(oldData: Record<string, any>, newData: Record<string, any>) {\n        // Flags must be fully resolved\n        const delta = { ...flattenObject({ flags: this.document.data['flags'] }) };\n        for (const [key, newValue] of Object.entries(newData)) {\n            const oldValue = oldData[key];\n\n            // Arrays dont make sense on PDFs which are not dynamic\n            if (Array.isArray(newValue) || Array.isArray(oldValue)) {\n                delete delta[key];\n                continue;\n            }\n\n            // Skip matching values\n            if (oldValue !== undefined && newValue === oldValue) {\n                continue;\n            }\n\n            delta[key] = newValue;\n        }\n\n        return delta;\n    }\n\n    public refreshTitle(): void {\n        $(this.element).find('.window-title').text(this.title);\n    }\n\n    protected onUpdateEntity(\n        actor: Actor,\n        data: Partial<ConstructorParameters<typeof foundry.documents.BaseActor>[0]> & { _id: string },\n        options: { diff: boolean },\n        id: string,\n    ) {\n        if (data._id !== this.document.id) {\n            return;\n        }\n\n        const args = duplicate(data);\n        // @ts-ignore\n        delete args['_id'];\n\n        const elementsToUpdate = this.container.find('input, textarea, select');\n        this.initializeInputs(elementsToUpdate);\n        this.refreshTitle();\n    }\n\n    protected async update(delta: object) {\n        // data must be expanded to set properly\n        // TODO: Flags seem to be always set - delta needs checking\n        return this.document.update(expandObject(delta));\n    }\n\n    protected initializeTextInput(\n        input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,\n        key: string,\n        data: Record<string, string>,\n    ): boolean {\n        let value = data[key];\n        if (value === undefined) {\n            // If value does not exist on actor yet, load from sheet\n            const inputValue = input.val();\n\n            if (inputValue) {\n                // Actor changes were made\n                data[key] = inputValue.toString();\n                return true;\n            }\n        } else {\n            // Otherwise initialize input value to actor value\n            this.setTextInput(input, value);\n        }\n        return false;\n    }\n\n    protected initializeCheckInput(input: JQuery<HTMLInputElement>, key: string, data: Record<string, string>): boolean {\n        let value = data[key];\n        if (value === undefined) {\n            const inputValue = input.attr('checked') !== undefined;\n\n            // Actor changes were made\n            data[key] = inputValue.toString();\n            return true;\n        } else {\n            this.setCheckInput(input, value);\n        }\n        return false;\n    }\n\n    protected initializeRadioInput(input: JQuery<HTMLInputElement>, key: string, data: Record<string, string>): boolean {\n        let value = data[key];\n        if (value === undefined || value === '') {\n            data[key] = this.getRadioInputValue(input);\n            return true;\n        } else {\n            // if we're looking at the right radio for the group enable it\n            if (data[key] === input.attr('id')) {\n                this.setCheckInput(input, 'true');\n            } else {\n                this.setCheckInput(input, 'false');\n            }\n        }\n        return false;\n    }\n\n    protected setTextInput(input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>, value: string) {\n        input.val(value);\n    }\n\n    protected setCheckInput(input: JQuery<HTMLInputElement>, value: string) {\n        if (value === 'true') {\n            input.attr('checked', 'true');\n        } else {\n            input.removeAttr('checked');\n        }\n    }\n\n    protected getTextInputValue(input: JQuery<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): string {\n        const value = input.val();\n        if (!value) {\n            return '';\n        }\n\n        return value.toString().trim();\n    }\n\n    protected getCheckInputValue(input: JQuery<HTMLInputElement>): string {\n        return (window.getComputedStyle(input.get(0)!, ':before').content !== 'none').toString();\n    }\n\n    protected getRadioInputValue(input: JQuery<HTMLInputElement>): string {\n        const name = input.attr('name');\n        const elements = $(this.container).find(`input[name=\"${name}\"]`) as JQuery<HTMLElement>;\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements.get(i);\n            if (window.getComputedStyle(element!, ':before').content !== 'none') {\n                return element!.id;\n            }\n        }\n        return '';\n    }\n\n    async close(): Promise<any> {\n        // await this.setActorData(this.actorData);\n        if (this._viewer) {\n            await this._viewer.close();\n        }\n\n        this.unbindHooks();\n\n        return super.close();\n    }\n\n    // </editor-fold>\n}\n","/*\n * Copyright 2021 Andrew Cuccinello\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PDFData } from '../common/types/PDFData';\nimport BaseViewer from './BaseViewer';\nimport PlayerSelect from '../app/PlayerSelect';\nimport { getUserIdsExceptMe } from '../Util';\nimport SetViewEvent from '../socket/events/SetViewEvent';\nimport { PDFType } from '../common/types/PDFType';\n\n/**\n * The PDFoundry StaticViewer class opens PDFs and provides event hooks for observing the viewer.\n * Static viewers display a PDF but do not render or instantiate any fillable fields or their data.\n *\n * You cannot create a new instance of this class, you must do so with the API.\n *\n * See {@link Api.openPDF}, {@link Api.openPDFByCode}, {@link Api.openPDFByName}, {@link Api.openURL}\n *  which all return a promise which resolve with an instance of this class.\n * @module API\n */\nexport default class StaticViewer extends BaseViewer {\n    // <editor-fold desc=\"Properties\">\n\n    protected _pdfData: PDFData;\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Constructor & Initialization\">\n\n    constructor(pdfData?: PDFData, options?: Application.Options) {\n        super(options);\n\n        if (pdfData === undefined) {\n            pdfData = {\n                name: game.i18n.localize('PDFOUNDRY.VIEWER.ViewPDF'),\n                code: '',\n                offset: 0,\n                url: '',\n                type: PDFType.Static,\n                cache: false,\n            };\n        }\n\n        this._pdfData = pdfData;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Getters & Setters\">\n\n    /**\n     * Returns a copy of the PDFData this viewer is using.\n     * Changes to this data will not reflect in the viewer.\n     */\n    public get pdfData() {\n        return duplicate(this._pdfData);\n    }\n\n    public get title(): string {\n        let title = this._pdfData.name;\n        if (this._pdfData.code !== '') {\n            title = `${title} (${this._pdfData.code})`;\n        }\n        return title;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Foundry Overrides\">\n\n    protected _getHeaderButtons(): any[] {\n        const buttons = super._getHeaderButtons();\n\n        buttons.unshift({\n            class: 'pdf-sheet-show-players',\n            icon: 'fas fa-eye',\n            label: game.i18n.localize('PDFOUNDRY.VIEWER.ShowToPlayersText'),\n            onclick: (event) => this.showTo(event),\n        });\n\n        return buttons;\n    }\n\n    // </editor-fold>\n\n    // <editor-fold desc=\"Instance Methods\">\n\n    /**\n     * Show the current page to GMs.\n     */\n    protected showTo(event: MouseEvent) {\n        const pdfData = this.pdfData;\n        pdfData.offset = 0;\n\n        const ids = getUserIdsExceptMe();\n        if (event.shiftKey) {\n            new SetViewEvent(ids as string[], pdfData, this.page).emit();\n        } else {\n            new PlayerSelect(ids as string[], (filteredIds) => {\n                new SetViewEvent(filteredIds, pdfData, this.page).emit();\n            }).render(true);\n        }\n    }\n    // </editor-fold>\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvcGRmb3VuZHJ5L0FwaS50cyIsInNyYy9wZGZvdW5kcnkvTWFpbi50cyIsInNyYy9wZGZvdW5kcnkvU2V0dGluZ3MudHMiLCJzcmMvcGRmb3VuZHJ5L1NldHVwLnRzIiwic3JjL3BkZm91bmRyeS9VdGlsLnRzIiwic3JjL3BkZm91bmRyeS9hcHAvQWN0b3JTaGVldFNlbGVjdC50cyIsInNyYy9wZGZvdW5kcnkvYXBwL1BERkFjdG9yRGF0YUJyb3dzZXIudHMiLCJzcmMvcGRmb3VuZHJ5L2FwcC9QREZBY3RvclNoZWV0QWRhcHRlci50cyIsInNyYy9wZGZvdW5kcnkvYXBwL1BERkNvbmZpZy50cyIsInNyYy9wZGZvdW5kcnkvYXBwL1BsYXllclNlbGVjdC50cyIsInNyYy9wZGZvdW5kcnkvYXBwL1NlbGVjdEFwcC50cyIsInNyYy9wZGZvdW5kcnkvY2FjaGUvQ2FjaGVFcnJvci50cyIsInNyYy9wZGZvdW5kcnkvY2FjaGUvQ2FjaGVIZWxwZXIudHMiLCJzcmMvcGRmb3VuZHJ5L2NhY2hlL1BERkNhY2hlLnRzIiwic3JjL3BkZm91bmRyeS9jb21tYW5kcy9DaGF0Q29tbWFuZC50cyIsInNyYy9wZGZvdW5kcnkvY29tbWFuZHMvRml4TWlzc2luZ1R5cGVzLnRzIiwic3JjL3BkZm91bmRyeS9jb21tYW5kcy9QdXJnZUNhY2hlLnRzIiwic3JjL3BkZm91bmRyeS9jb21tb24vV2hpdGVsaXN0LnRzIiwic3JjL3BkZm91bmRyeS9jb21tb24vaGVscGVycy9ldmVudHMudHMiLCJzcmMvcGRmb3VuZHJ5L2NvbW1vbi9oZWxwZXJzL2hlYWRlci50cyIsInNyYy9wZGZvdW5kcnkvY29tbW9uL3R5cGVzL1BERlR5cGUudHMiLCJzcmMvcGRmb3VuZHJ5L2VucmljaGVyL0hUTUxFbnJpY2hlci50cyIsInNyYy9wZGZvdW5kcnkvZW5yaWNoZXIvVGlueU1DRVBsdWdpbi50cyIsInNyYy9wZGZvdW5kcnkvbWlncmF0ZS9NaWdyYXRlTGVnYWN5LnRzIiwic3JjL3BkZm91bmRyeS9zb2NrZXQvU29ja2V0LnRzIiwic3JjL3BkZm91bmRyeS9zb2NrZXQvZXZlbnRzL1ByZWxvYWRFdmVudC50cyIsInNyYy9wZGZvdW5kcnkvc29ja2V0L2V2ZW50cy9TZXRWaWV3RXZlbnQudHMiLCJzcmMvcGRmb3VuZHJ5L3NvY2tldC9ldmVudHMvU29ja2V0RXZlbnQudHMiLCJzcmMvcGRmb3VuZHJ5L3ZpZXdlci9BY3RvclZpZXdlci50cyIsInNyYy9wZGZvdW5kcnkvdmlld2VyL0Jhc2VWaWV3ZXIudHMiLCJzcmMvcGRmb3VuZHJ5L3ZpZXdlci9GaWxsYWJsZVZpZXdlci50cyIsInNyYy9wZGZvdW5kcnkvdmlld2VyL1N0YXRpY1ZpZXdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7Ozs7O0FBRUg7Ozs7O0dBS0c7QUFFSCxpQ0FVZ0I7QUFDaEIseUVBQWlEO0FBRWpELDBEQUFrQztBQUNsQyxnRUFBd0M7QUFFeEMsb0RBQWlEO0FBQ2pELDZFQUFxRDtBQVdyRDs7Ozs7OztHQU9HO0FBQ0ksS0FBSyxVQUFVLFdBQVcsQ0FBQyxNQUFrQixFQUFFLEdBQVcsRUFBRSxJQUF3QixFQUFFLEtBQWM7SUFDdkcsSUFBSSxLQUFLLEVBQUU7UUFDUCxNQUFNLFdBQVcsR0FBRyxNQUFNLGtCQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELDhDQUE4QztRQUM5QyxJQUFJLFdBQVcsRUFBRTtZQUNiLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEM7YUFBTTtZQUNILHFDQUFxQztZQUNyQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzdCLGtEQUFrRDtZQUNsRCxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFF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QUNILElBQUksc0JBQVksQ0FBQyxHQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDOUMsSUFBSSxzQkFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzdELENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQjtJQUNMLENBQUM7Q0FFSjtBQXBGRCwrQkFvRkMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKlxuICogQ29weXJpZ2h0IDIwMjEgQW5kcmV3IEN1Y2NpbmVsbG9cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgUERGb3VuZHJ5IEFQSS5cbiAqXG4gKiBZb3UgY2FuIGFjY2VzcyB0aGUgQVBJIHdpdGggYHVpLlBERm91bmRyeWAuXG4gKiBAbW9kdWxlZGVmaW5pdGlvbiBBUElcbiAqL1xuXG5pbXBvcnQge1xuICAgIGNhbk9wZW5QREYsXG4gICAgZGVsZXRlUERGRGF0YSxcbiAgICBnZXRBYnNvbHV0ZVVSTCxcbiAgICBnZXRQREZEYXRhLFxuICAgIGdldFJvdXRlUHJlZml4LFxuICAgIGdldFVzZXJJZHNFeGNlcHRNZSxcbiAgICBpc0VudGl0eVBERixcbiAgICBzZXRQREZEYXRhLFxuICAgIHZhbGlkYXRlQWJzb2x1dGVVUkwsXG59IGZyb20gJy4vVXRpbCc7XG5pbXBvcnQgU3RhdGljVmlld2VyIGZyb20gJy4vdmlld2VyL1N0YXRpY1ZpZXdlcic7XG5pbXBvcnQgeyBQREZEYXRhIH0gZnJvbSAnLi9jb21tb24vdHlwZXMvUERGRGF0YSc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi9TZXR0aW5ncyc7XG5pbXBvcnQgUERGQ2FjaGUgZnJvbSAnLi9jYWNoZS9QREZDYWNoZSc7XG5pbXBvcnQgQmFzZVZpZXdlciBmcm9tICcuL3ZpZXdlci9CYXNlVmlld2VyJztcbmltcG9ydCB7IFBERlR5cGUgfSBmcm9tICcuL2NvbW1vbi90eXBlcy9QREZUeXBlJztcbmltcG9ydCBGaWxsYWJsZVZpZXdlciBmcm9tICcuL3ZpZXdlci9GaWxsYWJsZVZpZXdlcic7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnQGxlYWd1ZS1vZi1mb3VuZHJ5LWRldmVsb3BlcnMvZm91bmRyeS12dHQtdHlwZXMvc3JjL2ZvdW5kcnkvY29tbW9uL3V0aWxzL21vZHVsZS5tanMnO1xuXG4vLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG5cbi8qKlxuICogQSBmdW5jdGlvbiB0byBwYXNzZWQgdG8ge0BsaW5rIEFwaS5maW5kUERGRGF0YX0gdG8gZmluZCB1c2VyIHNwZWNpZmllZCBQREYgZGF0YS5cbiAqIEBtb2R1bGUgQVBJXG4gKi9cbmV4cG9ydCB0eXBlIFBERlZhbGlkYXRvciA9IChkYXRhOiBQREZEYXRhKSA9PiBib29sZWFuO1xuXG4vKipcbiAqIE9wZW4gdGhlIHNwZWNpZmllZCBQREYgaW4gYSBwcm92aWRlZCB2aWV3ZXJcbiAqIEBwYXJhbSB2aWV3ZXJcbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBwYWdlXG4gKiBAcGFyYW0gY2FjaGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2hhbmRsZU9wZW4odmlld2VyOiBCYXNlVmlld2VyLCB1cmw6IHN0cmluZywgcGFnZTogbnVtYmVyIHwgdW5kZWZpbmVkLCBjYWNoZTogYm9vbGVhbikge1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjb25zdCBjYWNoZWRCeXRlcyA9IGF3YWl0IFBERkNhY2hlLmdldENhY2hlKHVybCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBjYWNoZSBoaXQgb3BlbiB0aGUgY2FjaGVkIGRhdGFcbiAgICAgICAgaWYgKGNhY2hlZEJ5dGVzKSB7XG4gICAgICAgICAgICBhd2FpdCB2aWV3ZXIub3BlbihjYWNoZWRCeXRlcywgcGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2Ugd2Ugc2hvdWxkIG9wZW4gaXQgYnkgdXJsXG4gICAgICAgICAgICBhd2FpdCB2aWV3ZXIub3Blbih1cmwsIHBhZ2UpO1xuICAgICAgICAgICAgLy8gQW5kIHdoZW4gdGhlIGRvd25sb2FkIGlzIGNvbXBsZXRlIHNldCB0aGUgY2FjaGVcbiAgICAgICAgICAgIHZpZXdlci5kb3dubG9hZCgpLnRoZW4oKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgUERGQ2FjaGUuc2V0Q2FjaGUodXJsLCBieXRlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHZpZXdlci5vcGVuKHVybCwgcGFnZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnMgcGFzc2VkIHRvIHRoZSB7QGxpbmsgQXBpLm9wZW5QREZ9IGZ1bmN0aW9uLlxuICogQG1vZHVsZSBBUElcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQREZPcGVuT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogVGhlIHBhZ2UgdG8gb3BlbiB0by4gSWYgbm90IHNwZWNpZmllZCwgUERGb3VuZHJ5IHdpbGwgYXR0ZW1wdCB0byBvcGVuIHRoZVxuICAgICAqICBsYXN0IHBhZ2UgdGhlIHVzZXIgd2FzIHZpZXdpbmcuXG4gICAgICovXG4gICAgcGFnZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJZiB5b3UncmUgb3BlbmluZyBhIGZpbGxhYmxlIHBkZiwgeW91IG11c3Qgc3BlY2lmeSBhbiBlbnRpdHkgZm9yIGRhdGEgc3RvcmFnZS5cbiAgICAgKi9cbiAgICBlbnRpdHk/OiBKb3VybmFsRW50cnk7XG59XG5cbi8qKlxuICogQSBkZWZpbml0aW9uIGZvciBhIHZpZXdlciB0aGVtZS5cbiAqIEBtb2R1bGUgQVBJXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmlld2VyVGhlbWUge1xuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZmlsZVBhdGg6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgUERGb3VuZHJ5IEFQSVxuICpcbiAqIFlvdSBjYW4gYWNjZXNzIHRoZSBBUEkgd2l0aCBgdWkuUERGb3VuZHJ5YC5cbiAqIEBtb2R1bGUgQVBJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XG4gICAgLyoqXG4gICAgICogRW5hYmxlIGFkZGl0aW9uYWwgZGVidWcgaW5mb3JtYXRpb24gZm9yIHRoZSBzcGVjaWZpZWQgY2F0ZWdvcnkuXG4gICAgICogQGNhdGVnb3J5IERlYnVnXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBERUJVRyA9IHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgZW5hYmxlcyB0aGUgbG9nZ2luZyBldmVudCBuYW1lcyBhbmQgYXJndW1lbnRzIHRvIGNvbnNvbGUuXG4gICAgICAgICAqL1xuICAgICAgICBFVkVOVFM6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBNZXRob2RzXCI+XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfYXZhaWxhYmxlVGhlbWVzOiB7IFtpZDogc3RyaW5nXTogVmlld2VyVGhlbWUgfSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgZnVsbCB0aGVtZSBkZWZpbml0aW9uIGJ5IGlkLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkIG9mIHRoZSB0aGVtZSB0byBsb29rdXAuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRUaGVtZShpZDogc3RyaW5nKTogVmlld2VyVGhlbWUgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIEFwaS5fYXZhaWxhYmxlVGhlbWVzW2lkXSA/PyBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudGx5IGVuYWJsZWQgdGhlbWUgaWQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXQgYWN0aXZlVGhlbWUoKTogVmlld2VyVGhlbWUge1xuICAgICAgICBjb25zdCBpZCA9IFNldHRpbmdzLmdldChTZXR0aW5ncy5TRVRUSU5HU19LRVkuVklFV0VSX1RIRU1FKSBhcyBzdHJpbmc7XG4gICAgICAgIHJldHVybiBBcGkuX2F2YWlsYWJsZVRoZW1lc1tpZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbWFwIG9mIHRoZW1lcyBhdmFpbGFibGUgZm9yIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldCBhdmFpbGFibGVUaGVtZXMoKSB7XG4gICAgICAgIGNvbnN0IHRoZW1lc01hcCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhBcGkuX2F2YWlsYWJsZVRoZW1lcykpIHtcbiAgICAgICAgICAgIHRoZW1lc01hcFtrZXldID0gQXBpLl9hdmFpbGFibGVUaGVtZXNba2V5XS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGVtZXNNYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSB0aGVtZSBmb3IgdXNlIHdpdGggUERGb3VuZHJ5LiBZb3UgbXVzdCByZWdpc3RlciBhIHRoZW1lIGJlZm9yZSBgcmVhZHlgLiBEbyBzbyBpbiBgc2V0dXBgLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkIG9mIHRoZSB0aGVtZS4gUHJvdmlkaW5nIGFuIGFscmVhZHkgZXhpc3RpbmcgaWQgd2lsbCBvdmVyLXdyaXRlIHRoZSBleGlzdGluZyB0aGVtZS5cbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgdXNlci1mYWNpbmcgZGlzcGxheSBuYW1lIG9mIHRoZSB0aGVtZS5cbiAgICAgKiBAcGFyYW0gZmlsZVBhdGggVGhlIHJlbGF0aXZlIHBhdGggb2YgdGhlIHRoZW1lIGNzcyBmaWxlXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWdpc3RlclRoZW1lKGlkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgICBpZiAoIWZpbGVQYXRoLmVuZHNXaXRoKCcuY3NzJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBvbmx5IHJlZ2lzdGVyIGNzcyBmaWxlcyBhcyB0aGVtZXMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXBpLl9hdmFpbGFibGVUaGVtZXMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFBERm91bmRyeSB0aGVtZSB3aXRoIGlkIG9mIFwiJHtpZH1cIiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQhYCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hdmFpbGFibGVUaGVtZXNbaWRdID0ge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZmlsZVBhdGgsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSB1bmNsYXNzaWZpZWQgdXRpbGl0eSBmdW5jdGlvbnMuXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGdldCBVdGlsaXRpZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRSb3V0ZVByZWZpeCxcbiAgICAgICAgICAgIGdldEFic29sdXRlVVJMLFxuICAgICAgICAgICAgdmFsaWRhdGVBYnNvbHV0ZVVSTCxcbiAgICAgICAgICAgIGlzRW50aXR5UERGLFxuICAgICAgICAgICAgZ2V0UERGRGF0YSxcbiAgICAgICAgICAgIHNldFBERkRhdGEsXG4gICAgICAgICAgICBkZWxldGVQREZEYXRhLFxuICAgICAgICAgICAgY2FuT3BlblBERixcbiAgICAgICAgICAgIGdldFVzZXJJZHNFeGNlcHRNZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldFBERkRhdGEgTWV0aG9kc1wiPlxuXG4gICAgLyoqXG4gICAgICogRmluZCBhIFBERiBjb250YWluaW5nIGpvdXJuYWwgZW50cnkgZnJvbSB0aGUgam91cm5hbHMgZGlyZWN0b3J5IHVzaW5nIGEgc3BlY2lmaWVkIGNvbXBhcmVyLlxuICAgICAqIEBwYXJhbSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gY29tcGFyZSBQREYgZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSBhbGxvd0ludmlzaWJsZSBJZiB0cnVlLCBQREZzIGhpZGRlbiBmcm9tIHRoZSBhY3RpdmUgdXNlciB3aWxsIGJlIHJldHVybmVkLlxuICAgICAqIEBjYXRlZ29yeSBQREZEYXRhXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBmaW5kUERGRW50aXR5KGNvbXBhcmVyOiBQREZWYWxpZGF0b3IsIGFsbG93SW52aXNpYmxlOiBib29sZWFuID0gdHJ1ZSk6IFJldHVyblR5cGU8Q29sbGVjdGlvbjxKb3VybmFsRW50cnk+WydmaW5kJ10+IHtcbiAgICAgICAgcmV0dXJuIGdhbWUhLmpvdXJuYWwhLmZpbmQoKGpvdXJuYWxFbnRyeTogSm91cm5hbEVudHJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzRW50aXR5UERGKGpvdXJuYWxFbnRyeSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBkZkRhdGEgPSBnZXRQREZEYXRhKGpvdXJuYWxFbnRyeSk7XG4gICAgICAgICAgICBpZiAocGRmRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKGpvdXJuYWxFbnRyeS52aXNpYmxlIHx8IGFsbG93SW52aXNpYmxlKSAmJiBjb21wYXJlcihwZGZEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZC4gQWxpYXMgZm9yIHtAbGluayBBcGkuZmluZFBERkRhdGF9IHdpdGggYSBjb21wYXJlciB0aGF0IHNlYXJjaGVzIGJ5IFBERiBDb2RlLlxuICAgICAqIEBwYXJhbSBjb2RlIFdoaWNoIGNvZGUgdG8gc2VhcmNoIGZvciBhIFBERiB3aXRoLlxuICAgICAqIEBwYXJhbSBhbGxvd0ludmlzaWJsZSBTZWUgYWxsb3dWaXNpYmxlIG9uIHtAbGluayBmaW5kUERGRW50aXR5fVxuICAgICAqIEBjYXRlZ29yeSBQREZEYXRhXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBmaW5kUERGRGF0YUJ5Q29kZShjb2RlOiBzdHJpbmcsIGFsbG93SW52aXNpYmxlOiBib29sZWFuID0gdHJ1ZSk6IFBERkRhdGEgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gQXBpLmZpbmRQREZEYXRhKChkYXRhOiBQREZEYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5jb2RlID09PSBjb2RlO1xuICAgICAgICB9LCBhbGxvd0ludmlzaWJsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGVscGVyIG1ldGhvZC4gQWxpYXMgZm9yIHtAbGluayBBcGkuZmluZFBERkRhdGF9IHdpdGggYSBjb21wYXJlciB0aGF0IHNlYXJjaGVzIGJ5IFBERiBOYW1lLlxuICAgICAqIEBwYXJhbSBuYW1lIFdoaWNoIG5hbWUgdG8gc2VhcmNoIGZvciBhIFBERiB3aXRoLlxuICAgICAqIEBwYXJhbSBjYXNlSW5zZW5zaXRpdmUgSWYgYSBjYXNlIGluc2Vuc2l0aXZlIHNlYXJjaCBzaG91bGQgYmUgZG9uZS5cbiAgICAgKiBAcGFyYW0gYWxsb3dJbnZpc2libGUgU2VlIGFsbG93VmlzaWJsZSBvbiB7QGxpbmsgZmluZFBERkVudGl0eX1cbiAgICAgKiBAY2F0ZWdvcnkgUERGRGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZmluZFBERkRhdGFCeU5hbWUobmFtZTogc3RyaW5nLCBjYXNlSW5zZW5zaXRpdmU6IGJvb2xlYW4gPSB0cnVlLCBhbGxvd0ludmlzaWJsZTogYm9vbGVhbiA9IHRydWUpOiBQREZEYXRhIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGNhc2VJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIEFwaS5maW5kUERGRGF0YSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSwgYWxsb3dJbnZpc2libGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEFwaS5maW5kUERGRGF0YSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLm5hbWUgPT09IG5hbWU7XG4gICAgICAgICAgICB9LCBhbGxvd0ludmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhIFBERiBlbnRpdHkgY3JlYXRlZCBieSB0aGUgdXNlciBhbmQgY29uc3RydWN0cyBhIHtAbGluayBQREZEYXRhfSBvYmplY3Qgb2YgdGhlIHJlc3VsdGluZyBQREYncyBkYXRhLlxuICAgICAqIEBwYXJhbSBjb21wYXJlciBBIGNvbXBhcmlzb24gZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIGFsbG93SW52aXNpYmxlIFNlZSBhbGxvd1Zpc2libGUgb24ge0BsaW5rIGZpbmRQREZFbnRpdHl9XG4gICAgICogQGNhdGVnb3J5IFBERkRhdGFcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZpbmRQREZEYXRhKGNvbXBhcmVyOiBQREZWYWxpZGF0b3IsIGFsbG93SW52aXNpYmxlOiBib29sZWFuID0gdHJ1ZSk6IFBERkRhdGEgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBwZGYgPSB0aGlzLmZpbmRQREZFbnRpdHkoY29tcGFyZXIsIGFsbG93SW52aXNpYmxlKTtcbiAgICAgICAgaWYgKHBkZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRQREZEYXRhKHBkZik7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiT3BlblBERiBNZXRob2RzXCI+XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIHRoZSBQREYgd2l0aCB0aGUgcHJvdmlkZWQgY29kZSB0byB0aGUgc3BlY2lmaWVkIHBhZ2UuXG4gICAgICogSGVscGVyIGZvciB7QGxpbmsgZmluZFBERkRhdGFCeUNvZGV9IHRoZW4ge0BsaW5rIG9wZW5QREZ9LlxuICAgICAqIEBjYXRlZ29yeSBPcGVuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBvcGVuUERGQnlDb2RlKGNvZGU6IHN0cmluZywgb3B0aW9ucz86IFBERk9wZW5PcHRpb25zKTogUHJvbWlzZTxCYXNlVmlld2VyPiB7XG4gICAgICAgIGNvbnN0IHBkZiA9IHRoaXMuZmluZFBERkRhdGFCeUNvZGUoY29kZSk7XG5cbiAgICAgICAgaWYgKHBkZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkVSUk9SLk5vUERGV2l0aENvZGUnKTtcblxuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcGVuUERGKHBkZiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgUERGIHdpdGggdGhlIHByb3ZpZGVkIGNvZGUgdG8gdGhlIHNwZWNpZmllZCBwYWdlLlxuICAgICAqIEhlbHBlciBmb3Ige0BsaW5rIGZpbmRQREZEYXRhQnlDb2RlfSB0aGVuIHtAbGluayBvcGVuUERGfS5cbiAgICAgKiBAY2F0ZWdvcnkgT3BlblxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgb3BlblBERkJ5TmFtZShuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBQREZPcGVuT3B0aW9ucyk6IFByb21pc2U8QmFzZVZpZXdlcj4ge1xuICAgICAgICBjb25zdCBwZGYgPSB0aGlzLmZpbmRQREZEYXRhQnlOYW1lKG5hbWUpO1xuXG4gICAgICAgIGlmIChwZGYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkVSUk9SLk5vUERGV2l0aE5hbWUnKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub3BlblBERihwZGYsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIHByb3ZpZGVkIHtAbGluayBQREZEYXRhfSB0byB0aGUgc3BlY2lmaWVkIHBhZ2UuXG4gICAgICogQHBhcmFtIHBkZiBUaGUgUERGIHRvIG9wZW4uIFNlZSB7QGxpbmsgQXBpLmZpbmRQREZEYXRhfS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgc3BlY2lmaWVkIG9wdGlvbnMgZm9yIFBERnMuXG4gICAgICogQGNhdGVnb3J5IE9wZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIG9wZW5QREYocGRmOiBQREZEYXRhLCBvcHRpb25zPzogUERGT3Blbk9wdGlvbnMpOiBQcm9taXNlPEJhc2VWaWV3ZXI+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHsgdXJsLCBvZmZzZXQsIGNhY2hlIH0gPSBwZGY7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlSW50KG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF2YWxpZGF0ZUFic29sdXRlVVJMKHVybCkpIHtcbiAgICAgICAgICAgIHVybCA9IGdldEFic29sdXRlVVJMKHVybCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5wYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucGFnZSA9IG9wdGlvbnMucGFnZSArIG9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2aWV3ZXI6IEJhc2VWaWV3ZXI7XG5cbiAgICAgICAgc3dpdGNoIChwZGYudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQREZUeXBlLlN0YXRpYzpcbiAgICAgICAgICAgICAgICB2aWV3ZXIgPSBuZXcgU3RhdGljVmlld2VyKHBkZik7XG4gICAgICAgICAgICAgICAgdmlld2VyLnJlbmRlcih0cnVlKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IF9oYW5kbGVPcGVuKHZpZXdlciwgdXJsLCBvcHRpb25zLnBhZ2UsIGNhY2hlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUERGVHlwZS5GaWxsYWJsZTpcbiAgICAgICAgICAgICAgICBpZiAoIShvcHRpb25zLmVudGl0eSBpbnN0YW5jZW9mIEpvdXJuYWxFbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm92aWRlZCBlbnRpdHkgd2FzIG5vdCBhIGpvdXJuYWwgZW50cnkuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmlld2VyID0gbmV3IEZpbGxhYmxlVmlld2VyKG9wdGlvbnMuZW50aXR5LCBwZGYpO1xuICAgICAgICAgICAgICAgIHZpZXdlci5yZW5kZXIodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBfaGFuZGxlT3Blbih2aWV3ZXIsIHVybCwgb3B0aW9ucy5wYWdlLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBERlR5cGUuQWN0b3I6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3RvciBzaGVldHMgY2FuIG9ubHkgYmUgb3BlbmVkIHRocm91Z2ggdGhlIGFjdG9yLnNoZWV0IGFjY2Vzc29yLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiBhIFVSTCBhcyBhIHN0YXRpYyBQREYuIEZvciBmb3JtIGZpbGxhYmxlIFBERnMgeW91IG11c2UgdXNlIHtAbGluayBBcGkub3BlblBERn1cbiAgICAgKiBAcGFyYW0gdXJsIFRoZSBVUkwgdG8gb3BlbiAobXVzdCBiZSBhYnNvbHV0ZSkuXG4gICAgICogQHBhcmFtIHBhZ2UgV2hpY2ggcGFnZSB0byBvcGVuIHRvLiBNdXN0IGJlID49IDEuXG4gICAgICogQHBhcmFtIGNhY2hlIElmIFVSTCBiYXNlZCBjYWNoaW5nIHNob3VsZCBiZSB1c2VkLlxuICAgICAqIEBjYXRlZ29yeSBPcGVuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBvcGVuVVJMKHVybDogc3RyaW5nLCBwYWdlOiBudW1iZXIgPSAxLCBjYWNoZTogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPEJhc2VWaWV3ZXI+IHtcbiAgICAgICAgaWYgKGlzTmFOKHBhZ2UpIHx8IHBhZ2UgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYWdlIG11c3QgYmUgPiAwLCBidXQgJHtwYWdlfSB3YXMgZ2l2ZW4uYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbGlkYXRlQWJzb2x1dGVVUkwodXJsKSkge1xuICAgICAgICAgICAgdXJsID0gZ2V0QWJzb2x1dGVVUkwodXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZpZXdlciA9IG5ldyBTdGF0aWNWaWV3ZXIoKTtcbiAgICAgICAgdmlld2VyLnJlbmRlcih0cnVlKTtcblxuICAgICAgICBhd2FpdCBfaGFuZGxlT3Blbih2aWV3ZXIsIHVybCwgcGFnZSwgY2FjaGUpO1xuXG4gICAgICAgIHJldHVybiB2aWV3ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHVzZXIgbWFudWFsIHRvIHRoZSBhY3RpdmUgdXNlci5cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2hvd0hlbHAoKTogUHJvbWlzZTxCYXNlVmlld2VyPiB7XG4gICAgICAgIGF3YWl0IFNldHRpbmdzLnNldChTZXR0aW5ncy5TRVRUSU5HU19LRVkuSEVMUF9TRUVOLCB0cnVlKTtcblxuICAgICAgICBjb25zdCBsYW5nID0gZ2FtZS5pMThuLmxhbmc7XG4gICAgICAgIGxldCBtYW51YWxQYXRoID0gZ2V0QWJzb2x1dGVVUkwoYCR7U2V0dGluZ3MuUEFUSF9BU1NFVFN9L21hbnVhbC8ke2xhbmd9L21hbnVhbC5wZGZgKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBtYW51YWxFeGlzdHMgPSBhd2FpdCBzcmNFeGlzdHMobWFudWFsUGF0aCk7XG5cbiAgICAgICAgaWYgKCFtYW51YWxFeGlzdHMpIHtcbiAgICAgICAgICAgIG1hbnVhbFBhdGggPSBnZXRBYnNvbHV0ZVVSTChgJHtTZXR0aW5ncy5QQVRIX0FTU0VUU30vbWFudWFsL2VuL21hbnVhbC5wZGZgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBkZkRhdGE6IFBERkRhdGEgPSB7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5NQU5VQUwuTmFtZScpLFxuICAgICAgICAgICAgdHlwZTogUERGVHlwZS5TdGF0aWMsXG4gICAgICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgIHVybDogbWFudWFsUGF0aCxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQXBpLm9wZW5QREYocGRmRGF0YSk7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBTZXR1cCBmcm9tICcuL1NldHVwJztcblxuU2V0dXAucnVuKCk7XG4iLCIvKiBDb3B5cmlnaHQgMjAyMCBBbmRyZXcgQ3VjY2luZWxsb1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgQXBpIGZyb20gJy4vQXBpJztcblxuLyoqXG4gKiBJbnRlcm5hbCBzZXR0aW5ncyBhbmQgaGVscGVyIG1ldGhvZHMgZm9yIFBERm91bmRyeS5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXR0aW5ncyB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBNT0RVTEVfTkFNRTogc3RyaW5nID0gJ3BkZm91bmRyeSc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBQQVRIX01PRFVMRSgpIHtcbiAgICAgICAgcmV0dXJuIGBtb2R1bGVzLyR7U2V0dGluZ3MuTU9EVUxFX05BTUV9YDtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUEFUSF9BU1NFVFMoKSB7XG4gICAgICAgIHJldHVybiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vYXNzZXRzYDtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUEFUSF9MT0NBTEUoKSB7XG4gICAgICAgIHJldHVybiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vbG9jYWxlYDtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUEFUSF9URU1QTEFURVMoKSB7XG4gICAgICAgIHJldHVybiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGVtcGxhdGVzYDtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUEFUSF9QREZKUygpIHtcbiAgICAgICAgcmV0dXJuIGAke1NldHRpbmdzLlBBVEhfTU9EVUxFfS9wZGZqc2A7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgU09DS0VUX05BTUUoKSB7XG4gICAgICAgIHJldHVybiBgbW9kdWxlLiR7U2V0dGluZ3MuTU9EVUxFX05BTUV9YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENTU19DTEFTUyA9ICdwZGYtYXBwJztcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUVOVV9LRVkgPSAnUERGb3VuZHJ5U2V0dGluZ3MnO1xuXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTRVRUSU5HU19LRVkgPSB7XG4gICAgICAgIEVYSVNUSU5HX1ZJRVdFUjogJ1Nob3dJbkV4aXN0aW5nVmlld2VyJyxcbiAgICAgICAgQ0FDSEVfU0laRTogJ0NhY2hlU2l6ZScsXG4gICAgICAgIFZJRVdFUl9USEVNRTogJ1ZpZXdlclRoZW1lJyxcbiAgICAgICAgSEVMUF9TRUVOOiAnSGVscFNlZW4nLFxuICAgICAgICBEQVRBX1ZFUlNJT046ICdEYXRhVmVyc2lvbicsXG4gICAgfTtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZMQUdTX0tFWSA9IHtcbiAgICAgICAgLy8gUERGIERhdGFcbiAgICAgICAgUERGX0RBVEE6ICdQREZEYXRhJyxcbiAgICAgICAgLy8gQWN0b3IgU2hlZXRzXG4gICAgICAgIEZPUk1fREFUQTogJ0Zvcm1EYXRhJyxcbiAgICAgICAgU0hFRVRfSUQ6ICdBY3RvclNoZWV0JyxcbiAgICAgICAgLy8gQ2FudmFzIE5vdGVzXG4gICAgICAgIFBBR0VfTlVNQkVSOiAnUGFnZU51bWJlcicsXG4gICAgfTtcblxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgU2V0dGluZ3MucmVnaXN0ZXIoU2V0dGluZ3MuU0VUVElOR1NfS0VZLkNBQ0hFX1NJWkUsIHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLlNFVFRJTkdTLkNhY2hlU2l6ZU5hbWUnKSxcbiAgICAgICAgICAgIGhpbnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLlNFVFRJTkdTLkNhY2hlU2l6ZUhpbnQnKSxcbiAgICAgICAgICAgIHNjb3BlOiAndXNlcicsXG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICBkZWZhdWx0OiAyNTYsXG4gICAgICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgICAgICBvbkNoYW5nZTogYXN5bmMgKG1iKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFNldHRpbmdzLmdldChTZXR0aW5ncy5TRVRUSU5HU19LRVkuQ0FDSEVfU0laRSkgPT09IG1iKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtYiA9IE1hdGgucm91bmQobWIpO1xuICAgICAgICAgICAgICAgIG1iID0gTWF0aC5tYXgobWIsIDY0KTtcbiAgICAgICAgICAgICAgICBtYiA9IE1hdGgubWluKG1iLCAxMDI0KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBTZXR0aW5ncy5zZXQoU2V0dGluZ3MuU0VUVElOR1NfS0VZLkNBQ0hFX1NJWkUsIG1iKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFNldHRpbmdzLnJlZ2lzdGVyKFNldHRpbmdzLlNFVFRJTkdTX0tFWS5FWElTVElOR19WSUVXRVIsIHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLlNFVFRJTkdTLlNob3dJbkV4aXN0aW5nVmlld2VyTmFtZScpLFxuICAgICAgICAgICAgaGludDogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuU0VUVElOR1MuU2hvd0luRXhpc3RpbmdWaWV3ZXJIaW50JyksXG4gICAgICAgICAgICBzY29wZTogJ3VzZXInLFxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBjb25maWc6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFNldHRpbmdzLnJlZ2lzdGVyKFNldHRpbmdzLlNFVFRJTkdTX0tFWS5WSUVXRVJfVEhFTUUsIHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLlNFVFRJTkdTLlZpZXdlclRoZW1lTmFtZScpLFxuICAgICAgICAgICAgaGludDogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuU0VUVElOR1MuVmlld2VyVGhlbWVIaW50JyksXG4gICAgICAgICAgICBzY29wZTogJ3VzZXInLFxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogJ2ZhbnRhc3knLFxuICAgICAgICAgICAgY2hvaWNlczogQXBpLmF2YWlsYWJsZVRoZW1lcyxcbiAgICAgICAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgU2V0dGluZ3MucmVnaXN0ZXIoU2V0dGluZ3MuU0VUVElOR1NfS0VZLkhFTFBfU0VFTiwge1xuICAgICAgICAgICAgc2NvcGU6ICd1c2VyJyxcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZzogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFNldHRpbmdzLnJlZ2lzdGVyKFNldHRpbmdzLlNFVFRJTkdTX0tFWS5EQVRBX1ZFUlNJT04sIHtcbiAgICAgICAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY29uZmlnOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JhcHBlciBhcm91bmQgZ2FtZS5zZXR0aW5ncy5yZWdpc3Rlci4gRW5zdXJlcyBzY29wZSBpcyBjb3JyZWN0LlxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVnaXN0ZXIoa2V5OiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgICAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKFNldHRpbmdzLk1PRFVMRV9OQU1FLCBrZXksIGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGdhbWUuc2V0dGluZ3MuZ2V0LiBFbnN1cmVzIHNjb3BlIGlzIGNvcnJlY3QuXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldChTZXR0aW5ncy5NT0RVTEVfTkFNRSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcmFwcGVyIGFyb3VuZCBnYW1lLnNldHRpbmdzLnNldC4gRW5zdXJlcyBzY29wZSBpcyBjb3JyZWN0LlxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICByZXR1cm4gZ2FtZS5zZXR0aW5ncy5zZXQoU2V0dGluZ3MuTU9EVUxFX05BTUUsIGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRBYnNvbHV0ZVVSTCwgZ2V0UERGRGF0YSwgaXNFbnRpdHlQREYgfSBmcm9tICcuL1V0aWwnO1xuaW1wb3J0IFByZWxvYWRFdmVudCBmcm9tICcuL3NvY2tldC9ldmVudHMvUHJlbG9hZEV2ZW50JztcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gJy4vc29ja2V0L1NvY2tldCc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi9TZXR0aW5ncyc7XG5pbXBvcnQgUERGQ2FjaGUgZnJvbSAnLi9jYWNoZS9QREZDYWNoZSc7XG5pbXBvcnQgQXBpLCB7IFZpZXdlclRoZW1lIH0gZnJvbSAnLi9BcGknO1xuaW1wb3J0IEhUTUxFbnJpY2hlciBmcm9tICcuL2VucmljaGVyL0hUTUxFbnJpY2hlcic7XG5pbXBvcnQgVGlueU1DRVBsdWdpbiBmcm9tICcuL2VucmljaGVyL1RpbnlNQ0VQbHVnaW4nO1xuaW1wb3J0IFBERkFjdG9yU2hlZXRBZGFwdGVyIGZyb20gJy4vYXBwL1BERkFjdG9yU2hlZXRBZGFwdGVyJztcbmltcG9ydCB7IFBERlR5cGUgfSBmcm9tICcuL2NvbW1vbi90eXBlcy9QREZUeXBlJztcbmltcG9ydCB7IFBERkNvbmZpZyB9IGZyb20gJy4vYXBwL1BERkNvbmZpZyc7XG5pbXBvcnQgRml4TWlzc2luZ1R5cGVzIGZyb20gJy4vY29tbWFuZHMvRml4TWlzc2luZ1R5cGVzJztcbmltcG9ydCBQdXJnZUNhY2hlIGZyb20gJy4vY29tbWFuZHMvUHVyZ2VDYWNoZSc7XG5pbXBvcnQgeyBsZWdhY3lNaWdyYXRpb25SZXF1aXJlZCwgbWlncmF0ZUxlZ2FjeSB9IGZyb20gJy4vbWlncmF0ZS9NaWdyYXRlTGVnYWN5JztcblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyB1c2VkIGZvciBzZXR0aW5nIHVwIHRoZSBBUEkgJiBzeXN0ZW0gc3RhdGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dXAge1xuICAgIC8qKlxuICAgICAqIFJ1biBzZXR1cCB0YXNrcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJ1bigpIHtcbiAgICAgICAgaWYgKGhhc1Byb3BlcnR5KHVpLCAnUERGb3VuZHJ5JykpIHtcbiAgICAgICAgICAgIEhvb2tzLm9uY2UoJ2luaXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGQgPSBuZXcgRGlhbG9nKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdQREZvdW5kcnk6IEVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBqdXN0aWZ5OyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aDEgc3R5bGU9XCJjb2xvcjogcmVkXCI+UERGb3VuZHJ5IElzIEFscmVhZHkgSW5zdGFsbGVkPC9oMT4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwIHN0eWxlPVwiZm9udC13ZWlnaHQ6IGJvbGRcIj5Zb3UgaGF2ZSBlbmFibGVkIHRoZSBtb2R1bGUgdmVyc2lvbiBvZiBQREZvdW5kcnksIGJ1dCB0aGUgc3lzdGVtIHlvdSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJlIHVzaW5nIGFscmVhZHkgaGFzIFBERm91bmRyeSBpbnN0YWxsZWQuPC9wPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHA+MS4gSWYgeW91IGluc3RhbGxlZCBQREZvdW5kcnkgdXNpbmcgYSBuaWdodGx5IGJ1aWxkLCB1bmluc3RhbGwgYW5kIHJlaW5zdGFsbCB5b3VyIHN5c3RlbSB3aXRoIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCJHYW1lIFN5c3RlbXNcIiBtZW51IGluIEZvdW5kcnkgVlRUIHNldHVwLCBvciBzaW1wbHkgdXBkYXRlIHRoZSBzeXN0ZW0gaWYgYW4gdXBkYXRlIGlzIGF2YWlsYWJsZS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1lvdXIgd29ybGQgZGF0YSBpcyBzYWZlIGVpdGhlciB3YXkuPC9wPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHA+Mi4gSWYgdGhlIHN5c3RlbSB5b3UgYXJlIHVzaW5nIGNvbWVzIHdpdGggUERGb3VuZHJ5IGFscmVhZHkgaW5zdGFsbGVkIC0geW91IG11c3QgdXNlIHRoYXQgdmVyc2lvbiBvZiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUERGb3VuZHJ5IGJ5IGRpc2FibGluZyB0aGUgbW9kdWxlIHZlcnNpb24uPC9wPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHAgc3R5bGU9XCJmb250LXdlaWdodDogYm9sZFwiPlRoZSBtb2R1bGUgdmVyc2lvbiBvZiBQREZvdW5kcnkgd2lsbCBub3QgZnVuY3Rpb24uPC9wPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcnKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHt9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGQucmVuZGVyKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWdpc3RlciB0aGUgUERGb3VuZHJ5IEFQaSBvbiB0aGUgVUlcbiAgICAgICAgdWlbJ1BERm91bmRyeSddID0gQXBpO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBQREYgc2hlZXQgd2l0aCB0aGUgY2xhc3MgcGlja2VyXG4gICAgICAgIFNldHVwLnNldHVwU2hlZXRzKCk7XG5cbiAgICAgICAgLy8gU2V0dXAgdGFza3MgcmVxdWlyaW5nIHRoYXQgRlZUVCBpcyBsb2FkZWRcbiAgICAgICAgSG9va3Mub25jZSgncmVhZHknLCBTZXR1cC5sYXRlUnVuKTtcblxuICAgICAgICBIb29rcy5vbigncmVuZGVySm91cm5hbERpcmVjdG9yeScsIFNldHVwLmNyZWF0ZUpvdXJuYWxCdXR0b24pO1xuICAgICAgICBIb29rcy5vbigncmVuZGVySm91cm5hbERpcmVjdG9yeScsIFNldHVwLmhvb2tMaXN0SXRlbXMpO1xuXG4gICAgICAgIC8vIGdldEl0ZW1EaXJlY3RvcnlFbnRyeUNvbnRleHQgLSBTZXR1cCBjb250ZXh0IG1lbnUgZm9yICdPcGVuIFBERicgbGlua3NcbiAgICAgICAgSG9va3Mub24oJ2dldEpvdXJuYWxEaXJlY3RvcnlFbnRyeUNvbnRleHQnLCBTZXR1cC5nZXRKb3VybmFsQ29udGV4dE9wdGlvbnMpO1xuXG4gICAgICAgIC8vIENvZ3doZWVsIHNldHRpbmdzIG1lbnVcbiAgICAgICAgSG9va3Mub24oJ3JlbmRlclNldHRpbmdzJywgU2V0dXAub25SZW5kZXJTZXR0aW5ncyk7XG5cbiAgICAgICAgLy8gTG9hZCBiYXNlIHRoZW1lc1xuICAgICAgICBTZXR1cC5yZWdpc3RlclRoZW1lcygpO1xuXG4gICAgICAgIC8vIFBhdGNoIHRoZSBUZXh0RW5yaWNoZXIgd2l0aCBhIHByb3h5XG4gICAgICAgIEhUTUxFbnJpY2hlci5wYXRjaEVucmljaCgpO1xuICAgICAgICAvLyBCaW5kIGNsaWNrIGhhbmRsZXJzIHRvIHJlbmRlcmVyc1xuICAgICAgICBIb29rcy5vbigncmVuZGVyQXBwbGljYXRpb24nLCAoYXBwOiBBcHBsaWNhdGlvbiwgaHRtbDogSlF1ZXJ5KSA9PiBIVE1MRW5yaWNoZXIuYmluZFJpY2hUZXh0TGlua3MoaHRtbCkpO1xuICAgICAgICBIb29rcy5vbigncmVuZGVySXRlbVNoZWV0JywgKGFwcDogQXBwbGljYXRpb24sIGh0bWw6IEpRdWVyeSkgPT4gSFRNTEVucmljaGVyLmJpbmRSaWNoVGV4dExpbmtzKGh0bWwpKTtcbiAgICAgICAgSG9va3Mub24oJ3JlbmRlckFjdG9yU2hlZXQnLCAoYXBwOiBBcHBsaWNhdGlvbiwgaHRtbDogSlF1ZXJ5KSA9PiBIVE1MRW5yaWNoZXIuYmluZFJpY2hUZXh0TGlua3MoaHRtbCkpO1xuICAgICAgICBIb29rcy5vbigncmVuZGVyQ2hhdE1lc3NhZ2UnLCAoYXBwOiBBcHBsaWNhdGlvbiwgaHRtbDogSlF1ZXJ5KSA9PiBIVE1MRW5yaWNoZXIuYmluZFJpY2hUZXh0TGlua3MoaHRtbCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENPTU1BTkRTID0gW25ldyBGaXhNaXNzaW5nVHlwZXMoKSwgbmV3IFB1cmdlQ2FjaGUoKV07XG5cbiAgICAvKipcbiAgICAgKiBMYXRlIHNldHVwIHRhc2tzIGhhcHBlbiB3aGVuIHRoZSBzeXN0ZW0gaXMgbG9hZGVkXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBsYXRlUnVuKCkge1xuICAgICAgICAvLyBSZWdpc3RlciBzb2NrZXQgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgU29ja2V0LmluaXRpYWxpemUoKTtcblxuICAgICAgICAvLyBDaGF0IGNvbW1hbmQgcHJvY2Vzc2luZ1xuICAgICAgICBIb29rcy5vbignY2hhdE1lc3NhZ2UnLCBTZXR1cC5vbkNoYXRNZXNzYWdlKTtcblxuICAgICAgICAvLyBDYW52YXMgbm90ZXMgcHJvY2Vzc2luZ1xuICAgICAgICBIb29rcy5vbigncmVuZGVyTm90ZUNvbmZpZycsIFNldHVwLm9uTm90ZUNvbmZpZyk7XG4gICAgICAgIEhvb2tzLm9uKCdob3Zlck5vdGUnLCBTZXR1cC5vbk5vdGVIb3Zlcik7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgVGlueU1DRSBkcmFnICsgZHJvcCBldmVudHNcbiAgICAgICAgVGlueU1DRVBsdWdpbi5SZWdpc3RlcigpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBzZXR0aW5nc1xuICAgICAgICAgICAgU2V0dGluZ3MuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgYXdhaXQgUERGQ2FjaGUuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgICAgICBpZiAobGVnYWN5TWlncmF0aW9uUmVxdWlyZWQoKSkge1xuICAgICAgICAgICAgICAgIG1pZ3JhdGVMZWdhY3koKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3Muc2V0KFNldHRpbmdzLlNFVFRJTkdTX0tFWS5EQVRBX1ZFUlNJT04sICd2MC42LjAnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUERGb3VuZHJ5IGlzIHJlYWR5XG4gICAgICAgICAgICAvLyBTZXR1cC51c2VyTG9naW4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIFBERiBzaGVldCBhbmQgdW5yZWdpc3RlciBpbnZhbGlkIHNoZWV0IHR5cGVzIGZyb20gaXQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBzZXR1cFNoZWV0cygpIHtcbiAgICAgICAgLy8gUmVnaXN0ZXIgYWN0b3IgXCJzaGVldFwiXG4gICAgICAgIEFjdG9ycy5yZWdpc3RlclNoZWV0KFNldHRpbmdzLk1PRFVMRV9OQU1FLCBQREZBY3RvclNoZWV0QWRhcHRlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFkZGl0aW9uYWwgY29udGV4dCBtZW51IGljb25zIGZvciBQREYgaXRlbXNcbiAgICAgKiBAcGFyYW0gaHRtbFxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRKb3VybmFsQ29udGV4dE9wdGlvbnMoaHRtbDogSlF1ZXJ5LCBvcHRpb25zOiBhbnlbXSkge1xuICAgICAgICBjb25zdCBnZXRKb3VybmFsRW50cnlGcm9tTGkgPSAoaHRtbDogSlF1ZXJ5KTogSm91cm5hbEVudHJ5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gaHRtbC5kYXRhKCdkb2N1bWVudC1pZCcpO1xuICAgICAgICAgICAgcmV0dXJuIGdhbWUhLmpvdXJuYWwhLmdldChpZCkhO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHNob3VsZEFkZCA9IChlbnRpdHlIdG1sOiBKUXVlcnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGpvdXJuYWxFbnRyeSA9IGdldEpvdXJuYWxFbnRyeUZyb21MaShlbnRpdHlIdG1sKTtcbiAgICAgICAgICAgIHJldHVybiBpc0VudGl0eVBERihqb3VybmFsRW50cnkpICYmIGdldFBERkRhdGEoam91cm5hbEVudHJ5KT8udHlwZSAhPT0gUERGVHlwZS5BY3RvcjtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2FtZSEudXNlciEuaXNHTSkge1xuICAgICAgICAgICAgb3B0aW9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5DT05URVhULlByZWxvYWRQREYnKSxcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWQgZmEtZndcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBjb25kaXRpb246IHNob3VsZEFkZCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKGVudGl0eUh0bWw6IEpRdWVyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqb3VybmFsRW50cnkgPSBnZXRKb3VybmFsRW50cnlGcm9tTGkoZW50aXR5SHRtbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBkZiA9IGdldFBERkRhdGEoam91cm5hbEVudHJ5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGRmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdXJsIH0gPSBwZGY7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IFByZWxvYWRFdmVudChudWxsLCBnZXRBYnNvbHV0ZVVSTCh1cmwpKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZW1pdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIFBERkNhY2hlLnByZWxvYWQodXJsKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuQ09OVEVYVC5PcGVuUERGJyksXG4gICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXIgZmEtZmlsZS1wZGZcIj48L2k+JyxcbiAgICAgICAgICAgIGNvbmRpdGlvbjogc2hvdWxkQWRkLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChlbnRpdHlIdG1sOiBKUXVlcnkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBqb3VybmFsRW50cnkgPSBnZXRKb3VybmFsRW50cnlGcm9tTGkoZW50aXR5SHRtbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGRmID0gZ2V0UERGRGF0YShqb3VybmFsRW50cnkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBkZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGRmLnR5cGUgPT09IFBERlR5cGUuQWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmhhbmRsZWQgUERGIGNvbnRleHQgdHlwZSAke3BkZi50eXBlfWApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEFwaS5vcGVuUERGKHBkZiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBqb3VybmFsRW50cnksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHVzZXJMb2dpbigpIHtcbiAgICAgICAgaWYgKCFnYW1lIS51c2VyIS5pc0dNKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmlld2VkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmlld2VkID0gU2V0dGluZ3MuZ2V0KFNldHRpbmdzLlNFVFRJTkdTX0tFWS5IRUxQX1NFRU4pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdmlld2VkID0gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoIXZpZXdlZCkge1xuICAgICAgICAgICAgICAgIEFwaS5zaG93SGVscCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgb25DaGF0TWVzc2FnZShhcHAsIGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucykge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGZvciAobGV0IGNvbW1hbmQgb2YgU2V0dXAuQ09NTUFORFMpIHtcbiAgICAgICAgICAgIGlmIChjb21tYW5kLmV4ZWN1dGUoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSG9vayBoYW5kbGVyIGZvciByZW5kZXJpbmcgdGhlIHNldHRpbmdzIHRhYlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgb25SZW5kZXJTZXR0aW5ncyhzZXR0aW5nczogYW55LCBodG1sOiBKUXVlcnksIGRhdGE6IGFueSkge1xuICAgICAgICAvLyBjb25zdCBpY29uID0gJzxpIGNsYXNzPVwiZmFyIGZhLWZpbGUtcGRmXCI+PC9pPic7XG4gICAgICAgIC8vIGNvbnN0IGJ1dHRvbiA9ICQoYDxidXR0b24+JHtpY29ufSAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLlNFVFRJTkdTLk9wZW5IZWxwJyl9PC9idXR0b24+YCk7XG4gICAgICAgIC8vIGJ1dHRvbi5vbignY2xpY2snLCBBcGkuc2hvd0hlbHApO1xuICAgICAgICAvL1xuICAgICAgICAvLyBodG1sLmZpbmQoJyNzZXR0aW5ncy1kb2N1bWVudGF0aW9uJykuYXBwZW5kKGJ1dHRvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgY3JlYXRlUERGKCkge1xuICAgICAgICBjb25zdCBqb3VybmFsRW50cnkgPSAoYXdhaXQgSm91cm5hbEVudHJ5LmNyZWF0ZSh7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5NSVNDLk5ld1BERicpLFxuICAgICAgICAgICAgW2BmbGFncy4ke1NldHRpbmdzLk1PRFVMRV9OQU1FfS4ke1NldHRpbmdzLkZMQUdTX0tFWS5QREZfREFUQX0udHlwZWBdOiBQREZUeXBlLlN0YXRpYyxcbiAgICAgICAgfSkpIGFzIEpvdXJuYWxFbnRyeTtcblxuICAgICAgICBuZXcgUERGQ29uZmlnKGpvdXJuYWxFbnRyeSkucmVuZGVyKHRydWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZUpvdXJuYWxCdXR0b24oYXBwOiBBcHBsaWNhdGlvbiwgaHRtbDogSlF1ZXJ5KSB7XG4gICAgICAgIGlmICghZ2FtZSEudXNlciEuaXNHTSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnV0dG9uID0gJChgPGJ1dHRvbiBjbGFzcz1cImNyZWF0ZS1wZGZcIj48aSBjbGFzcz1cImZhcyBmYS1maWxlLXBkZlwiPjwvaT4gJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5NSVNDLkNyZWF0ZVBERicpfTwvYnV0dG9uPmApO1xuICAgICAgICBidXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgU2V0dXAuY3JlYXRlUERGKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBmb290ZXIgPSBodG1sLmZpbmQoJy5kaXJlY3RvcnktZm9vdGVyJyk7XG4gICAgICAgIGlmIChmb290ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBmb290ZXIgPSAkKGA8Zm9vdGVyIGNsYXNzPVwiZGlyZWN0b3J5LWZvb3RlclwiPjwvZm9vdGVyPmApO1xuICAgICAgICAgICAgaHRtbC5hcHBlbmQoZm9vdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXIuYXBwZW5kKGJ1dHRvbik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaG9va0xpc3RJdGVtcyhhcHA6IEFwcGxpY2F0aW9uLCBodG1sOiBKUXVlcnkpIHtcbiAgICAgICAgY29uc3QgbGlzID0gaHRtbC5maW5kKCdsaS5qb3VybmFsZW50cnknKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxpIG9mIGxpcykge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gJChsaSk7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHRhcmdldC5kYXRhKCdkb2N1bWVudC1pZCcpO1xuICAgICAgICAgICAgY29uc3Qgam91cm5hbEVudHJ5ID0gZ2FtZSEuam91cm5hbCEuZ2V0KGlkKSE7XG5cbiAgICAgICAgICAgIGlmIChpc0VudGl0eVBERihqb3VybmFsRW50cnkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmZpbmQoJ2g0Jykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoam91cm5hbEVudHJ5LmlzT3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldHVwLm9uQ2xpY2tQREZOYW1lKGpvdXJuYWxFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTZXR1cC5vbkNsaWNrUERGVGh1bWJuYWlsKGpvdXJuYWxFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBkZkRhdGEgPSBnZXRQREZEYXRhKGpvdXJuYWxFbnRyeSk7XG4gICAgICAgICAgICAgICAgaWYgKHBkZkRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGh1bWJuYWlsID0gJChgPGltZyBjbGFzcz1cInBkZi10aHVtYm5haWxcIiBzcmM9XCIke1NldHRpbmdzLlBBVEhfQVNTRVRTfS9wZGZfaWNvbi5zdmdcIiBhbHQ9XCJQREYgSWNvblwiPmApO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuYXBwZW5kKHRodW1ibmFpbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwZGZEYXRhLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUERGVHlwZS5TdGF0aWM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBERlR5cGUuRmlsbGFibGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmZpbmQoJ2ltZycpLm9uKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0dXAub25DbGlja1BERlRodW1ibmFpbChqb3VybmFsRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQREZUeXBlLkFjdG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjdG9ycyBjYW4ndCBiZSBvcGVuZWQgYnkgbGlua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW1ibmFpbC5jc3MoJ2ZpbHRlcicsICdncmF5c2NhbGUoMTAwJSknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIG9uQ2xpY2tQREZOYW1lKGpvdXJuYWxFbnRyeTogSm91cm5hbEVudHJ5KSB7XG4gICAgICAgIG5ldyBQREZDb25maWcoam91cm5hbEVudHJ5KS5yZW5kZXIodHJ1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgb25DbGlja1BERlRodW1ibmFpbChqb3VybmFsRW50cnk6IEpvdXJuYWxFbnRyeSkge1xuICAgICAgICBjb25zdCBwZGZEYXRhID0gZ2V0UERGRGF0YShqb3VybmFsRW50cnkpO1xuICAgICAgICBpZiAocGRmRGF0YSkge1xuICAgICAgICAgICAgc3dpdGNoIChwZGZEYXRhLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFBERlR5cGUuU3RhdGljOlxuICAgICAgICAgICAgICAgICAgICBBcGkub3BlblBERihwZGZEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBQREZUeXBlLkZpbGxhYmxlOlxuICAgICAgICAgICAgICAgICAgICBBcGkub3BlblBERihwZGZEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IGpvdXJuYWxFbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgUERGVHlwZS5BY3RvcjpcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFzcyAtIG5vIGZ1bmN0aW9uYWxpdHlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBvbk5vdGVDb25maWcoYXBwOiBOb3RlQ29uZmlnLCBodG1sOiBKUXVlcnksIGRhdGE6IGFueSkge1xuICAgICAgICBjb25zdCBqb3VybmFsSWQgPSBkYXRhLmRhdGEuZW50cnlJZDtcbiAgICAgICAgY29uc3Qgam91cm5hbCA9IGdhbWUhLmpvdXJuYWwhLmdldChqb3VybmFsSWQpITtcbiAgICAgICAgaWYgKGlzRW50aXR5UERGKGpvdXJuYWwpKSB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSAkKGA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPjwvZGl2PmApO1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSAkKGA8bGFiZWw+JHtnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5DT01NT04uUGFnZU51bWJlcicpfTwvbGFiZWw+YCk7XG5cbiAgICAgICAgICAgIGxldCBwYWdlTnVtYmVyID0gZGF0YS5kYXRhWydmbGFncyddPy5bU2V0dGluZ3MuTU9EVUxFX05BTUVdPy5bU2V0dGluZ3MuRkxBR1NfS0VZLlBBR0VfTlVNQkVSXTtcbiAgICAgICAgICAgIGlmIChwYWdlTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwYWdlTnVtYmVyID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN1YkNvbnRhaW5lciA9ICQoYDxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkc1wiPjwvZGl2PmApO1xuXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9ICQoXG4gICAgICAgICAgICAgICAgYDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImZsYWdzLiR7U2V0dGluZ3MuTU9EVUxFX05BTUV9LiR7U2V0dGluZ3MuRkxBR1NfS0VZLlBBR0VfTlVNQkVSfVwiIHZhbHVlPVwiJHtwYWdlTnVtYmVyfVwiIGRhdGEtZHR5cGU9XCJTdHJpbmdcIj5gLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgc3ViQ29udGFpbmVyLmFwcGVuZChpbnB1dCk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQobGFiZWwpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChzdWJDb250YWluZXIpO1xuXG4gICAgICAgICAgICBodG1sLmZpbmQoJ2J1dHRvblt0eXBlPXN1Ym1pdF0nKS5iZWZvcmUoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIG9uTm90ZUhvdmVyKG5vdGU6IE5vdGUsIGVudGVyOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghZW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGpvdXJuYWwgPSBub3RlLmVudHJ5IGFzIEpvdXJuYWxFbnRyeTtcbiAgICAgICAgY29uc3QgcGRmID0gZ2V0UERGRGF0YShqb3VybmFsKTtcbiAgICAgICAgaWYgKGlzRW50aXR5UERGKGpvdXJuYWwpICYmIHBkZikge1xuICAgICAgICAgICAgbm90ZSEubW91c2VJbnRlcmFjdGlvbk1hbmFnZXIhLmNhbGxiYWNrc1snY2xpY2tMZWZ0MiddID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwYWdlVGV4dDogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkID0gKG5vdGUuZGF0YS5mbGFncz8uW1NldHRpbmdzLk1PRFVMRV9OQU1FXSBhcyBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQpPy5bXG4gICAgICAgICAgICAgICAgICAgIFNldHRpbmdzLkZMQUdTX0tFWS5QQUdFX05VTUJFUlxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgbGV0IHBhZ2VOdW1iZXIgPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYWdlVGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSBwYXJzZUludChwYWdlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFnZVRleHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlVGV4dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGFnZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBBcGkub3BlblBERihwZGYpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIEFwaS5vcGVuUERGKHBkZiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFnZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHJlZ2lzdGVyVGhlbWVzKCkge1xuICAgICAgICBjb25zdCB0aGVtZXM6IFZpZXdlclRoZW1lW10gPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdmYW50YXN5JyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRmFudGFzeSAoRGVmYXVsdCknLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL2ZhbnRhc3kuY3NzYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRGFyaycsXG4gICAgICAgICAgICAgICAgZmlsZVBhdGg6IGAke1NldHRpbmdzLlBBVEhfTU9EVUxFfS90aGVtZXMvZGVmYXVsdC1kYXJrLmNzc2AsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAnbGlnaHQnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdMaWdodCcsXG4gICAgICAgICAgICAgICAgZmlsZVBhdGg6IGAke1NldHRpbmdzLlBBVEhfTU9EVUxFfS90aGVtZXMvZGVmYXVsdC1saWdodC5jc3NgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ25ldC1ydW5uZXItZGFyaycsXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBSdW5uZXInLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL25ldC1ydW5uZXIuY3NzYCxcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ2dheS1wcmlkZS1saWdodCcsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0dheSBQcmlkZSAoTGlnaHQpJyxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogYCR7U2V0dGluZ3MuUEFUSF9NT0RVTEV9L3RoZW1lcy9nYXktcHJpZGUtbGlnaHQuY3NzYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdnYXktcHJpZGUtZGFyaycsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0dheSBQcmlkZSAoRGFyayknLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL2dheS1wcmlkZS1kYXJrLmNzc2AsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAndHJhbnMtbGlnaHQnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdUcmFucyBQcmlkZSAoTGlnaHQpJyxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogYCR7U2V0dGluZ3MuUEFUSF9NT0RVTEV9L3RoZW1lcy90cmFucy1wcmlkZS1saWdodC5jc3NgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ3RyYW5zLWRhcmsnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdUcmFucyBQcmlkZSAoRGFyayknLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL3RyYW5zLXByaWRlLWRhcmsuY3NzYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6ICdub25iaW5hcnktbGlnaHQnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdOb24tYmluYXJ5IFByaWRlIChMaWdodCknLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL25vbmJpbmFyeS1wcmlkZS1saWdodC5jc3NgLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogJ25vbmJpbmFyeS1kYXJrJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnTm9uLWJpbmFyeSBQcmlkZSAoRGFyayknLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBgJHtTZXR0aW5ncy5QQVRIX01PRFVMRX0vdGhlbWVzL25vbmJpbmFyeS1wcmlkZS1kYXJrLmNzc2AsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAoY29uc3QgdGhlbWUgb2YgdGhlbWVzKSB7XG4gICAgICAgICAgICBBcGkucmVnaXN0ZXJUaGVtZSh0aGVtZS5pZCwgdGhlbWUubmFtZSwgdGhlbWUuZmlsZVBhdGgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIxIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VkIGludGVybmFsbHkgb3IgbWFkZSB0byBiZSB1c2VkIGV4dGVybmFsbHkgYnkgeW91LlxuICpcbiAqIFlvdSBjYW4gYWNjZXNzIHRoZXNlIHV0aWxpdGllcyB3aXRoIGB1aS5QREZvdW5kcnkuVXRpbGl0aWVzYC5cbiAqIEBtb2R1bGVkZWZpbml0aW9uIFV0aWxpdGllc1xuICovXG5cbmltcG9ydCB7IFBERkRhdGEsIFBERkRhdGFEZWxldGUsIFBERkRhdGFVcGRhdGUgfSBmcm9tICcuL2NvbW1vbi90eXBlcy9QREZEYXRhJztcbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuL1NldHRpbmdzJztcbmltcG9ydCB7IFBERlR5cGUgfSBmcm9tICcuL2NvbW1vbi90eXBlcy9QREZUeXBlJztcbmltcG9ydCB7IERPTUFJTl9XSElURUxJU1QgfSBmcm9tICcuL2NvbW1vbi9XaGl0ZWxpc3QnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdAbGVhZ3VlLW9mLWZvdW5kcnktZGV2ZWxvcGVycy9mb3VuZHJ5LXZ0dC10eXBlcy9zcmMvZm91bmRyeS9jb21tb24vYWJzdHJhY3QvbW9kdWxlLm1qcyc7XG5pbXBvcnQgeyBBbnlEb2N1bWVudERhdGEgfSBmcm9tICdAbGVhZ3VlLW9mLWZvdW5kcnktZGV2ZWxvcGVycy9mb3VuZHJ5LXZ0dC10eXBlcy9zcmMvZm91bmRyeS9jb21tb24vYWJzdHJhY3QvZGF0YS5tanMnO1xuXG4vLyAqKioqKioqKioqKioqXG4vLyBVUkwgSEVMUEVSU1xuLy8gKioqKioqKioqKioqKlxuLy8gPGVkaXRvci1mb2xkIGRlc2M9J1VSTCBIZWxwZXJzXCI+XG5cbi8qKlxuICogR2V0cyB0aGUgY29ycmVjdCByb3V0ZSBwcmVmaXggdXNlZCB0byBzdXBwb3J0IHNlcnZlcnMgdXNpbmcgYSByb3V0ZSBwcmVmaXguXG4gKiBBcHBlbmRlZCB0byBhbGwgd2luZG93LmxvY2F0aW9uIHBhdGhzLlxuICogQG1vZHVsZSBVdGlsaXRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdXRlUHJlZml4KCk6IHN0cmluZyB7XG4gICAgbGV0IHByZWZpeEFyciA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpO1xuICAgIHByZWZpeEFyci5wb3AoKTsgLy8gZG9uJ3Qgd2FudCB0aGUgJ2dhbWUnIGF0IHRoZSBlbmRcbiAgICByZXR1cm4gcHJlZml4QXJyLmpvaW4oJy8nKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgcmVsYXRpdmUgVVJMIHRvIGEgYWJzb2x1dGUgVVJMIGJ5IHByZXBlbmRpbmcgdGhlIHdpbmRvdyBvcmlnaW4gdG8gdGhlIHJlbGF0aXZlIFVSTC5cbiAqIElmIHRoZSBVUkwgaXMgb2YgYSB3aGl0ZSBsaXN0ZWQgZG9tYWluLCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIHByb3ZpZGVkIFVSTC5cbiAqIEBwYXJhbSBkYXRhVXJsIEEgdXJsIHRvIGJlIHZhbGlkYXRlZC5cbiAqIEBzZWUge0BsaW5rIERPTUFJTl9XSElURUxJU1R9XG4gKiBAc2VlIHtAbGluayBBcGkuVXRpbGl0aWVzfVxuICogQG1vZHVsZSBVdGlsaXRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFic29sdXRlVVJMKGRhdGFVcmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gU29tZSBkb21haW5zIGFyZSB3aGl0ZSBsaXN0ZWQsIHRoZXNlIHNob3VsZCBiZSBjb25zaWRlcmVkIGFic29sdXRlIGFscmVhZHlcbiAgICBmb3IgKGNvbnN0IGRvbWFpbiBvZiBET01BSU5fV0hJVEVMSVNUKSB7XG4gICAgICAgIGlmIChkYXRhVXJsLmluY2x1ZGVzKGRvbWFpbikpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhVXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke3dpbmRvdy5vcmlnaW59JHtnZXRSb3V0ZVByZWZpeCgpfS8ke2RhdGFVcmx9YDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIFVSTCBzdGFydHMgd2l0aCB0aGUgb3JpZ2luIG9yIHRoZSBkb21haW4gaXMgb25lIG9mIHRoZVxuICogIHdoaXRlIGxpc3RlZCBkb21haW5zLlxuICogQHBhcmFtIGRhdGFVcmwgQSB1cmwgdG8gYmUgdmFsaWRhdGVkLlxuICogQHNlZSB7QGxpbmsgRE9NQUlOX1dISVRFTElTVH1cbiAqIEBzZWUge0BsaW5rIEFwaS5VdGlsaXRpZXN9XG4gKiBAbW9kdWxlIFV0aWxpdGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBYnNvbHV0ZVVSTChkYXRhVXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyBTb21lIGRvbWFpbnMgYXJlIHdoaXRlIGxpc3RlZFxuICAgIGZvciAoY29uc3QgZG9tYWluIG9mIERPTUFJTl9XSElURUxJU1QpIHtcbiAgICAgICAgaWYgKGRhdGFVcmwuaW5jbHVkZXMoZG9tYWluKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVVybC5zdGFydHNXaXRoKHdpbmRvdy5vcmlnaW4pO1xufVxuXG4vLyA8L2VkaXRvci1mb2xkPlxuXG4vLyAqKioqKioqKioqKioqXG4vLyBEQVRBIEhFTFBFUlNcbi8vICoqKioqKioqKioqKipcbi8vIDxlZGl0b3ItZm9sZCBkZXNjPSdEYXRhIEhlbHBlcnNcIj5cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIGVudGl0eSBjb250YWlucyBQREYgZGF0YVxuICogQHBhcmFtIGVudGl0eSBUaGUgZW50aXR5IHRvIGNoZWNrLiBPbmx5IEpvdXJuYWxFbnRpdGllcyBhcmUgYWxsb3dlZCB0byBiZSBQREZzIG5hdGl2ZWx5LlxuICogQHNlZSB7QGxpbmsgQXBpLlV0aWxpdGllc31cbiAqIEBtb2R1bGUgVXRpbGl0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VudGl0eVBERihlbnRpdHk6IERvY3VtZW50PEFueURvY3VtZW50RGF0YT4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gZW50aXR5ICE9PSB1bmRlZmluZWQgJiYgZW50aXR5ICE9PSBudWxsICYmIGVudGl0eS5nZXRGbGFnKFNldHRpbmdzLk1PRFVMRV9OQU1FLCBTZXR0aW5ncy5GTEFHU19LRVkuUERGX0RBVEEpICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUHVsbCByZWxldmFudCBkYXRhIGZyb20gYW4gam91cm5hbCBlbnRyeSwgY3JlYXRpbmcgYSB7QGxpbmsgUERGRGF0YX0gb2JqZWN0LlxuICogQHBhcmFtIGpvdXJuYWxFbnRyeSBUaGUgam91cm5hbCBlbnRyeSB0byBwdWxsIGRhdGEgZnJvbS5cbiAqIEBzZWUge0BsaW5rIEFwaS5VdGlsaXRpZXN9XG4gKiBAbW9kdWxlIFV0aWxpdGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UERGRGF0YShqb3VybmFsRW50cnk6IEpvdXJuYWxFbnRyeSB8IG51bGwgfCB1bmRlZmluZWQpOiBQREZEYXRhIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoam91cm5hbEVudHJ5ID09PSB1bmRlZmluZWQgfHwgam91cm5hbEVudHJ5ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgcGRmRGF0YSA9IGpvdXJuYWxFbnRyeS5nZXRGbGFnKFNldHRpbmdzLk1PRFVMRV9OQU1FLCBTZXR0aW5ncy5GTEFHU19LRVkuUERGX0RBVEEpIGFzIFBERkRhdGEgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHBkZkRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBwZGZEYXRhLm5hbWUgPSBqb3VybmFsRW50cnkubmFtZSE7XG4gICAgcmV0dXJuIHBkZkRhdGE7XG59XG5cbi8qKlxuICogU2V0IG9uZSBvciBtb3JlIHtAbGluayBQREZEYXRhfSBhdHRyaWJ1dGVzIHRvIHRoZSBwcm92aWRlZCB2YWx1ZXMuIE1ha2VzIG5vIGNoYW5nZXMgdG8gZmllbGRzIHRoYXRcbiAqICBhcmUgbm90IHNwZWNpZmllZC4gSWYgeW91IHdpc2ggdG8gdXBkYXRlIHRoZSBQREYgbmFtZSwgdXNlIEVudGl0eS51cGRhdGUgYXMgbm9ybWFsIGluIEZvdW5kcnkuXG4gKiBAcGFyYW0gam91cm5hbEVudHJ5IFRoZSBQREYgdG8gdXBkYXRlIHRoZSBkYXRhIG9uLlxuICogQHBhcmFtIHBkZkRhdGEgQSBwYXJ0aWFsIG1hcHBpbmcgb2YgYSB7QGxpbmsgUERGRGF0YX0gb2JqZWN0LlxuICogQHNlZSB7QGxpbmsgQXBpLlV0aWxpdGllc31cbiAqIEBtb2R1bGUgVXRpbGl0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRQREZEYXRhKGpvdXJuYWxFbnRyeTogSm91cm5hbEVudHJ5LCBwZGZEYXRhOiBQYXJ0aWFsPFBERkRhdGFVcGRhdGU+KSB7XG4gICAgcmV0dXJuIGpvdXJuYWxFbnRyeS5zZXRGbGFnKFNldHRpbmdzLk1PRFVMRV9OQU1FLCBTZXR0aW5ncy5GTEFHU19LRVkuUERGX0RBVEEsIHBkZkRhdGEpO1xufVxuXG4vKipcbiAqIERlbGV0ZXMgYSBrZXkgZnJvbSB0aGUgUERGIGRhdGEuIFJlcXVpcmVzIHRoZSB2YWx1ZSBvZiB0aGUga2V5IHRvIGJlIHNldCB0byBudWxsLlxuICogQHBhcmFtIGpvdXJuYWxFbnRyeSBUaGUgam91cm5hbCBlbnRyeSB0byBkZWxldGUgdGhlIGtleSBmcm9tLlxuICogQHBhcmFtIHBkZkRhdGEgQSBtYXBwaW5nIG9mIHtrZXk6IG51bGx9IHBhaXJzIHRvIGRlbGV0ZS5cbiAqIEBzZWUge0BsaW5rIEFwaS5VdGlsaXRpZXN9XG4gKiBAbW9kdWxlIFV0aWxpdGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlUERGRGF0YShqb3VybmFsRW50cnk6IEpvdXJuYWxFbnRyeSwgcGRmRGF0YTogUGFydGlhbDxQREZEYXRhRGVsZXRlPikge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHt9O1xuXG4gICAgLy8gVE9ETzogRmVhdHVyZSByZXF1ZXN0IHRvIHVzZSBTeW1ib2xzIHRvIHBlcmZvcm0gdGhpcyB0eXBlIG9mIG9wZXJhdGlvblxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHBkZkRhdGEpKSB7XG4gICAgICAgIHVwZGF0ZVtgZmxhZ3MuJHtTZXR0aW5ncy5NT0RVTEVfTkFNRX0uJHtTZXR0aW5ncy5GTEFHU19LRVkuUERGX0RBVEF9Li09JHtrZXl9YF0gPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBqb3VybmFsRW50cnkudXBkYXRlKHVwZGF0ZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGFsbCByZXF1aXJlZCBkYXRhIGlzIHNldCBzdWNoIHRoYXQgdGhlIFBERiBpcyBwb3NzaWJsZSB0byBvcGVuLlxuICogIERvZXMgbm90IGd1YXJhbnRlZSBhbnkgc3BlY2lmaWMgZGF0YSBmb3IgYSB0eXBlIG9mIG9wZW4gKGUuZy4gb3BlbmluZyBhcyBhIGZpbGxhYmxlIFBERilcbiAqICBvbmx5IHRoYXQgdGhlIHN0YXRpYyB2aWV3ZXIgaXMgYWJsZSB0byBvcGVuIHRoZSBQREYuXG4gKiBAcGFyYW0gcGRmRGF0YSBUaGUgUERGIGRhdGEgdG8gY2hlY2suXG4gKiBAc2VlIHtAbGluayBBcGkuVXRpbGl0aWVzfVxuICogQG1vZHVsZSBVdGlsaXRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbk9wZW5QREYocGRmRGF0YTogUERGRGF0YSkge1xuICAgIGlmIChQREZUeXBlW3BkZkRhdGEudHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEocGRmRGF0YS51cmwgPT09IHVuZGVmaW5lZCB8fCBwZGZEYXRhLnVybCA9PT0gJycpO1xufVxuXG4vLyA8L2VkaXRvci1mb2xkPlxuXG4vLyAqKioqKioqKioqKioqXG4vLyBVU0VSIEhFTFBFUlNcbi8vICoqKioqKioqKioqKipcbi8vIDxlZGl0b3ItZm9sZCBkZXNjPSdVc2VyIEhlbHBlcnNcIj5cbi8qKlxuICogUmV0dXJuIGFsbCB1c2VycyBpZHMgZXhjZXB0IHRoZSBjdXJyZW50IHVzZXJcbiAqIEBzZWUge0BsaW5rIEFwaS5VdGlsaXRpZXN9XG4gKiBAbW9kdWxlIFV0aWxpdGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlcklkc0V4Y2VwdE1lKCkge1xuICAgIHJldHVybiBnYW1lIVxuICAgICAgICAudXNlcnMhLmZpbHRlcigodXNlcjogVXNlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVzZXIuaWQgIT09IGdhbWUudXNlcklkO1xuICAgICAgICB9KVxuICAgICAgICAubWFwKCh1c2VyOiBVc2VyKSA9PiB1c2VyLmlkKTtcbn1cblxuLy8gPC9lZGl0b3ItZm9sZD5cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQREZUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERlR5cGUnO1xuaW1wb3J0IFNlbGVjdEFwcCwgeyBTZWxlY3RPcHRpb24gfSBmcm9tICcuL1NlbGVjdEFwcCc7XG5pbXBvcnQgeyBnZXRQREZEYXRhLCBpc0VudGl0eVBERiB9IGZyb20gJy4uL1V0aWwnO1xuXG4vKipcbiAqIFNlbGVjdHMgYW4gYWN0b3Igc2hlZXQgaW4gYSBwb3AgdXAgd2luZG93LlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdG9yU2hlZXRTZWxlY3QgZXh0ZW5kcyBTZWxlY3RBcHAge1xuICAgIHByb3RlY3RlZCBnZXQgc2VsZWN0VGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdQREZPVU5EUlkuVklFV0VSLlNlbGVjdFNoZWV0JztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdElkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnYWN0b3Itc2hlZXQnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgc2VsZWN0TGFiZWwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdQREZPVU5EUlkuVklFV0VSLlNlbGVjdFNoZWV0JztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHNlbGVjdE9wdGlvbnMoKTogU2VsZWN0T3B0aW9uW10ge1xuICAgICAgICBjb25zdCBqb3VybmFsczogSm91cm5hbEVudHJ5W10gPSBnYW1lIS5qb3VybmFsIS5maWx0ZXIoKGVudHJ5OiBKb3VybmFsRW50cnkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpc0VudGl0eVBERihlbnRyeSkgJiYgZ2V0UERGRGF0YShlbnRyeSk/LnR5cGUgPT09IFBERlR5cGUuQWN0b3I7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBqb3VybmFscy5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGVudHJ5LmRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZW50cnkuaWQhLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIxIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuLi9TZXR0aW5ncyc7XG5pbXBvcnQgeyBCVVRUT05fR0lUSFVCLCBCVVRUT05fS09GSSB9IGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL2hlYWRlcic7XG5cbi8qKlxuICogQmFzaWMgYXBwIHRvIGFsbG93IHRoZSB1c2VyIHRvIHNlZSBkYXRhIGtleXMgZm9yIGFjdG9yIHNoZWV0c1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBERkFjdG9yRGF0YUJyb3dzZXIgZXh0ZW5kcyBBcHBsaWNhdGlvbiB7XG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHN1cGVyLmRlZmF1bHRPcHRpb25zO1xuXG4gICAgICAgIG9wdGlvbnMudGVtcGxhdGUgPSBgJHtTZXR0aW5ncy5QQVRIX1RFTVBMQVRFU30vYXBwL3BkZi1hY3Rvci1kYXRhLWJyb3dzZXIuaHRtbGA7XG4gICAgICAgIG9wdGlvbnMud2lkdGggPSA2MDA7XG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gNDAwO1xuICAgICAgICBvcHRpb25zLnJlc2l6YWJsZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhY3RvcjogQWN0b3I7XG4gICAgcHJpdmF0ZSB0aW1lb3V0OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihhY3RvcjogQWN0b3IsIG9wdGlvbnM/OiBBcHBsaWNhdGlvbi5PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFjdG9yID0gYWN0b3I7XG4gICAgfVxuXG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmFjdG9yLm5hbWV9YDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldEhlYWRlckJ1dHRvbnMoKTogYW55W10ge1xuICAgICAgICBjb25zdCBidXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKTtcbiAgICAgICAgYnV0dG9ucy51bnNoaWZ0KEJVVFRPTl9HSVRIVUIpO1xuICAgICAgICBidXR0b25zLnVuc2hpZnQoQlVUVE9OX0tPRkkpO1xuICAgICAgICBidXR0b25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgY2xhc3M6ICdwZGYtc2hlZXQtcmVmcmVzaCcsXG4gICAgICAgICAgICBpY29uOiAnZmFzIGZhLXN5bmMnLFxuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLk1JU0MuUmVmcmVzaCcpLFxuICAgICAgICAgICAgb25jbGljazogKCkgPT4gdGhpcy5yZW5kZXIoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBidXR0b25zO1xuICAgIH1cblxuICAgIGdldERhdGEob3B0aW9ucz86IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci5nZXREYXRhKG9wdGlvbnMpO1xuXG4gICAgICAgIGVudW0gRGFuZ2VyTGV2ZWwge1xuICAgICAgICAgICAgU2FmZSA9IDAsXG4gICAgICAgICAgICBMb3cgPSAxLFxuICAgICAgICAgICAgSGlnaCA9IDIsXG4gICAgICAgICAgICBDcml0aWNhbCA9IDMsXG4gICAgICAgIH1cbiAgICAgICAgdHlwZSBEYXRhUGF0aCA9IHsga2V5OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmc7IGRhbmdlcjogRGFuZ2VyTGV2ZWwgfTtcbiAgICAgICAgY29uc3QgZmxhdHRlbiA9IChkYXRhOiBvYmplY3QsIGN1cnJlbnQ6IHN0cmluZyA9ICcnLCBkYW5nZXI6IERhbmdlckxldmVsID0gRGFuZ2VyTGV2ZWwuU2FmZSk6IERhdGFQYXRoW10gPT4ge1xuICAgICAgICAgICAgbGV0IHJlc3VsdHM6IERhdGFQYXRoW10gPSBbXTtcblxuICAgICAgICAgICAgd2luZG93WydhY3RvckRhdGEnXSA9IHRoaXMuYWN0b3IuZGF0YS5kYXRhO1xuXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gKGN1cnI6IHN0cmluZywgLi4ubmV4dDogKHN0cmluZyB8IG51bWJlcilbXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gYCR7Y3Vycn0uJHtuZXh0W2ldfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke25leHR9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCB3cmFwID0gKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFxce1xceyR7dmFsdWV9XFx9XFx9YDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGJvdW5kRGFuZ2VyID0gKGN1cnI6IERhbmdlckxldmVsLCBuZXh0OiBEYW5nZXJMZXZlbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyIDwgbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcmVzdWx0cztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAxIDogVGhlIHZhbHVlIGlzIGFuIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBwYXRoKGN1cnJlbnQsIGtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcjogRGFuZ2VyTGV2ZWwuQ3JpdGljYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB3cmFwKCdFbXB0eSBBcnJheSwgZG8gbm90IHVzZSEnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdmFsdWVbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbLi4ucmVzdWx0cywgLi4uZmxhdHRlbihuZXh0LCBwYXRoKGN1cnJlbnQsIGtleSwgaSksIGJvdW5kRGFuZ2VyKGRhbmdlciwgRGFuZ2VyTGV2ZWwuSGlnaCkpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAyIDogVGhlIHZhbHVlIGlzIGFuIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHBhdGgoY3VycmVudCwga2V5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFuZ2VyOiBEYW5nZXJMZXZlbC5IaWdoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogd3JhcCgnTnVsbC9VbmRlZmluZWQsIGJlIGNhdXRpb3VzIScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdEVtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogcGF0aChjdXJyZW50LCBrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXI6IERhbmdlckxldmVsLkNyaXRpY2FsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogd3JhcCgnRW1wdHkgT2JqZWN0LCBkbyBub3QgdXNlIScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBba2V5MiwgdmFsdWUyXSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IFsuLi5yZXN1bHRzLCAuLi5mbGF0dGVuKHZhbHVlMiBhcyBhbnksIHBhdGgoY3VycmVudCwga2V5LCBrZXkyKSwgYm91bmREYW5nZXIoZGFuZ2VyLCBEYW5nZXJMZXZlbC5Mb3cpKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzZSAzIDogQmFzZSBDYXNlIDogVGhlIHZhbHVlIGlzIGEgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBwYXRoKGN1cnJlbnQsIGtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFuZ2VyOiBib3VuZERhbmdlcihkYW5nZXIsIERhbmdlckxldmVsLkNyaXRpY2FsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogd3JhcCgnRnVuY3Rpb24sIGRvIG5vdCB1c2UhJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhc2UgNCA6IEJhc2UgQ2FzZSA6IFRoZSB2YWx1ZSBpcyBhIHByaW1pdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHBhdGgoY3VycmVudCwga2V5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXI6IGJvdW5kRGFuZ2VyKGRhbmdlciwgRGFuZ2VyTGV2ZWwuU2FmZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICh2YWx1ZSBhcyBhbnkpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlIDMgOiBCYXNlIENhc2UgOiBUaGUgdmFsdWUgaXMgYSBmdW5jdGlvblxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyOiBib3VuZERhbmdlcihkYW5nZXIsIERhbmdlckxldmVsLkNyaXRpY2FsKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHdyYXAoJ0Z1bmN0aW9uLCBkbyBub3QgdXNlIScpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlIDQgOiBCYXNlIENhc2UgOiBUaGUgdmFsdWUgaXMgYSBwcmltaXRpdmVcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhbmdlcjogYm91bmREYW5nZXIoZGFuZ2VyLCBEYW5nZXJMZXZlbC5TYWZlKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGljb25zID0ge1xuICAgICAgICAgICAgW0RhbmdlckxldmVsLlNhZmVdOiAnPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2stY2lyY2xlXCI+PC9pPicsXG4gICAgICAgICAgICBbRGFuZ2VyTGV2ZWwuTG93XTogJzxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT4nLFxuICAgICAgICAgICAgW0RhbmdlckxldmVsLkhpZ2hdOiAnPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIj48L2k+JyxcbiAgICAgICAgICAgIFtEYW5nZXJMZXZlbC5Dcml0aWNhbF06ICc8aSBjbGFzcz1cImZhcyBmYS1yYWRpYXRpb24tYWx0XCI+PC9pPicsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHRvb2x0aXBzID0ge1xuICAgICAgICAgICAgW0RhbmdlckxldmVsLlNhZmVdOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5NSVNDLkRBTkdFUi5TYWZlJyksXG4gICAgICAgICAgICBbRGFuZ2VyTGV2ZWwuTG93XTogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuTUlTQy5EQU5HRVIuTG93JyksXG4gICAgICAgICAgICBbRGFuZ2VyTGV2ZWwuSGlnaF06IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLk1JU0MuREFOR0VSLkhpZ2gnKSxcbiAgICAgICAgICAgIFtEYW5nZXJMZXZlbC5Dcml0aWNhbF06IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLk1JU0MuREFOR0VSLkNyaXRpY2FsJyksXG4gICAgICAgIH07XG5cbiAgICAgICAgZGF0YVsncGF0aHMnXSA9IGZsYXR0ZW4odGhpcy5hY3Rvci5kYXRhLmRhdGEsICdkYXRhJyk7XG4gICAgICAgIGRhdGFbJ3BhdGhzJ10ucHVzaCh7XG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmFjdG9yLm5hbWUsXG4gICAgICAgICAgICBkYW5nZXI6IERhbmdlckxldmVsLlNhZmUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRhdGFbJ3BhdGhzJ10uc29ydCgoYTogRGF0YVBhdGgsIGI6IERhdGFQYXRoKSA9PiBhLmtleS5sb2NhbGVDb21wYXJlKGIua2V5KSk7XG4gICAgICAgIGRhdGFbJ3BhdGhzJ10gPSBkYXRhWydwYXRocyddLm1hcCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IHNwbGl0Um9sbCA9IGVsZW1lbnRbJ2tleSddLnNwbGl0KCcuJykgYXMgc3RyaW5nW107XG4gICAgICAgICAgICBzcGxpdFJvbGwuc2hpZnQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5lbGVtZW50LFxuICAgICAgICAgICAgICAgIGljb246IGljb25zW2VsZW1lbnQuZGFuZ2VyXSxcbiAgICAgICAgICAgICAgICByb2xsOiBgQCR7c3BsaXRSb2xsLmpvaW4oJy4nKX1gLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHRvb2x0aXBzW2VsZW1lbnQuZGFuZ2VyXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBhY3RpdmF0ZUxpc3RlbmVycyhodG1sOiBKUXVlcnkpIHtcbiAgICAgICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbCk7XG5cbiAgICAgICAgaHRtbC5maW5kKCdpLmNvcHknKS5vbignY2xpY2snLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHRhcmdldC5kYXRhKCd2YWx1ZScpIGFzIHN0cmluZyk7XG5cbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5NSVNDLkNvcGllZFRvQ2xpcGJvYXJkJykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoZm9yY2U/OiBib29sZWFuLCBvcHRpb25zPzogQXBwbGljYXRpb24uUmVuZGVyT3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5yZW5kZXIuYmluZCh0aGlzKSwgMTAwMDApO1xuICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyKGZvcmNlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNsb3NlKCk7XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIxIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBBY3RvclZpZXdlciBmcm9tICcuLi92aWV3ZXIvQWN0b3JWaWV3ZXInO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4uL1NldHRpbmdzJztcbmltcG9ydCB7IFBERkRhdGEgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvUERGRGF0YSc7XG5cbi8qKlxuICogQWRhcHRzIGEgRmlsbGFibGVWaWV3ZXIgdG8gZnVuY3Rpb24gYXMgYSBBY3RvclNoZWV0XG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUERGQWN0b3JTaGVldEFkYXB0ZXIgZXh0ZW5kcyBBY3RvclNoZWV0PEFjdG9yU2hlZXQuT3B0aW9ucz4ge1xuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiU3RhdGljIFByb3BlcnRpZXNcIj48L2VkaXRvci1mb2xkPlxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiU3RhdGljIE1ldGhvZHNcIj48L2VkaXRvci1mb2xkPlxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiUHJvcGVydGllc1wiPlxuXG4gICAgcHJpdmF0ZSBfdmlld2VyOiBBY3RvclZpZXdlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zPzogQXBwbGljYXRpb24uT3B0aW9ucztcblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkNvbnN0cnVjdG9yICYgSW5pdGlhbGl6YXRpb25cIj5cblxuICAgIGNvbnN0cnVjdG9yKGFjdG9yOiBBY3Rvciwgb3B0aW9ucz86IEFjdG9yU2hlZXQuT3B0aW9ucykge1xuICAgICAgICBzdXBlcihhY3Rvciwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICBwdWJsaWMgZ2V0IHZpZXdlcigpOiBBY3RvclZpZXdlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3ZXI7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkluc3RhbmNlIE1ldGhvZHNcIj5cblxuICAgIHB1YmxpYyBhY3RpdmF0ZUxpc3RlbmVycyhodG1sOiBKUXVlcnkpIHtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIHRoaXMuZm9ybSA9ICQoaHRtbCkuZmlyc3QoKS5nZXQoMCkhO1xuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgX29uU3VibWl0KC4uLmFyZ3MpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAvLyBQREZvdW5kcnkgaGFuZGxlcyBkYXRhIGluIHRoZSBGaWxsYWJsZVZpZXdlclxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGF0YSgpOiBQcm9taXNlPEFjdG9yU2hlZXQuRGF0YT4ge1xuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3QoYXdhaXQgc3VwZXIuZ2V0RGF0YSgpLCBhd2FpdCB0aGlzLl92aWV3ZXIuZ2V0RGF0YSgpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZU9iamVjdChldmVudDogRXZlbnQsIGZvcm1EYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoZm9yY2U/OiBib29sZWFuLCBvcHRpb25zPzogQXBwbGljYXRpb24uUmVuZGVyT3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuX3ZpZXdlcikge1xuICAgICAgICAgICAgY29uc3Qgc2hlZXRJZCA9IHRoaXMuYWN0b3IuZ2V0RmxhZyhTZXR0aW5ncy5NT0RVTEVfTkFNRSwgU2V0dGluZ3MuRkxBR1NfS0VZLlNIRUVUX0lEKSBhcyBQREZEYXRhO1xuICAgICAgICAgICAgdGhpcy5fdmlld2VyID0gbmV3IEFjdG9yVmlld2VyKHRoaXMuYWN0b3IgYXMgYW55LCBzaGVldElkLCB0aGlzLCB0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoaXMgd2luZG93IGlzIGFscmVhZHkgb3BlbiwgZG9uJ3QgcmUtcmVuZGVyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gQXBwbGljYXRpb24uUkVOREVSX1NUQVRFUy5SRU5ERVJFRCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aWV3ZXIucmVuZGVyKGZvcmNlLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnJlbmRlcihmb3JjZSwgb3B0aW9ucyBhcyBhbnkpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFNhbmRib3ggY29tcGF0aWJpbGl0eSAtIHNob3VsZCBmb3JjZSB0aGlzIGNsYXNzIHRvIGV4dGVuZCBDT05GSUcgY2xhc3MgaW5zdGVhZC5cbiAgICBhc3luYyBzY3JvbGxiYXJTZXQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhc3luYyBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdlcikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdmlld2VyLmNsb3NlKCk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdmlld2VyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMjEgQW5kcmV3IEN1Y2NpbmVsbG9cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4uL1NldHRpbmdzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vQXBpJztcbmltcG9ydCB7IGdldEFic29sdXRlVVJMLCBnZXRQREZEYXRhIH0gZnJvbSAnLi4vVXRpbCc7XG5pbXBvcnQgeyBQREZUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERlR5cGUnO1xuaW1wb3J0IHsgQlVUVE9OX0dJVEhVQiwgQlVUVE9OX0hFTFAsIEJVVFRPTl9LT0ZJIH0gZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvaGVhZGVyJztcblxuLyoqXG4gKiBFeHRlbmRzIHRoZSBiYXNlIEl0ZW1TaGVldCBmb3IgbGlua2VkIFBERiB2aWV3aW5nLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFBERkNvbmZpZyBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJTdGF0aWMgUHJvcGVydGllc1wiPlxuXG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHN1cGVyLmRlZmF1bHRPcHRpb25zO1xuICAgICAgICBvcHRpb25zLmNsYXNzZXMgPSBbLi4ub3B0aW9ucy5jbGFzc2VzISwgU2V0dGluZ3MuQ1NTX0NMQVNTXTtcbiAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IGAke1NldHRpbmdzLlBBVEhfVEVNUExBVEVTfS9zaGVldC9wZGYtY29uZmlnLmh0bWxgO1xuICAgICAgICBvcHRpb25zLndpZHRoID0gNjUwO1xuICAgICAgICBvcHRpb25zLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBNZXRob2RzXCI+PC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlByb3BlcnRpZXNcIj5cblxuICAgIHB1YmxpYyByZWFkb25seSBvYmplY3Q6IEpvdXJuYWxFbnRyeTtcbiAgICBwcml2YXRlIHBpY2tlcjogRmlsZVBpY2tlcjtcblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJDb25zdHJ1Y3RvciAmIEluaXRpYWxpemF0aW9uXCI+XG5cbiAgICBjb25zdHJ1Y3Rvcihqb3VybmFsRW50cnk6IEpvdXJuYWxFbnRyeSwgb3B0aW9ucz86IEFwcGxpY2F0aW9uLk9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoam91cm5hbEVudHJ5LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiR2V0dGVycyAmIFNldHRlcnNcIj5cblxuICAgIHB1YmxpYyBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqZWN0Lm5hbWUhO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBwZGYtJHt0aGlzLm9iamVjdC5pZH1gO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0SGVhZGVyQnV0dG9ucygpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpO1xuICAgICAgICBidXR0b25zLnVuc2hpZnQoQlVUVE9OX0dJVEhVQik7XG4gICAgICAgIGJ1dHRvbnMudW5zaGlmdChCVVRUT05fS09GSSk7XG4gICAgICAgIGJ1dHRvbnMudW5zaGlmdChCVVRUT05fSEVMUCk7XG4gICAgICAgIHJldHVybiBidXR0b25zO1xuICAgIH1cblxuICAgIGdldCBpc0VkaXRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE86IDAuOC54IGNvbXBhdFxuICAgICAgICByZXR1cm4gdGhpcy5vYmplY3QudGVzdFVzZXJQZXJtaXNzaW9uKGdhbWUudXNlciwgQ09OU1QuRU5USVRZX1BFUk1JU1NJT05TLk9XTkVSKTtcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiSW5zdGFuY2UgTWV0aG9kc1wiPlxuXG4gICAgcHVibGljIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWw6IEpRdWVyeSk6IHZvaWQge1xuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcblxuICAgICAgICBjb25zdCB1cmxJbnB1dCA9IGh0bWwuZmluZCgnI2RhdGEtdXJsJyk7XG4gICAgICAgIGNvbnN0IG9mZnNldElucHV0ID0gaHRtbC5maW5kKCcjZGF0YS1vZmZzZXQnKTtcblxuICAgICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIG9wZW5zIHRoZSBmaWxlIHBpY2tlciBpbiB0aGlzIGZvcm0gc2V0dXAsIG92ZXJyaWRlXG4gICAgICAgIGh0bWwuZmluZCgnaW5wdXQnKS5vbigna2V5cHJlc3MnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uU3VibWl0KGV2ZW50LCB7IHByZXZlbnRDbG9zZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGh0bWwuZmluZCgnaW5wdXQsIHNlbGVjdCcpLm9uKCdpbnB1dCcsIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblN1Ym1pdChldmVudCwgeyBwcmV2ZW50Q2xvc2U6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEJyb3dzZSBidXR0b25cbiAgICAgICAgaHRtbC5maW5kKCcjcGRmLWJyb3dzZScpLm9uKCdjbGljaycsIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICB0aGlzLnBpY2tlciA9XG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZXIgPz9cbiAgICAgICAgICAgICAgICBuZXcgRmlsZVBpY2tlcih7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ET1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25TdWJtaXQobmV3IEV2ZW50KCdpbnB1dCcpLCB7IHByZXZlbnRDbG9zZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUT0RPOiBGb3VuZHJ5IFR5cGVzXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5leHRlbnNpb25zID0gWycucGRmJ107XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maWVsZCA9IHVybElucHV0WzBdO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuZmlsZXBpY2tlcnMuaW5jbHVkZXModGhpcy5waWNrZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlcGlja2Vycy5wdXNoKHRoaXMucGlja2VyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHVybFZhbHVlID0gdXJsSW5wdXQudmFsKCk7XG4gICAgICAgICAgICBpZiAodXJsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGlja2VyLmJyb3dzZSh1cmxWYWx1ZS50b1N0cmluZygpLnRyaW0oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGlja2VyLnJlbmRlcih0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGVzdCBwZGYgc2V0dGluZ3MgYnV0dG9uXG4gICAgICAgIGh0bWwuZmluZCgnI3BkZi10ZXN0Jykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIGxldCB1cmxWYWx1ZSA9IHVybElucHV0LnZhbCgpO1xuICAgICAgICAgICAgbGV0IG9mZnNldFZhbHVlID0gb2Zmc2V0SW5wdXQudmFsKCk7XG5cbiAgICAgICAgICAgIGlmICh1cmxWYWx1ZSA9PT0gbnVsbCB8fCB1cmxWYWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgICAgICBpZiAob2Zmc2V0VmFsdWUgPT09IG51bGwgfHwgb2Zmc2V0VmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB1cmxWYWx1ZSA9IHVybFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB1cmxWYWx1ZSA9IGdldEFic29sdXRlVVJMKHVybFZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKG9mZnNldFZhbHVlLnRvU3RyaW5nKCkudHJpbSgpID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9mZnNldFZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldFZhbHVlID0gcGFyc2VJbnQob2Zmc2V0VmFsdWUgYXMgc3RyaW5nKTtcblxuICAgICAgICAgICAgQXBpLm9wZW5VUkwodXJsVmFsdWUsIDUgKyBvZmZzZXRWYWx1ZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGF0YSgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHN1cGVyLmdldERhdGEoKTtcblxuICAgICAgICBkYXRhWyd0eXBlcyddID0gT2JqZWN0LmVudHJpZXMoUERGVHlwZSkubWFwKChba2V5XSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUERGVHlwZVtrZXldLFxuICAgICAgICAgICAgICAgIHRleHQ6IGBQREZPVU5EUlkuTUlTQy5QREZUWVBFLiR7a2V5fWAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBkYXRhWydkYXRhUGF0aCddID0gYGZsYWdzLiR7U2V0dGluZ3MuTU9EVUxFX05BTUV9LiR7U2V0dGluZ3MuRkxBR1NfS0VZLlBERl9EQVRBfWA7XG4gICAgICAgIGRhdGFbJ2ZsYWdzJ10gPSBnZXRQREZEYXRhKHRoaXMub2JqZWN0KTtcbiAgICAgICAgZGF0YVsnbmFtZSddID0gdGhpcy5vYmplY3QuZGF0YS5uYW1lO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBhc3luYyBfdXBkYXRlT2JqZWN0KGV2ZW50OiBFdmVudCB8IEpRdWVyeS5FdmVudCwgZm9ybURhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLm9iamVjdC51cGRhdGUoZm9ybURhdGEpO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmUgVE9ET1xuICAgIHN1Ym1pdCh7IHVwZGF0ZURhdGEgfTogeyB1cGRhdGVEYXRhPzogYW55IH0pOiBGb3JtQXBwbGljYXRpb24ge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE9cbiAgICAgICAgcmV0dXJuIHN1cGVyLnN1Ym1pdCh7IHVwZGF0ZURhdGEgfSk7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuXG4vKipcbiAqIENhbGxiYWNrIHR5cGUgZm9yIHBsYXllciBzZWxlY3Rpb25cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCB0eXBlIFBERlBsYXllclNlbGVjdENhbGxiYWNrID0gKGlkczogc3RyaW5nW10pID0+IHZvaWQ7XG5cbi8qKlxuICogQW4gYXBwbGljYXRpb24gdGhhdCBhbGxvd3Mgc2VsZWN0aW9uIG9mIHBsYXllcnMuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXJTZWxlY3QgZXh0ZW5kcyBBcHBsaWNhdGlvbiB7XG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHN1cGVyLmRlZmF1bHRPcHRpb25zO1xuICAgICAgICBvcHRpb25zLmNsYXNzZXMgPSBbJ3NoZWV0JywgJ2l0ZW0nXTtcbiAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IGAke1NldHRpbmdzLlBBVEhfVEVNUExBVEVTfS9hcHAvcGRmLXBsYXllci1zZWxlY3QuaHRtbGA7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgb3B0aW9ucy53aWR0aCA9ICdhdXRvJztcbiAgICAgICAgb3B0aW9ucy5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAgIG9wdGlvbnMudGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5WSUVXRVIuU2VsZWN0UGxheWVycycpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pZHM7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2FsbGJhY2s6IFBERlBsYXllclNlbGVjdENhbGxiYWNrO1xuXG4gICAgY29uc3RydWN0b3IoaWRzOiBzdHJpbmdbXSwgY2I6IFBERlBsYXllclNlbGVjdENhbGxiYWNrLCBvcHRpb25zPzogQXBwbGljYXRpb24uT3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9pZHMgPSBpZHM7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2I7XG4gICAgfVxuXG4gICAgZ2V0RGF0YShvcHRpb25zPzogYW55KTogYW55IHwgUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHN1cGVyLmdldERhdGEob3B0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgdXNlcnM6IGFueVtdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgdGhpcy5faWRzKSB7XG4gICAgICAgICAgICB1c2Vycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBnYW1lIS51c2VycyEuZ2V0KGlkKSEubmFtZSxcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdXNlcnMuc29ydCgoYSwgYikgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSk7XG5cbiAgICAgICAgZGF0YVsndXNlcnMnXSA9IHVzZXJzO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbDogSlF1ZXJ5KTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9ICQoaHRtbCkuZmluZCgnI2NvbmZpcm0nKTtcbiAgICAgICAgYnV0dG9uLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKHRoaXMuY29sbGVjdElkcygpKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdCBzZWxlY3RlZCBpZHMgZnJvbSB0aGUgaHRtbFxuICAgICAqL1xuICAgIHByaXZhdGUgY29sbGVjdElkcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGlkczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9ICQodGhpcy5lbGVtZW50KS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoZWNrYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gJChjaGVja2JveGVzW2ldKTtcbiAgICAgICAgICAgIGlmIChjaGVja2JveC5wcm9wKCdjaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBpZHMucHVzaChjaGVja2JveC5wcm9wKCdpZCcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRzO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuXG4vKipcbiAqIENhbGxiYWNrIHR5cGUgZm9yIHNlbGVjdCBhcHBzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgU2VsZWN0QXBwQ2FsbGJhY2sgPSAodmFsdWU6IHN0cmluZywgdGV4dDogc3RyaW5nKSA9PiB2b2lkO1xuXG4vKipcbiAqIERhdGEgbGF5b3V0IGZvciBzZWxlY3Qgb3B0aW9uc1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0T3B0aW9uIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhcHAgdGhhdCB1c2VzIGEgc2VsZWN0IGRyb3AgZG93blxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNlbGVjdEFwcCBleHRlbmRzIEFwcGxpY2F0aW9uIHtcbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBQcm9wZXJ0aWVzXCI+XG5cbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gc3VwZXIuZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMuY2xhc3NlcyA9IFsuLi5vcHRpb25zLmNsYXNzZXMhLCBTZXR0aW5ncy5DU1NfQ0xBU1NdO1xuICAgICAgICBvcHRpb25zLnRlbXBsYXRlID0gYCR7U2V0dGluZ3MuUEFUSF9URU1QTEFURVN9L2FwcC9zZWxlY3QtYXBwLmh0bWxgO1xuICAgICAgICBvcHRpb25zLndpZHRoID0gMjAwO1xuICAgICAgICBvcHRpb25zLmhlaWdodCA9ICdhdXRvJztcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBNZXRob2RzXCI+PC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlByb3BlcnRpZXNcIj5cblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2N1cnJlbnQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2FsbGJhY2s/OiBTZWxlY3RBcHBDYWxsYmFjaztcblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJDb25zdHJ1Y3RvciAmIEluaXRpYWxpemF0aW9uXCI+XG5cbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaz86IFNlbGVjdEFwcENhbGxiYWNrLCBjdXJyZW50VmFsdWU/OiBzdHJpbmcsIG9wdGlvbnM/OiBBcHBsaWNhdGlvbi5PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBjdXJyZW50VmFsdWU7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICBwdWJsaWMgZ2V0IHRpdGxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUodGhpcy5zZWxlY3RUaXRsZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlxdWUgPyB0aGlzLnNlbGVjdElkIDogc3VwZXIuaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIGR1cGxpY2F0ZSBvZiB0aGlzIGFwcCBiZSBhbGxvd2VkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXQgdW5pcXVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxpemF0aW9uIHN0cmluZyB0byBiZSB1c2VkIGluIHRoZSBoZWFkZXIgZm9yIHRoZSB0aXRsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHNlbGVjdFRpdGxlKCk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbGl6YXRpb24gc3RyaW5nIHRvIGJlIHVzZWQgaW4gdGhlIGJvZHkgdG8gbGFiZWwgdGhlIHNlbGVjdFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHNlbGVjdExhYmVsKCk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgc2VsZWN0LCB0byBwcmVzZXJ2ZSB1bmlxdWVuZXNzLiBVc2VkIGZvciBhcHAgaWQgaWYgbm90XG4gICAgICogIHVuaXF1ZSwgYW5kIHNlbGVjdCBpZCBhdHRyaWJ1dGUgZm9yIGdsb2JhbCBmaW5kcy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCBzZWxlY3RJZCgpOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgc2VsZWN0IG9wdGlvbnNcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCBzZWxlY3RPcHRpb25zKCk6IFNlbGVjdE9wdGlvbltdO1xuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkluc3RhbmNlIE1ldGhvZHNcIj5cblxuICAgIGdldERhdGEob3B0aW9ucz86IGFueSk6IGFueSB8IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci5nZXREYXRhKG9wdGlvbnMpO1xuXG4gICAgICAgIGRhdGFbJ2RhdGEnXSA9IHtcbiAgICAgICAgICAgIGlkOiB0aGlzLnNlbGVjdElkLFxuICAgICAgICAgICAgbGFiZWw6IHRoaXMuc2VsZWN0TGFiZWwsXG4gICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5fY3VycmVudCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMuc2VsZWN0T3B0aW9ucyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbDogSlF1ZXJ5KTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGh0bWwuZmluZChgYnV0dG9uIyR7dGhpcy5zZWxlY3RJZH0tY29uZmlybWApO1xuICAgICAgICBidXR0b24ub24oJ2NsaWNrJywgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gaHRtbC5maW5kKGAjJHt0aGlzLnNlbGVjdElkfWApIGFzIEpRdWVyeTxIVE1MU2VsZWN0RWxlbWVudD47XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNlbGVjdC52YWwoKSBhcyBzdHJpbmc7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX2N1cnJlbnQgJiYgdGhpcy5fY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKHZhbHVlLCBzZWxlY3QuZmluZCgnb3B0aW9uOnNlbGVjdGVkJykudGV4dCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQW4gZXJyb3IgdGhhdCBvY2N1cnMgZHVyaW5nIGNhY2hlIG9wZXJhdGlvbnNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDYWNoZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGluZGV4OiBzdHJpbmcsIHN0b3JlOiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoYEVycm9yIGluICR7aW5kZXh9PiR7c3RvcmV9OiAke21lc3NhZ2V9YCk7XG4gICAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMjAgQW5kcmV3IEN1Y2NpbmVsbG9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FjaGVFcnJvciB9IGZyb20gJy4vQ2FjaGVFcnJvcic7XG5cbi8qKlxuICogQ2xhc3MgdGhhdCBkZWFscyB3aXRoIGdldHRpbmcvc2V0dGluZyBmcm9tIGFuIGluZGV4ZWQgZGJcbiAqIE1vc3RseSBleGlzdHMgdG8gc2VwYXJhdGUgbG9naWMgZm9yIHRoZSBQREZDYWNoZSBmcm9tIGxvZ2ljXG4gKiBkZWFsaW5nIHdpdGggdGhlIGRhdGFiYXNlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWNoZUhlbHBlciB7XG4gICAgcHJpdmF0ZSBfdmVyc2lvbjogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaW5kZXhOYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3RvcmVOYW1lczogc3RyaW5nW107XG5cbiAgICBwcml2YXRlIF9kYjogSURCRGF0YWJhc2U7XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZUFuZE9wZW4oaW5kZXhOYW1lOiBzdHJpbmcsIHN0b3JlTmFtZXM6IHN0cmluZ1tdLCB2ZXJzaW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaGVscGVyID0gbmV3IENhY2hlSGVscGVyKGluZGV4TmFtZSwgc3RvcmVOYW1lcywgdmVyc2lvbik7XG4gICAgICAgIGF3YWl0IGhlbHBlci5vcGVuKCk7XG4gICAgICAgIHJldHVybiBoZWxwZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCByZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGluZGV4TmFtZTogc3RyaW5nLCBzdG9yZU5hbWVzOiBzdHJpbmdbXSwgdmVyc2lvbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2luZGV4TmFtZSA9IGAke2luZGV4TmFtZX1gO1xuICAgICAgICB0aGlzLl9zdG9yZU5hbWVzID0gc3RvcmVOYW1lcztcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBuZXdUcmFuc2FjdGlvbihzdG9yZU5hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuX2RiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWR3cml0ZScpO1xuICAgICAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICAgIHJldHVybiB7IHRyYW5zYWN0aW9uLCBzdG9yZSB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBvcGVuKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3Blbih0aGF0Ll9pbmRleE5hbWUsIHRoYXQuX3ZlcnNpb24pO1xuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGF0Ll9kYiA9IHRoaXMucmVzdWx0O1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2RiID0gdGhpcy5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGF0Ll9zdG9yZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgb2JqZWN0IHN0b3JlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2RiLmNyZWF0ZU9iamVjdFN0b3JlKHRoYXQuX3N0b3JlTmFtZXNbaV0sIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBwYXNzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQoa2V5OiBJREJWYWxpZEtleSwgdmFsdWU6IGFueSwgc3RvcmVOYW1lOiBzdHJpbmcsIGZvcmNlOiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ2FjaGVFcnJvcih0aGlzLl9pbmRleE5hbWUsIHN0b3JlTmFtZSwgJ0RhdGFiYXNlIGlzIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbGV0IHsgdHJhbnNhY3Rpb24sIHN0b3JlIH0gPSB0aGlzLm5ld1RyYW5zYWN0aW9uKHN0b3JlTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9wYWdhdGUgZXJyb3JzIHVwd2FyZHMsIG90aGVyd2lzZSB0aGV5IGZhaWwgc2lsZW50bHlcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGV2ZW50LnRhcmdldC5lcnJvcik7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGtleVJlcXVlc3QgPSBzdG9yZS5nZXRLZXkoa2V5KTtcbiAgICAgICAgICAgICAgICBrZXlSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBrZXkgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlSZXF1ZXN0LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIHdlIGZvcmNlIHRoZSBuZXcgdmFsdWUgYnkgZGVsZXRpbmcgdGhlIG9sZD9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZGVsKGtleSwgc3RvcmVOYW1lKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHsgdHJhbnNhY3Rpb24sIHN0b3JlIH0gPSB0aGF0Lm5ld1RyYW5zYWN0aW9uKHN0b3JlTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZS5hZGQodmFsdWUsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IENhY2hlRXJyb3IodGhhdC5faW5kZXhOYW1lLCBzdG9yZU5hbWUsIGBLZXkgJHtrZXl9IGFscmVhZHkgZXhpc3RzLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuYWRkKHZhbHVlLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldChrZXk6IElEQlZhbGlkS2V5LCBzdG9yZU5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENhY2hlRXJyb3IodGhpcy5faW5kZXhOYW1lLCBzdG9yZU5hbWUsICdEYXRhYmFzZSBpcyBub3QgaW5pdGlhbGl6ZWQuJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB7IHRyYW5zYWN0aW9uLCBzdG9yZSB9ID0gdGhpcy5uZXdUcmFuc2FjdGlvbihzdG9yZU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvcGFnYXRlIGVycm9ycyB1cHdhcmRzLCBvdGhlcndpc2UgdGhleSBmYWlsIHNpbGVudGx5XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChldmVudC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBnZXRSZXF1ZXN0ID0gc3RvcmUuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgZ2V0UmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGdldFJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChldmVudC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZWwoa2V5OiBJREJWYWxpZEtleSwgc3RvcmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0cmFuc2FjdGlvbiwgc3RvcmUgfSA9IHRoaXMubmV3VHJhbnNhY3Rpb24oc3RvcmVOYW1lKTtcblxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQudGFyZ2V0LmVycm9yKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzdG9yZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGtleXMoc3RvcmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPElEQlZhbGlkS2V5W10+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPElEQlZhbGlkS2V5W10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyB0cmFuc2FjdGlvbiwgc3RvcmUgfSA9IHRoaXMubmV3VHJhbnNhY3Rpb24oc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlzUmVxdWVzdCA9IHN0b3JlLmdldEFsbEtleXMoKTtcblxuICAgICAgICAgICAgICAgIGtleXNSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShrZXlzUmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAga2V5c1JlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChldmVudC50YXJnZXQuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbHIoc3RvcmVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdG9yZSB9ID0gdGhpcy5uZXdUcmFuc2FjdGlvbihzdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBzdG9yZS5nZXRBbGxLZXlzKCk7XG4gICAgICAgICAgICAgICAga2V5cy5vbnN1Y2Nlc3MgPSAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cy5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy5kZWwoa2V5LCBzdG9yZU5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuaW1wb3J0IENhY2hlSGVscGVyIGZyb20gJy4vQ2FjaGVIZWxwZXInO1xuXG4vKipcbiAqIE1ldGEgaW5mb3JtYXRpb24gYWJvdXQgYSBjYWNoZSBlbnRyeVxuICogQHByaXZhdGVcbiAqL1xudHlwZSBDYWNoZURhdGEgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgaW4gYnl0ZXMgdGhpcyBjYWNoZSBlbnRyeSB0YWtlcyB1cC5cbiAgICAgKi9cbiAgICBzaXplOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgdGhlIGNhY2hlIHdhcyBsYXN0IGFjY2Vzc2VkLCByZXByZXNlbnRlZCBieSBhIElTTyBzdHJpbmcuXG4gICAgICovXG4gICAgZGF0ZUFjY2Vzc2VkOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgY2FjaGluZyBmb3IgUERGc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUERGQ2FjaGUge1xuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiU3RhdGljIFByb3BlcnRpZXNcIj5cbiAgICAvKipcbiAgICAgKiBNYXggc2l6ZSBvZiB0aGUgY2FjaGUgZm9yIHRoZSBhY3RpdmUgdXNlciwgZGVmYXVsdHMgdG8gMjU2IE1CLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGdldCBNQVhfQllURVMoKSB7XG4gICAgICAgIHJldHVybiAoU2V0dGluZ3MuZ2V0KFNldHRpbmdzLlNFVFRJTkdTX0tFWS5DQUNIRV9TSVpFKSBhcyBudW1iZXIpICogMiAqKiAyMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJREJfTkFNRTogc3RyaW5nID0gJ1BERm91bmRyeSc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSURCX1ZFUlNJT046IG51bWJlciA9IDE7XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDQUNIRTogc3RyaW5nID0gYENhY2hlYDtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNRVRBOiBzdHJpbmcgPSBgTWV0YWA7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfY2FjaGVIZWxwZXI6IENhY2hlSGVscGVyO1xuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGluaXRpYWxpemUoKSB7XG4gICAgICAgIFBERkNhY2hlLl9jYWNoZUhlbHBlciA9IGF3YWl0IENhY2hlSGVscGVyLmNyZWF0ZUFuZE9wZW4oUERGQ2FjaGUuSURCX05BTUUsIFtQREZDYWNoZS5DQUNIRSwgUERGQ2FjaGUuTUVUQV0sIFBERkNhY2hlLklEQl9WRVJTSU9OKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCBhIHByb3ZpZGVkIGtleSAodXJsKS5cbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBnZXRNZXRhKGtleTogc3RyaW5nKTogUHJvbWlzZTxDYWNoZURhdGEgfCBudWxsPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgUERGQ2FjaGUuX2NhY2hlSGVscGVyLmdldChrZXksIFBERkNhY2hlLk1FVEEpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCBhIHByb3ZpZGVkIGtleSAodXJsKS4gU2VlIHtAbGluayBDYWNoZURhdGF9LlxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKiBAcGFyYW0gbWV0YVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2V0TWV0YShrZXk6IHN0cmluZywgbWV0YTogQ2FjaGVEYXRhKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IFBERkNhY2hlLl9jYWNoZUhlbHBlci5zZXQoa2V5LCBtZXRhLCBQREZDYWNoZS5NRVRBLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGJ5dGUgYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBrZXkgKHVybCkgZnJvbSB0aGUgdXNlcidzIGNhY2hlLlxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIGdldENhY2hlKGtleTogc3RyaW5nKTogUHJvbWlzZTxVaW50OEFycmF5IHwgbnVsbD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBhd2FpdCBQREZDYWNoZS5fY2FjaGVIZWxwZXIuZ2V0KGtleSwgUERGQ2FjaGUuQ0FDSEUpO1xuICAgICAgICAgICAgY29uc3QgbWV0YTogQ2FjaGVEYXRhID0ge1xuICAgICAgICAgICAgICAgIGRhdGVBY2Nlc3NlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNpemU6IGJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhd2FpdCBQREZDYWNoZS5zZXRNZXRhKGtleSwgbWV0YSk7XG5cbiAgICAgICAgICAgIHJldHVybiBieXRlcztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGUgY2FjaGUgZm9yIHRoZSBzcGVjaWZpYyBrZXkgKHVybCkgdG8gdGhlIHByb3ZpZGVkIGJ5dGUgYXJyYXkuXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSBieXRlc1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2V0Q2FjaGUoa2V5OiBzdHJpbmcsIGJ5dGVzOiBVaW50OEFycmF5KSB7XG4gICAgICAgIGNvbnN0IG1ldGE6IENhY2hlRGF0YSA9IHtcbiAgICAgICAgICAgIGRhdGVBY2Nlc3NlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgc2l6ZTogYnl0ZXMubGVuZ3RoLFxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IFBERkNhY2hlLl9jYWNoZUhlbHBlci5zZXQoa2V5LCBieXRlcywgUERGQ2FjaGUuQ0FDSEUsIHRydWUpO1xuICAgICAgICBhd2FpdCBQREZDYWNoZS5zZXRNZXRhKGtleSwgbWV0YSk7XG4gICAgICAgIGF3YWl0IHRoaXMucHJ1bmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVsb2FkIHRoZSBQREYgYXQgdGhlIHNwZWNpZmllZCBrZXkgKHVybCksIGNhY2hpbmcgaXQgaW1tZWRpYXRlbHkuXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcHJlbG9hZChrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkQnl0ZXMgPSBhd2FpdCBQREZDYWNoZS5nZXRDYWNoZShrZXkpO1xuICAgICAgICAgICAgaWYgKGNhY2hlZEJ5dGVzICE9PSBudWxsICYmIGNhY2hlZEJ5dGVzLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChrZXkpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmV0Y2hlZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGZldGNoZWRCeXRlcy5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBQREZDYWNoZS5zZXRDYWNoZShrZXksIGZldGNoZWRCeXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmV0Y2ggZmFpbGVkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdGZXRjaCBmYWlsZWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBydW5lIHRoZSBhY3RpdmUgdXNlcidzIGNhY2hlIHVudGlsIGl0IGlzIGJlbG93IHRoZSB1c2VyJ3MgY2FjaGUgc2l6ZSBsaW1pdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHBydW5lKCkge1xuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgdGhpcy5fY2FjaGVIZWxwZXIua2V5cyhQREZDYWNoZS5NRVRBKTtcblxuICAgICAgICBsZXQgdG90YWxCeXRlcyA9IDA7XG4gICAgICAgIGxldCBtZXRhczogYW55W10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IGF3YWl0IHRoaXMuX2NhY2hlSGVscGVyLmdldChrZXksIFBERkNhY2hlLk1FVEEpO1xuICAgICAgICAgICAgbWV0YS5kYXRlQWNjZXNzZWQgPSBEYXRlLnBhcnNlKG1ldGEuZGF0ZUFjY2Vzc2VkKTtcbiAgICAgICAgICAgIG1ldGEuc2l6ZSA9IHBhcnNlSW50KG1ldGEuc2l6ZSk7XG5cbiAgICAgICAgICAgIHRvdGFsQnl0ZXMgKz0gbWV0YS5zaXplO1xuXG4gICAgICAgICAgICBtZXRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgbWV0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbWV0YXMgPSBtZXRhcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYS5tZXRhLmRhdGVBY2Nlc3NlZCAtIGIubWV0YS5kYXRlQWNjZXNzZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWV0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0b3RhbEJ5dGVzIDwgUERGQ2FjaGUuTUFYX0JZVEVTKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBtZXRhc1tpXTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fY2FjaGVIZWxwZXIuZGVsKG5leHQua2V5LCBQREZDYWNoZS5NRVRBKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NhY2hlSGVscGVyLmRlbChuZXh0LmtleSwgUERGQ2FjaGUuQ0FDSEUpO1xuXG4gICAgICAgICAgICB0b3RhbEJ5dGVzIC09IG5leHQubWV0YS5zaXplO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIFBERiBjYWNoZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBhd2FpdCB0aGlzLl9jYWNoZUhlbHBlci5rZXlzKFBERkNhY2hlLk1FVEEpO1xuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2NhY2hlSGVscGVyLmRlbChrZXksIFBERkNhY2hlLk1FVEEpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fY2FjaGVIZWxwZXIuZGVsKGtleSwgUERGQ2FjaGUuQ0FDSEUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyogQ29weXJpZ2h0IDIwMjAgQW5kcmV3IEN1Y2NpbmVsbG9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDaGF0IGNvbW1hbmQgcHJvY2Vzc29yXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQ2hhdENvbW1hbmQge1xuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiR2V0dGVycyAmIFNldHRlcnNcIj5cblxuICAgIHB1YmxpYyBnZXQgQ29tbWFuZFByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIGAvcGRmb3VuZHJ5YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0IENvbW1hbmROYW1lKCk6IHN0cmluZztcblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJJbnN0YW5jZSBNZXRob2RzXCI+XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBjb21tYW5kLCByZXR1cm5pbmcgdHJ1ZSBpZiB0aGUgY29tbWFuZCBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5XG4gICAgICogQHBhcmFtIGNvbnRlbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZXhlY3V0ZShjb250ZW50OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcmVhbEFyZ3MgPSBjb250ZW50LnNwbGl0KCcgJyk7XG4gICAgICAgIGlmIChyZWFsQXJnc1swXSAhPT0gdGhpcy5Db21tYW5kUHJlZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVhbEFyZ3NbMV0gIT09IHRoaXMuQ29tbWFuZE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBvcCBmaXJzdCB0d28gYXJnc1xuICAgICAgICByZWFsQXJncy5zaGlmdCgpO1xuICAgICAgICByZWFsQXJncy5zaGlmdCgpO1xuXG4gICAgICAgIHRoaXMucnVuKHJlYWxBcmdzKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuQ09NTUFORFMuU3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoJyRDT01NQU5EX05BTUUkJywgdGhpcy5Db21tYW5kTmFtZSk7XG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkNPTU1BTkRTLkZhaWx1cmUnKTtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKCckQ09NTUFORF9OQU1FJCcsIHRoaXMuQ29tbWFuZE5hbWUpO1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIHRoZSBjb21tYW5kXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJ1bihhcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIxIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGdldFBERkRhdGEsIHNldFBERkRhdGEgfSBmcm9tICcuLi9VdGlsJztcbmltcG9ydCB7IFBERlR5cGUgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvUERGVHlwZSc7XG5pbXBvcnQgQ2hhdENvbW1hbmQgZnJvbSAnLi9DaGF0Q29tbWFuZCc7XG5cbi8qKlxuICogRml4ZXMgbWlzc2luZyB0eXBlc1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpeE1pc3NpbmdUeXBlcyBleHRlbmRzIENoYXRDb21tYW5kIHtcbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICBnZXQgQ29tbWFuZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdmaXgtbWlzc2luZy10eXBlcyc7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiSW5zdGFuY2UgTWV0aG9kc1wiPlxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIHJ1bihhcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsZXQgZml4ZWRQREZzID0gMDtcbiAgICAgICAgY29uc3Qgam91cm5hbHMgPSBnYW1lIS5qb3VybmFsIS5maWx0ZXIoKGplOiBKb3VybmFsRW50cnkpID0+IGdldFBERkRhdGEoamUpICE9PSB1bmRlZmluZWQgJiYgZ2V0UERGRGF0YShqZSk/LnR5cGUgPT09IHVuZGVmaW5lZCkgYXMgSm91cm5hbEVudHJ5W107XG4gICAgICAgIGZvciAoY29uc3Qgam91cm5hbEVudHJ5IG9mIGpvdXJuYWxzKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXRQREZEYXRhKGpvdXJuYWxFbnRyeSwge1xuICAgICAgICAgICAgICAgIHR5cGU6IFBERlR5cGUuU3RhdGljLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmaXhlZFBERnMgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdWkuam91cm5hbC5yZW5kZXIoKTtcblxuICAgICAgICBpZiAoZml4ZWRQREZzID4gMCkge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkNPTU1BTkRTLkZpeE1pc3NpbmdUeXBlc1N1Y2Nlc3MnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuQ09NTUFORFMuRml4TWlzc2luZ1R5cGVzRmFpbHVyZScpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAyMCBBbmRyZXcgQ3VjY2luZWxsb1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgQ2hhdENvbW1hbmQgZnJvbSAnLi9DaGF0Q29tbWFuZCc7XG5pbXBvcnQgUERGQ2FjaGUgZnJvbSAnLi4vY2FjaGUvUERGQ2FjaGUnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQdXJnZUNhY2hlIGV4dGVuZHMgQ2hhdENvbW1hbmQge1xuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiR2V0dGVycyAmIFNldHRlcnNcIj5cblxuICAgIHB1YmxpYyBnZXQgQ29tbWFuZE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdwdXJnZS1jYWNoZSc7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiSW5zdGFuY2UgTWV0aG9kc1wiPlxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIHJ1bihhcmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBQREZDYWNoZS5jbGVhcigpO1xuXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5DT01NQU5EUy5QdXJnZUNhY2hlU3VjY2VzcycpKTtcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxufVxuIiwiLyogQ29weXJpZ2h0IDIwMjAgQW5kcmV3IEN1Y2NpbmVsbG9cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgZG9tYWluIHdoaXRlIGxpc3QgaW5jbHVkZXMgZG9tYWlucyB0aGF0IGFyZSBhbGxvd2VkIG90aGVyIHRoYW4gJ2xvY2FsaG9zdCcgb3JcbiAqICB0aGUgZXF1aXZhbGVudCBkb21haW4gdGhlIHVzZXIgaXMgcnVubmluZyB0aGUgc2VydmVyIG9uLlxuICovXG5leHBvcnQgY29uc3QgRE9NQUlOX1dISVRFTElTVCA9IFsnYW1hem9uYXdzLmNvbScsICdkaWdpdGFsb2NlYW5zcGFjZXMuY29tJywgJ2Fzc2V0cy5mb3JnZS12dHQuY29tJywgJ3dhc2FiaXN5cy5jb20nLCAnYmFja2JsYXplYjIuY29tJ107XG4iLCIvKiBDb3B5cmlnaHQgMjAyMCBBbmRyZXcgQ3VjY2luZWxsb1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgQXBpIGZyb20gJy4uLy4uL0FwaSc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vLi4vU2V0dGluZ3MnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFN0b3JlPFRLZXlzIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWFwOiBNYXA8c3RyaW5nLCBGdW5jdGlvbltdPjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbmV3IE1hcDxzdHJpbmcsIEZ1bmN0aW9uW10+KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHVybiBvbiBhbiBldmVudCBjYWxsYmFjayBmb3IgdGhlIHNwZWNpZmllZCBldmVudC5cbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgcHVibGljIG9uKGV2ZW50TmFtZTogVEtleXMsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuX21hcC5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChldmVudE5hbWUsIFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuX21hcC5nZXQoZXZlbnROYW1lKSBhcyBGdW5jdGlvbltdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tpXSA9PT0gY2FsbGJhY2spIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlrZSB7QHNlZSBvbn0gYnV0IG9ubHkgZmlyZXMgb25jZS5cbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgcHVibGljIG9uY2UoZXZlbnROYW1lOiBUS2V5cywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3MpO1xuICAgICAgICAgICAgdGhhdC5vZmYoZXZlbnROYW1lLCB3cmFwcGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhhdC5vbihldmVudE5hbWUsIHdyYXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFR1cm4gb2ZmIGFuIGV2ZW50IGNhbGxiYWNrIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIEBwYXJhbSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBwdWJsaWMgb2ZmKGV2ZW50TmFtZTogVEtleXMsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuX21hcC5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLnNldChldmVudE5hbWUsIFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMuX21hcC5nZXQoZXZlbnROYW1lKSBhcyBGdW5jdGlvbltdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZSBhbiBldmVudCBhbmQgZm9yd2FyZCB0aGUgYXJncyB0byBhbGwgaGFuZGxlcnNcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKi9cbiAgICBwdWJsaWMgZmlyZShldmVudE5hbWU6IFRLZXlzLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChBcGkuREVCVUcuRVZFTlRTKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGAke1NldHRpbmdzLk1PRFVMRV9OQU1FLnRvVXBwZXJDYXNlKCl9Ojoke2V2ZW50TmFtZX1gKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21hcC5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5fbWFwLmdldChldmVudE5hbWUpIGFzIEZ1bmN0aW9uW107XG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBBcGkgZnJvbSAnLi4vLi4vQXBpJztcblxuLyoqXG4gKiBHaXRodWIgbGluayBoZWFkZXIgYnV0dG9uLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBCVVRUT05fR0lUSFVCID0ge1xuICAgIGNsYXNzOiAncGRmLXNoZWV0LWdpdGh1YicsXG4gICAgaWNvbjogJ2ZhcyBmYS1leHRlcm5hbC1saW5rLWFsdCcsXG4gICAgbGFiZWw6ICdQREZvdW5kcnknLFxuICAgIG9uY2xpY2s6ICgpID0+IHdpbmRvdy5vcGVuKCdodHRwczovL2dpdGh1Yi5jb20vRGpwaG9lbml4NzE5L1BERm91bmRyeScsICdfYmxhbmsnKSxcbn07XG5cbi8qKlxuICogTWFudWFsIGxpbmsgaGVhZGVyIGJ1dHRvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQlVUVE9OX0hFTFAgPSB7XG4gICAgY2xhc3M6ICdwZGYtc2hlZXQtbWFudWFsJyxcbiAgICBpY29uOiAnZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZScsXG4gICAgbGFiZWw6ICdIZWxwJyxcbiAgICBvbmNsaWNrOiAoKSA9PiBBcGkuc2hvd0hlbHAoKSxcbn07XG5cbi8qKlxuICogU2hhbWVsZXNzIHNoaWxsIGxpbmtcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQlVUVE9OX0tPRkkgPSB7XG4gICAgY2xhc3M6ICdwZGYtc2hlZXQta29maScsXG4gICAgaWNvbjogJ2ZhcyBmYS1jb2ZmZWUnLFxuICAgIGxhYmVsOiAnJyxcbiAgICBvbmNsaWNrOiAoKSA9PiB3aW5kb3cub3BlbignaHR0cHM6Ly9rby1maS5jb20vZGpzbW9kcycsICdfYmxhbmsnKSxcbn07XG4iLCIvKiBDb3B5cmlnaHQgMjAyMCBBbmRyZXcgQ3VjY2luZWxsb1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFRoZSB0eXBlIG9mIFBERiBmaWxlLCBhcyBzcGVjaWZpZWQgYnkgdGhlIHVzZXIuXG4gKiBAbW9kdWxlIEFQSVxuICovXG5leHBvcnQgZW51bSBQREZUeXBlIHtcbiAgICAvKipcbiAgICAgKiBTdGF0aWMgUERGcyBjb250YWluIG5vIGZvcm0gZmlsbGFibGUgZWxlbWVudHMuXG4gICAgICovXG4gICAgU3RhdGljID0gJ3N0YXRpYycsXG4gICAgLyoqXG4gICAgICogRmlsbGFibGUgUERGcyBhcmUgbm90IGxpbmtlZCB0byBhY3RvciBzaGVldHMsIGJ1dCBkbyBjb250YWluIGZvcm0gZmlsbGFibGUgZWxlbWVudHMuXG4gICAgICovXG4gICAgRmlsbGFibGUgPSAnZmlsbGFibGUnLFxuICAgIC8qKlxuICAgICAqIEFjdG9yLWxpbmtlZCBQREZzIHN0b3JlIHRoZWlyIGRhdGEgb24gdGhlIGFjdG9yLCBzbyB0aGV5IGNhbiByZXByZXNlbnQgYWN0b3JzLlxuICAgICAqL1xuICAgIEFjdG9yID0gJ2FjdG9yJyxcbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBBcGkgZnJvbSAnLi4vQXBpJztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogRW5yaWNoZXMgVGlueU1DRSBlZGl0b3IgY29udGVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIVE1MRW5yaWNoZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgcGF0Y2hFbnJpY2goKSB7XG4gICAgICAgIGNvbnN0IG9sZEVucmljaCA9IFRleHRFZGl0b3IuZW5yaWNoSFRNTDtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIFRleHRFZGl0b3IuZW5yaWNoSFRNTCA9IGZ1bmN0aW9uIChodG1sOiBzdHJpbmcsIG9wdGlvbnM6IGFueSkge1xuICAgICAgICAgICAgaHRtbCA9IG9sZEVucmljaC5hcHBseSh0aGlzLCBbaHRtbCwgb3B0aW9uc10pO1xuICAgICAgICAgICAgaHRtbCA9IEhUTUxFbnJpY2hlci5lbnJpY2hBbGwoaHRtbCk7XG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGJpbmRSaWNoVGV4dExpbmtzKGh0bWw6IEpRdWVyeSkge1xuICAgICAgICBodG1sLmZpbmQoJ2EucGRmb3VuZHJ5LWxpbmsnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBhbHdheXMgYmUgYW4gYW5jaG9yXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgY29uc3QgcmVmID0gdGFyZ2V0LmRhdGEoJ3JlZicpIGFzIHN0cmluZztcbiAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSB0YXJnZXQuZGF0YSgncGFnZScpIGFzIG51bWJlcjtcblxuICAgICAgICAgICAgLy8gcmVmIGNhbiBtYXRjaCBuYW1lIG9yIGNvZGVcbiAgICAgICAgICAgIGxldCBwZGZEYXRhID0gQXBpLmZpbmRQREZEYXRhKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubmFtZSA9PT0gcmVmIHx8IGRhdGEuY29kZSA9PT0gcmVmO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcGRmRGF0YSkge1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoYFVuYWJsZSB0byBmaW5kIGEgUERGIHdpdGggYSBuYW1lIG9yIGNvZGUgbWF0Y2hpbmcgJHtyZWZ9LmApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhZ2UgPT09IDApIHtcbiAgICAgICAgICAgICAgICBBcGkub3BlblBERihwZGZEYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQXBpLm9wZW5QREYocGRmRGF0YSwge1xuICAgICAgICAgICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHRoZSBmaXJzdCBAUERGIGxpbmsgaW4gdGhlIHRleHQgd2l0aCBhIHJpY2ggbGluay5cbiAgICAgKiBAcGFyYW0gdGV4dFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZW5yaWNoKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHNQb3MgPSB0ZXh0LmluZGV4T2YoJ0AnKTtcbiAgICAgICAgY29uc3QgZVBvcyA9IHRleHQuaW5kZXhPZignfScsIHNQb3MpO1xuXG4gICAgICAgIGNvbnN0IGVucmljaE1lID0gdGV4dC5zbGljZShzUG9zLCBlUG9zICsgMSk7XG5cbiAgICAgICAgY29uc3QgbEJyYWNrZXQgPSBlbnJpY2hNZS5pbmRleE9mKCdbJyk7XG4gICAgICAgIGNvbnN0IHJCcmFja2V0ID0gZW5yaWNoTWUuaW5kZXhPZignXScpO1xuICAgICAgICBjb25zdCBsQ3VybHkgPSBlbnJpY2hNZS5pbmRleE9mKCd7Jyk7XG4gICAgICAgIGNvbnN0IHJDdXJseSA9IGVucmljaE1lLmluZGV4T2YoJ30nKTtcblxuICAgICAgICAvLyBSZXF1aXJlZCBjaGFyYWN0ZXIgaXMgbWlzc2luZ1xuICAgICAgICBpZiAobEJyYWNrZXQgPT09IC0xIHx8IHJCcmFja2V0ID09PSAtMSB8fCBsQ3VybHkgPT09IC0xIHx8IHJDdXJseSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5FTlJJQ0guSW52YWxpZEZvcm1hdCcpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPcmRlciBpcyBub3QgY29ycmVjdFxuICAgICAgICBpZiAockN1cmx5IDwgbEN1cmx5IHx8IGxDdXJseSA8IHJCcmFja2V0IHx8IHJCcmFja2V0IDwgbEJyYWNrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5FTlJJQ0guSW52YWxpZEZvcm1hdCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBlbnJpY2hNZS5zbGljZShsQnJhY2tldCArIDEsIHJCcmFja2V0KTtcbiAgICAgICAgLy8gTXVsdGlwbGUgZGl2aWRlcnMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZXhPZignfCcpICE9PSBvcHRpb25zLmxhc3RJbmRleE9mKCd8JykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5FTlJJQ0guSW52YWxpZEZvcm1hdCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaW5rVGV4dCA9IGVucmljaE1lLnNsaWNlKGxDdXJseSArIDEsIHJDdXJseSk7XG4gICAgICAgIC8vIEVtcHR5IG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgICAgIGlmIChsaW5rVGV4dCA9PT0gdW5kZWZpbmVkIHx8IGxpbmtUZXh0ID09PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkVOUklDSC5FbXB0eUxpbmtUZXh0JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhZ2VOdW1iZXIgPSAwO1xuICAgICAgICBjb25zdCBbbmFtZU9yQ29kZSwgcXVlcnlTdHJpbmddID0gb3B0aW9ucy5zcGxpdCgnfCcpO1xuXG4gICAgICAgIC8vIEdldHRpbmcgdGhlIFBERiB3aXRob3V0IGludmlzaWJsZSBQREZzIHRvIGNoZWNrIHBlcm1pc3Npb25zXG4gICAgICAgIGxldCBwZGZEYXRhID0gQXBpLmZpbmRQREZEYXRhKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lID09PSBuYW1lT3JDb2RlIHx8IGRhdGEuY29kZSA9PT0gbmFtZU9yQ29kZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChwZGZEYXRhKSB7XG4gICAgICAgICAgICAvLyBDYXNlIDEgLSBVc2VyIGhhcyBwZXJtaXNzaW9ucyB0byBzZWUgdGhlIFBERlxuICAgICAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nICE9PSB1bmRlZmluZWQgJiYgcXVlcnlTdHJpbmcgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW18sIHBhZ2VTdHJpbmddID0gcXVlcnlTdHJpbmcuc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwYWdlTnVtYmVyID0gcGFyc2VJbnQocGFnZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHBhZ2UgbnVtYmVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFnZU51bWJlciA8IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BERk9VTkRSWS5FUlJPUi5QYWdlTXVzdEJlUG9zaXRpdmUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaTE4bk9wZW4gPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5FTlJJQ0guTGlua1RpdGxlT3BlbicpO1xuICAgICAgICAgICAgY29uc3QgaTE4blBhZ2UgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5FTlJJQ0guTGlua1RpdGxlUGFnZScpO1xuICAgICAgICAgICAgY29uc3QgbGlua1RpdGxlID0gYCR7aTE4bk9wZW59ICR7bmFtZU9yQ29kZX0gJHtpMThuUGFnZX0gJHtwYWdlTnVtYmVyfWA7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBgPGEgY2xhc3M9XCJwZGZvdW5kcnktbGlua1wiIHRpdGxlPVwiJHtsaW5rVGl0bGV9XCIgZGF0YS1yZWY9XCIke25hbWVPckNvZGV9XCIgZGF0YS1wYWdlPVwiJHtwYWdlTnVtYmVyfVwiPiR7bGlua1RleHR9PC9hPmA7XG5cbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIHNQb3MpICsgcmVzdWx0ICsgdGV4dC5zbGljZShlUG9zICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDYXNlIDIgLSBVc2VyIGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbnMgdG8gc2VlIHRoZSBQREZcbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKDAsIHNQb3MpICsgbGlua1RleHQgKyB0ZXh0LnNsaWNlKGVQb3MgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgYWxsIHJpY2ggdGV4dCBtYXJrdXAgd2l0aCBhcHByb3ByaWF0ZSByaWNoIHRleHQgSFRNTCBpbiB0aGUgc3BlY2lmaWVkIHRleHQuXG4gICAgICogQHBhcmFtIHRleHRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGVucmljaEFsbCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICB3aGlsZSAodGV4dC5pbmNsdWRlcygnQFBERicpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gSFRNTEVucmljaGVyLmVucmljaCh0ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRQREZEYXRhLCBpc0VudGl0eVBERiB9IGZyb20gJy4uL1V0aWwnO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBBIHBsdWdpbiBmb3IgVGlueU1DRSB0aGF0IGhhbmRsZXMgRHJhZyArIERyb3BcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlueU1DRVBsdWdpbiB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcGx1Z2luTmFtZSA9ICdQREZvdW5kcnlfSFRNTEVucmljaF9Ecm9wJztcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHBsdWdpbiB3aXRoIEZvdW5kcnkgKyBUaW55TUNFXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBSZWdpc3RlcigpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aW55TUNFLlBsdWdpbk1hbmFnZXIuYWRkKFRpbnlNQ0VQbHVnaW4ucGx1Z2luTmFtZSwgZnVuY3Rpb24gKGVkaXRvcikge1xuICAgICAgICAgICAgZWRpdG9yLm9uKCdCZWZvcmVTZXRDb250ZW50JywgKGV2ZW50KSA9PiBUaW55TUNFUGx1Z2luLkhhbmRsZShldmVudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgQ09ORklHLlRpbnlNQ0UucGx1Z2lucyA9IGAke1RpbnlNQ0VQbHVnaW4ucGx1Z2luTmFtZX0gJHtDT05GSUcuVGlueU1DRS5wbHVnaW5zfWA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgSGFuZGxlKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgaWYgKGV2ZW50LmluaXRpYWwpIHJldHVybjtcbiAgICAgICAgaWYgKCFldmVudC5zZWxlY3Rpb24gfHwgZXZlbnQuc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluaXRpYWxDb250ZW50ID0gZXZlbnQuY29udGVudDtcblxuICAgICAgICBjb25zdCBsQnJhY2tldCA9IGluaXRpYWxDb250ZW50LmluZGV4T2YoJ1snKTtcbiAgICAgICAgY29uc3QgckJyYWNrZXQgPSBpbml0aWFsQ29udGVudC5pbmRleE9mKCddJyk7XG4gICAgICAgIGNvbnN0IGVudGl0eUlkID0gaW5pdGlhbENvbnRlbnQuc2xpY2UobEJyYWNrZXQgKyAxLCByQnJhY2tldCk7XG5cbiAgICAgICAgY29uc3QgZW50aXR5ID0gZ2FtZSEuam91cm5hbCEuZ2V0KGVudGl0eUlkKTtcbiAgICAgICAgaWYgKGVudGl0eSA9PT0gdW5kZWZpbmVkIHx8ICFpc0VudGl0eVBERihlbnRpdHkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwZGZEYXRhID0gZ2V0UERGRGF0YShlbnRpdHkpO1xuICAgICAgICBpZiAocGRmRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2RlT3JOYW1lID0gcGRmRGF0YS5jb2RlID8gcGRmRGF0YS5jb2RlIDogcGRmRGF0YS5uYW1lO1xuXG4gICAgICAgIGV2ZW50LmNvbnRlbnQgPSBgQFBERlske2NvZGVPck5hbWV9fHBhZ2U9MV17JHtwZGZEYXRhLm5hbWV9fWA7XG4gICAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIxIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBERkRhdGEgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvUERGRGF0YSc7XG5pbXBvcnQgeyBQREZUeXBlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERlR5cGUnO1xuaW1wb3J0IHsgc2V0UERGRGF0YSB9IGZyb20gJy4uL1V0aWwnO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4uL1NldHRpbmdzJztcblxuLyoqXG4gKiBTaG91bGQgdGhpcyBtaWdyYXRpb24gcnVuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeU1pZ3JhdGlvblJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgIGlmIChTZXR0aW5ncy5nZXQoU2V0dGluZ3MuU0VUVElOR1NfS0VZLkRBVEFfVkVSU0lPTikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChnYW1lIS5pdGVtcyEuZmluZCgoaTogSXRlbSkgPT4gaS5kYXRhLnR5cGUgPT09ICdQREZvdW5kcnlfUERGJykgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgU2V0dGluZ3Muc2V0KFNldHRpbmdzLlNFVFRJTkdTX0tFWS5EQVRBX1ZFUlNJT04sICd2MC42LjAnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogT3BlbiB0aGUgbWlncmF0aW9uIHdpbmRvdyBmb3IgbWlncmF0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZ3JhdGVMZWdhY3koKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IGQgPSBuZXcgRGlhbG9nKHtcbiAgICAgICAgICAgIHRpdGxlOiAnUERGb3VuZHJ5OiBNaWdyYXRpb24gUmVxdWlyZWQnLFxuICAgICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgICAgICc8aDE+TWlncmF0aW9uIFJlcXVpcmVkPC9oMT4nLFxuICAgICAgICAgICAgICAgICc8cD5QREZvdW5kcnkgbXVzdCBjb252ZXJ0IGxlZ2FjeSBpdGVtcyB0byB0aGUgbmV3IEpvdXJuYWwgZm9ybWF0OyBZb3Ugd2lsbCBub3QgYmUgYWJsZSB0byB1c2UgUERGb3VuZHJ5IHVudGlsIHlvdSBkby48L3A+JyxcbiAgICAgICAgICAgICAgICAnPHA+SWYgeW91IHdpc2ggdG8gYmFja3VwIHlvdXIgd29ybGQgLSBqdXN0IGluIGNhc2UgLSB5b3UgbWF5IGRvIHNvIG5vdy48L3A+JyxcbiAgICAgICAgICAgICAgICAnPHA+UGxlYXNlIG5vdGUgZm9sZGVyIHN0cnVjdHVyZSB3aWxsIG5vdCBiZSBwcmVzZXJ2ZWQuPC9wPicsXG4gICAgICAgICAgICBdLmpvaW4oJycpLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHByb2NlZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnTWlncmF0ZSBOb3cnLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiByZWplY3QoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUmVtaW5kIE1lIExhdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHJlc29sdmUoKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdjYW5jZWwnLFxuICAgICAgICB9KTtcbiAgICAgICAgZC5yZW5kZXIodHJ1ZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogUnVuIHRoZSBjb252ZXJzaW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29udmVydCgpIHtcbiAgICBjb25zdCBpdGVtcyA9IGdhbWUhLml0ZW1zIS5maWx0ZXIoKGk6IEl0ZW0pID0+IGkuZGF0YS50eXBlID09PSAnUERGb3VuZHJ5X1BERicpIGFzIEl0ZW1bXTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgbGV0IHBkZkRhdGEgPSBnZXRMZWdhY3lEYXRhKGl0ZW0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IHBlcm1pc3Npb24gPSBpdGVtLmRhdGEucGVybWlzc2lvbjtcbiAgICAgICAgY29uc3Qgam91cm5hbEVudHJ5ID0gKGF3YWl0IEpvdXJuYWxFbnRyeS5jcmVhdGUoe1xuICAgICAgICAgICAgbmFtZTogcGRmRGF0YS5uYW1lLFxuICAgICAgICAgICAgcGVybWlzc2lvbixcbiAgICAgICAgfSkpIGFzIEpvdXJuYWxFbnRyeTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgcGRmRGF0YS5uYW1lO1xuXG4gICAgICAgIGF3YWl0IHNldFBERkRhdGEoam91cm5hbEVudHJ5LCBwZGZEYXRhKTtcbiAgICAgICAgYXdhaXQgaXRlbS5kZWxldGUoe30pO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB1aS5qb3VybmFsLnJlbmRlcigpO1xufVxuXG4vKipcbiAqIEdldCBsZWdhY3kgUERGIGRhdGEgJiB0eXBlXG4gKiBAcGFyYW0gaXRlbVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldExlZ2FjeURhdGEoaXRlbTogSXRlbSk6IFBERkRhdGEge1xuICAgIGNvbnN0IHR5cGVNYXAgPSB7XG4gICAgICAgIFBERm91bmRyeV9QREY6IFBERlR5cGUuU3RhdGljLFxuICAgICAgICBQREZvdW5kcnlfRmlsbGFibGVQREY6IFBERlR5cGUuRmlsbGFibGUsXG4gICAgICAgIFBERm91bmRyeV9GaWxsYWJsZUFjdG9yOiBQREZUeXBlLkFjdG9yLFxuICAgIH07XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGxldCB0eXBlID0gdHlwZU1hcFtpdGVtLmRhdGEuZGF0YS5wZGZfdHlwZV0gPz8gUERGVHlwZS5TdGF0aWM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogaXRlbS5kYXRhLm5hbWUsXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdXJsOiBpdGVtLmRhdGEuZGF0YS51cmwsXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29kZTogaXRlbS5kYXRhLmRhdGEuY29kZSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBvZmZzZXQ6IGl0ZW0uZGF0YS5kYXRhLm9mZnNldCxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWNoZTogaXRlbS5kYXRhLmRhdGEuY2FjaGUsXG4gICAgICAgIHR5cGUsXG4gICAgfTtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBQcmVsb2FkRXZlbnQgZnJvbSAnLi9ldmVudHMvUHJlbG9hZEV2ZW50JztcbmltcG9ydCBTdGF0aWNWaWV3ZXIgZnJvbSAnLi4vdmlld2VyL1N0YXRpY1ZpZXdlcic7XG5pbXBvcnQgQXBpIGZyb20gJy4uL0FwaSc7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuaW1wb3J0IFNldFZpZXdFdmVudCBmcm9tICcuL2V2ZW50cy9TZXRWaWV3RXZlbnQnO1xuaW1wb3J0IFBERkNhY2hlIGZyb20gJy4uL2NhY2hlL1BERkNhY2hlJztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgU29ja2V0IHtcbiAgICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemUoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ET1xuICAgICAgICBnYW1lLnNvY2tldC5vbihTZXR0aW5ncy5TT0NLRVRfTkFNRSwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdXNlcklkcywgdHlwZSwgcGF5bG9hZCB9ID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgLy8gbnVsbCA9IGFsbCB1c2Vycywgb3RoZXJ3aXNlIGNoZWNrIGlmIHRoaXMgZXZlbnQgZWZmZWN0cyB1c1xuICAgICAgICAgICAgICAgIGlmICh1c2VySWRzICE9PSBudWxsICYmICF1c2VySWRzLmluY2x1ZGVzKGdhbWUudXNlcklkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFNldFZpZXdFdmVudC5FVkVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgIFNvY2tldC5oYW5kbGVTZXRWaWV3KHBheWxvYWQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBQcmVsb2FkRXZlbnQuRVZFTlRfVFlQRSkge1xuICAgICAgICAgICAgICAgICAgICBTb2NrZXQuaGFuZGxlUHJlbG9hZFBERihwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLmluY2x1ZGVzKCdQREZPVU5EUlknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXZlbnQgb2YgdHlwZSAke3R5cGV9IGhhcyBubyBoYW5kbGVyLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFBhc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBoYW5kbGVTZXRWaWV3KGRhdGE6IGFueSkge1xuICAgICAgICBpZiAoU2V0dGluZ3MuZ2V0KFNldHRpbmdzLlNFVFRJTkdTX0tFWS5FWElTVElOR19WSUVXRVIpKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhcHBJc1ZpZXdlcihhcHA6IEFwcGxpY2F0aW9uKTogYXBwIGlzIFN0YXRpY1ZpZXdlciB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcFsncGRmRGF0YSddICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgYXBwIG9mIE9iamVjdC52YWx1ZXModWkud2luZG93cykpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFwcElzVmlld2VyKGFwcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcGRmRGF0YSA9IGFwcC5wZGZEYXRhO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLnBkZkRhdGEudXJsID09PSBwZGZEYXRhLnVybCkge1xuICAgICAgICAgICAgICAgICAgICBhcHAucGFnZSA9IGRhdGEucGFnZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFwcCBub3QgZm91bmQsIGZhbGwgdGhyb3VnaC5cbiAgICAgICAgfVxuICAgICAgICBBcGkub3BlblBERihkYXRhLnBkZkRhdGEsIHtcbiAgICAgICAgICAgIHBhZ2U6IGRhdGEucGFnZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBoYW5kbGVQcmVsb2FkUERGKGRhdGE6IGFueSkge1xuICAgICAgICBQREZDYWNoZS5wcmVsb2FkKGRhdGEudXJsKTtcbiAgICB9XG59XG4iLCIvKiBDb3B5cmlnaHQgMjAyMCBBbmRyZXcgQ3VjY2luZWxsb1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU29ja2V0RXZlbnQgZnJvbSAnLi9Tb2NrZXRFdmVudCc7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZEV2ZW50IGV4dGVuZHMgU29ja2V0RXZlbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEVWRU5UX1RZUEUoKSB7XG4gICAgICAgIHJldHVybiBgJHtzdXBlci5FVkVOVF9UWVBFfS9QUkVMT0FEX1BERmA7XG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBQcmVsb2FkRXZlbnQuRVZFTlRfVFlQRTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXJsOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcih1c2VySWRzOiBzdHJpbmdbXSB8IG51bGwsIHVybDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHVzZXJJZHMpO1xuXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRQYXlsb2FkKCk6IGFueSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBzdXBlci5nZXRQYXlsb2FkKCk7XG4gICAgICAgIHBheWxvYWQudXJsID0gdGhpcy51cmw7XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBTb2NrZXRFdmVudCBmcm9tICcuL1NvY2tldEV2ZW50JztcbmltcG9ydCB7IFBERkRhdGEgfSBmcm9tICcuLi8uLi9jb21tb24vdHlwZXMvUERGRGF0YSc7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0Vmlld0V2ZW50IGV4dGVuZHMgU29ja2V0RXZlbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEVWRU5UX1RZUEUoKSB7XG4gICAgICAgIHJldHVybiBgJHtzdXBlci5FVkVOVF9UWVBFfS9TRVRfVklFV2A7XG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBTZXRWaWV3RXZlbnQuRVZFTlRfVFlQRTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGFnZTogbnVtYmVyO1xuICAgIHB1YmxpYyBwZGZEYXRhOiBQREZEYXRhO1xuXG4gICAgY29uc3RydWN0b3IodXNlcklkczogc3RyaW5nW10gfCBudWxsLCBwZGZEYXRhOiBQREZEYXRhLCBwYWdlOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIodXNlcklkcyk7XG5cbiAgICAgICAgdGhpcy5wZGZEYXRhID0gcGRmRGF0YTtcbiAgICAgICAgdGhpcy5wYWdlID0gcGFnZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0UGF5bG9hZCgpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHN1cGVyLmdldFBheWxvYWQoKTtcbiAgICAgICAgcGF5bG9hZC5wZGZEYXRhID0gdGhpcy5wZGZEYXRhO1xuICAgICAgICBwYXlsb2FkLnBhZ2UgPSB0aGlzLnBhZ2U7XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbn1cbiIsIi8qIENvcHlyaWdodCAyMDIwIEFuZHJldyBDdWNjaW5lbGxvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuLi8uLi9TZXR0aW5ncyc7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU29ja2V0RXZlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoaXMgZXZlbnQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXQgRVZFTlRfVFlQRSgpIHtcbiAgICAgICAgcmV0dXJuICdQREZPVU5EUlknO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoaXMgZXZlbnQuXG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGdldCB0eXBlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBpZHMgdGhhdCBzaG91bGQgaGFuZGxlIHRoaXMgZXZlbnQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIHVzZXJJZHM6IHN0cmluZ1tdIHwgbnVsbDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih1c2VySWRzOiBzdHJpbmdbXSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy51c2VySWRzID0gdXNlcklkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW55IGRhdGEgdGhhdCB3aWxsIGJlIHNlbnQgd2l0aCB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFBheWxvYWQoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHB1YmxpYyBlbWl0KCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE9cbiAgICAgICAgZ2FtZS5zb2NrZXQuZW1pdChTZXR0aW5ncy5TT0NLRVRfTkFNRSwge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgdXNlcklkczogdGhpcy51c2VySWRzLFxuICAgICAgICAgICAgcGF5bG9hZDogdGhpcy5nZXRQYXlsb2FkKCksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuaW1wb3J0IEFjdG9yU2hlZXRTZWxlY3QgZnJvbSAnLi4vYXBwL0FjdG9yU2hlZXRTZWxlY3QnO1xuaW1wb3J0IHsgZ2V0QWJzb2x1dGVVUkwsIGdldFBERkRhdGEgfSBmcm9tICcuLi9VdGlsJztcbmltcG9ydCBQREZBY3RvclNoZWV0QWRhcHRlciBmcm9tICcuLi9hcHAvUERGQWN0b3JTaGVldEFkYXB0ZXInO1xuaW1wb3J0IEZpbGxhYmxlVmlld2VyIGZyb20gJy4vRmlsbGFibGVWaWV3ZXInO1xuaW1wb3J0IHsgUERGRGF0YSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9QREZEYXRhJztcbmltcG9ydCBQREZBY3RvckRhdGFCcm93c2VyIGZyb20gJy4uL2FwcC9QREZBY3RvckRhdGFCcm93c2VyJztcbmltcG9ydCB7IEFueURvY3VtZW50RGF0YSB9IGZyb20gJ0BsZWFndWUtb2YtZm91bmRyeS1kZXZlbG9wZXJzL2ZvdW5kcnktdnR0LXR5cGVzL3NyYy9mb3VuZHJ5L2NvbW1vbi9hYnN0cmFjdC9kYXRhLm1qcyc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJ0BsZWFndWUtb2YtZm91bmRyeS1kZXZlbG9wZXJzL2ZvdW5kcnktdnR0LXR5cGVzL3NyYy9mb3VuZHJ5L2NvbW1vbi9hYnN0cmFjdC9tb2R1bGUubWpzJztcblxuLyoqXG4gKiBUaGUgRmlsbGFibGVWaWV3ZXIgY2xhc3MgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBkaXNwbGF5aW5nLCBzZXJpYWxpemluZywgYW5kIG9ic2VydmluZyBmb3JtLWZpbGxhYmxlIFBERnMsXG4gKiAgYWxsIHdoaWxlIGNvbm5lY3RpbmcgdGhlaXIgZGF0YSB0byBhIHNwZWNpZmljIGFjdG9yLiBFeHRlbmRzIHRoZSBGaWxsYWJsZSBWaWV3ZXIuXG4gKiBAbW9kdWxlIEFQSVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3RvclZpZXdlciBleHRlbmRzIEZpbGxhYmxlVmlld2VyIHtcbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBQcm9wZXJ0aWVzXCI+PC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBNZXRob2RzXCI+PC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiUHJvcGVydGllc1wiPlxuICAgIHByb3RlY3RlZCBkb2N1bWVudDogRG9jdW1lbnQ8QW55RG9jdW1lbnREYXRhPjsgLy9UT0RPOiBDYW4gdHlwZSBwcm9wZXJseVxuICAgIHByb3RlY3RlZCBhY3RvclNoZWV0OiBQREZBY3RvclNoZWV0QWRhcHRlcjtcbiAgICAvLyA8L2VkaXRvci1mb2xkPlxuXG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJDb25zdHJ1Y3RvciAmIEluaXRpYWxpemF0aW9uXCI+XG4gICAgY29uc3RydWN0b3IoYWN0b3I6IERvY3VtZW50PEFueURvY3VtZW50RGF0YT4sIHBkZkRhdGE6IFBERkRhdGEsIHNoZWV0OiBQREZBY3RvclNoZWV0QWRhcHRlciwgb3B0aW9ucz86IEFwcGxpY2F0aW9uLk9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoYWN0b3IsIHBkZkRhdGEsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBhY3RvcjtcbiAgICAgICAgdGhpcy5hY3RvclNoZWV0ID0gc2hlZXQ7XG4gICAgfVxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQubmFtZSE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBVUkwgZm9yIHRoZSBjdXJyZW50IHNoZWV0IGZyb20gdGhlIGFjdG9yIGZsYWdzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTaGVldElkKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmdldEZsYWcoU2V0dGluZ3MuTU9EVUxFX05BTUUsIFNldHRpbmdzLkZMQUdTX0tFWS5TSEVFVF9JRCkgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNhdmUgdGhlIFVSTCBmb3IgdGhlIGN1cnJlbnQgc2hlZXQgdG8gdGhlIGFjdG9yIGZsYWdzLlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBzZXRTaGVldElkKHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LnNldEZsYWcoU2V0dGluZ3MuTU9EVUxFX05BTUUsIFNldHRpbmdzLkZMQUdTX0tFWS5TSEVFVF9JRCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQudW5zZXRGbGFnKFNldHRpbmdzLk1PRFVMRV9OQU1FLCBTZXR0aW5ncy5GTEFHU19LRVkuU0hFRVRfSUQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHBkZiBkYXRhIGZvciB0aGUgY3VycmVudGx5IHNldCBQREYgc2hlZXQgaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2hlZXRQZGYoKTogUERGRGF0YSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRTaGVldElkKCk7XG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiBnZXRQREZEYXRhKGdhbWUhLmpvdXJuYWwhLmdldChpZCkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0SGVhZGVyQnV0dG9ucygpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnM6IGFueVtdID0gW107XG5cbiAgICAgICAgYnV0dG9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2xvc2UnLFxuICAgICAgICAgICAgY2xhc3M6ICdjbG9zZScsXG4gICAgICAgICAgICBpY29uOiAnZmFzIGZhLXRpbWVzJyxcbiAgICAgICAgICAgIC8vIGFjdG9yIHNoZWV0IGlzIHJlc3BvbnNpYmxlIGZvciBvdXIgY2xlYW4gdXBcbiAgICAgICAgICAgIG9uY2xpY2s6IChldikgPT4gdGhpcy5hY3RvclNoZWV0LmNsb3NlKCksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY2FuQ29uZmlndXJlID0gZ2FtZS51c2VyLmlzR00gfHwgKHRoaXMuZG9jdW1lbnQub3duZXIgJiYgZ2FtZS51c2VyLmNhbignVE9LRU5fQ09ORklHVVJFJykpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zWydlZGl0YWJsZSddICYmIGNhbkNvbmZpZ3VyZSkge1xuICAgICAgICAgICAgYnV0dG9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE8gMC44LnhcbiAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy50b2tlbiA/ICdUb2tlbicgOiAnUHJvdG90eXBlIFRva2VuJyxcbiAgICAgICAgICAgICAgICBjbGFzczogJ2NvbmZpZ3VyZS10b2tlbicsXG4gICAgICAgICAgICAgICAgaWNvbjogJ2ZhcyBmYS11c2VyLWNpcmNsZScsXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUT0RPIDAuOC54XG4gICAgICAgICAgICAgICAgb25jbGljazogKGV2KSA9PiB0aGlzLmFjdG9yU2hlZXQuX29uQ29uZmlndXJlVG9rZW4oZXYpLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJ1dHRvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTaGVldCcsXG4gICAgICAgICAgICAgICAgY2xhc3M6ICdjb25maWd1cmUtc2hlZXQnLFxuICAgICAgICAgICAgICAgIGljb246ICdmYXMgZmEtY29nJyxcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRPRE8gMC44LnhcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoZXYpID0+IHRoaXMuYWN0b3JTaGVldC5fb25Db25maWd1cmVTaGVldChldiksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYnV0dG9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ3BkZi1zaGVldC1zZWxlY3QnLFxuICAgICAgICAgICAgICAgIGljb246ICdmYXMgZmEtdXNlci1jb2cnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5WSUVXRVIuU2VsZWN0U2hlZXQnKSxcbiAgICAgICAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldFNoZWV0SWQoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IEFjdG9yU2hlZXRTZWxlY3QoYXN5bmMgKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFNoZWV0SWQoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3RvclNoZWV0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGVldCA9IHRoaXMuZ2V0U2hlZXRQZGYoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGVldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0U2hlZXRJZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFjdG9yU2hlZXQucmVuZGVyKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBjdXJyZW50KS5yZW5kZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoZ2FtZSEudXNlciEuaXNHTSkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiAncGRmLWJyb3dzZS1kYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2ZhcyBmYS1zZWFyY2gnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuVklFV0VSLkluc3BlY3REYXRhJyksXG4gICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQREZBY3RvckRhdGFCcm93c2VyKHRoaXMuZG9jdW1lbnQgYXMgQWN0b3IpLnJlbmRlcih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBidXR0b25zO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkluc3RhbmNlIE1ldGhvZHNcIj5cblxuICAgIHByb3RlY3RlZCBhc3luYyBvblZpZXdlclJlYWR5KCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBzdXBlci5vblZpZXdlclJlYWR5KCk7XG4gICAgICAgIGNvbnN0IHNoZWV0ID0gdGhpcy5nZXRTaGVldFBkZigpO1xuICAgICAgICBpZiAoc2hlZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGdldEFic29sdXRlVVJMKHNoZWV0LnVybCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9wZW4odXJsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIG9wZW4ocGRmU291cmNlOiBzdHJpbmcgfCBVaW50OEFycmF5LCBwYWdlPzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChwZGZTb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdG9yIFNoZWV0cyBtdXN0IGJlIG9wZW5lZCBieSBJRCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHN1cGVyLm9wZW4ocGRmU291cmNlLCBwYWdlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ETzogVEhJUyBJUyBTVVBFUiBGVUNLSU5HIEhBQ0sgQU5EIFRIRSBXSE9MRSBGTE9XIE5FRURTIFRPIEJFIEFOQUxZWkVEXG4gICAgICAgICAgICBpZiAoIShhd2FpdCBzcmNFeGlzdHMocGRmU291cmNlKSkpIHtcbiAgICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnUERGT1VORFJZLkVSUk9SLkZpbGVOb3RGb3VuZCcpKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFNoZWV0SWQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3RvclNoZWV0LmNsb3NlKCk7XG4gICAgICAgICAgICBuZXcgUERGQWN0b3JTaGVldEFkYXB0ZXIodGhpcy5kb2N1bWVudCBhcyBBY3RvciwgdGhpcy5vcHRpb25zIGFzIGFueSkucmVuZGVyKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuaW1wb3J0IEV2ZW50U3RvcmUgZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvZXZlbnRzJztcbmltcG9ydCB7IFBERlZpZXdlckV2ZW50IH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERkhvb2tzJztcbmltcG9ydCB7IFBERmpzVmlld2VyIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERmpzVmlld2VyJztcbmltcG9ydCB7IFBERmpzRXZlbnRCdXMgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvUERGanNFdmVudEJ1cyc7XG5pbXBvcnQgeyBCVVRUT05fR0lUSFVCLCBCVVRUT05fS09GSSB9IGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL2hlYWRlcic7XG5pbXBvcnQgQXBpIGZyb20gJy4uL0FwaSc7XG5pbXBvcnQgeyBnZXRBYnNvbHV0ZVVSTCB9IGZyb20gJy4uL1V0aWwnO1xuXG4vKipcbiAqIFRoZSBiYXNlIHZpZXdlciBjbGFzcyBmcm9tIHdoaWNoIGFsbCBvdGhlciB0eXBlcyBvZiB2aWV3ZXJzIGluaGVyaXQuXG4gKiBAc2VlIHtAbGluayBTdGF0aWNWaWV3ZXJ9XG4gKiBAc2VlIHtAbGluayBGaWxsYWJsZVZpZXdlcn1cbiAqIEBzZWUge0BsaW5rIEFjdG9yVmlld2VyfVxuICogQG1vZHVsZSBBUElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVZpZXdlciBleHRlbmRzIEFwcGxpY2F0aW9uIHtcbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBQcm9wZXJ0aWVzXCI+XG5cbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gc3VwZXIuZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMuY2xhc3NlcyA9IFsnYXBwJywgJ3dpbmRvdy1hcHAnLCAncGRmb3VuZHJ5LXZpZXdlciddO1xuICAgICAgICBvcHRpb25zLnRlbXBsYXRlID0gYCR7U2V0dGluZ3MuUEFUSF9URU1QTEFURVN9L2FwcC92aWV3ZXIvc3RhdGljLmh0bWxgO1xuICAgICAgICBvcHRpb25zLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuVklFV0VSLlZpZXdQREYnKTtcbiAgICAgICAgb3B0aW9ucy53aWR0aCA9IDguNSAqIDEwMCArIDY0O1xuICAgICAgICBvcHRpb25zLmhlaWdodCA9IDExICogMTAwICsgNjQ7XG4gICAgICAgIG9wdGlvbnMucmVzaXphYmxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiUHJvcGVydGllc1wiPlxuXG4gICAgcHJvdGVjdGVkIF9mcmFtZTogSFRNTElGcmFtZUVsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIF92aWV3ZXI6IFBERmpzVmlld2VyO1xuICAgIHByb3RlY3RlZCBfZXZlbnRCdXM6IFBERmpzRXZlbnRCdXM7XG4gICAgcHJvdGVjdGVkIF9ldmVudFN0b3JlOiBFdmVudFN0b3JlPFBERlZpZXdlckV2ZW50PjtcblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkNvbnN0cnVjdG9yICYgSW5pdGlhbGl6YXRpb25cIj5cblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihvcHRpb25zPzogQXBwbGljYXRpb24uT3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZXZlbnRTdG9yZSA9IG5ldyBFdmVudFN0b3JlPFBERlZpZXdlckV2ZW50PigpO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkluc3RhbmNlIE1ldGhvZHNcIj5cblxuICAgIC8qKlxuICAgICAqIEZpbmlzaCB0aGUgZG93bmxvYWQgYW5kIHJldHVybiB0aGUgYnl0ZSBhcnJheSBmb3IgdGhlIGZpbGUuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8ge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1VpbnQ4QXJyYXl8VWludDhBcnJheX1cbiAgICAgKiAgb2YgZmlsZSBieXRlcyBvbmNlIHRoYXQgZG93bmxvYWQgaXMgZmluaXNoZWQuIFlvdSBjYW4gcGFzcyB0aGlzIHRvIGEgdmlld2VyIHRvIG9wZW4gaXQsIG9yIGRvIHNvbWV0aGluZyBlbHNlIHdpdGggaXQuXG4gICAgICovXG4gICAgcHVibGljIGRvd25sb2FkKCk6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8VWludDhBcnJheT4oYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdlciA9IGF3YWl0IHRoaXMuZ2V0Vmlld2VyKCk7XG4gICAgICAgICAgICBsZXQgdGltZW91dDtcbiAgICAgICAgICAgIGNvbnN0IHJldHVybk9yV2FpdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmlld2VyLmRvd25sb2FkQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2aWV3ZXIucGRmRG9jdW1lbnQuZ2V0RGF0YSgpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHJldHVybk9yV2FpdCwgNTApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybk9yV2FpdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIGEgUERGXG4gICAgICogQHBhcmFtIHBkZlNvdXJjZSBBIFVSTCBvciBieXRlIGFycmF5IHRvIG9wZW4uXG4gICAgICogQHBhcmFtIHBhZ2UgVGhlIGluaXRpYWwgcGFnZSB0byBvcGVuIHRvXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIG9wZW4ocGRmU291cmNlOiBzdHJpbmcgfCBVaW50OEFycmF5LCBwYWdlPzogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBkZmpzVmlld2VyID0gYXdhaXQgdGhpcy5nZXRWaWV3ZXIoKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBwYWdlID0gcGFyc2VJbnQocGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFnZSkge1xuICAgICAgICAgICAgcGRmanNWaWV3ZXIuaW5pdGlhbEJvb2ttYXJrID0gYHBhZ2U9JHtwYWdlfWA7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBwZGZqc1ZpZXdlci5pbml0aWFsaXplZFByb21pc2U7XG4gICAgICAgIGF3YWl0IHBkZmpzVmlld2VyLm9wZW4ocGRmU291cmNlKTtcbiAgICAgICAgYXdhaXQgcGRmanNWaWV3ZXIucGRmVmlld2VyLnBhZ2VzUHJvbWlzZTtcblxuICAgICAgICAvLyBTZWUgIzE5IC0gZml4ZXMgb3RoZXIgc2Nyb2xsIG1vZGVzIG5vdCBsb2FkaW5nIHdpdGggaW5pdGlhbCBib29rbWFya1xuICAgICAgICBpZiAocGFnZSAmJiBwZGZqc1ZpZXdlci5wYWdlICE9PSBwYWdlKSB7XG4gICAgICAgICAgICBwZGZqc1ZpZXdlci5wYWdlID0gcGFnZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnRseSB2aWV3ZWQgcGFnZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3ZXIucGFnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnRseSB2aWV3ZWQgcGFnZS5cbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IHBhZ2UodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl92aWV3ZXIucGFnZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvY2FsaXplZCBuYW1lIG9mIHRoZSB3aW5kb3cgdGl0bGUuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgcHVibGljIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuVklFV0VSLlZpZXdQREYnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXYWl0IGZvciB0aGUgaW50ZXJuYWwgUERGanMgdmlld2VyIHRvIGJlIHJlYWR5IGFuZCB1c2FibGUuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFZpZXdlcigpOiBQcm9taXNlPFBERmpzVmlld2VyPiB7XG4gICAgICAgIGlmICh0aGlzLl92aWV3ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fdmlld2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGltZW91dDtcbiAgICAgICAgICAgIGNvbnN0IHJldHVybk9yV2FpdCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvdXIgd2luZG93IGhhcyBmaW5pc2hlZCBpbml0aWFsaXppbmcuLi5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgUERGanMgaGFzIGZpbmlzaGVkIGluaXRpYWxpemluZy4uLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWUuY29udGVudFdpbmRvdyAmJiB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93WydQREZWaWV3ZXJBcHBsaWNhdGlvbiddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3ZXIgPSB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93WydQREZWaWV3ZXJBcHBsaWNhdGlvbiddO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZpZXdlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhbnkgaWZzIGZhbGwgdGhyb3VnaCwgdHJ5IGFnYWluIGluIGEgZmV3IG1zXG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQocmV0dXJuT3JXYWl0LCA1KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm5PcldhaXQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2FpdCBmb3IgdGhlIGludGVybmFsIFBERmpzIGV2ZW50QnVzIHRvIGJlIHJlYWR5IGFuZCB1c2FibGUuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEV2ZW50QnVzKCk6IFByb21pc2U8UERGanNFdmVudEJ1cz4ge1xuICAgICAgICBpZiAodGhpcy5fZXZlbnRCdXMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fZXZlbnRCdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Vmlld2VyKCkudGhlbigodmlld2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmV0dXJuT3JXYWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmlld2VyLmV2ZW50QnVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZpZXdlci5ldmVudEJ1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQocmV0dXJuT3JXYWl0LCA1KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybk9yV2FpdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkZvdW5kcnkgT3ZlcnJpZGVzXCI+XG5cbiAgICBwcm90ZWN0ZWQgX2dldEhlYWRlckJ1dHRvbnMoKTogYW55W10ge1xuICAgICAgICBjb25zdCBidXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKTtcbiAgICAgICAgYnV0dG9ucy51bnNoaWZ0KEJVVFRPTl9HSVRIVUIpO1xuICAgICAgICBidXR0b25zLnVuc2hpZnQoQlVUVE9OX0tPRkkpO1xuICAgICAgICByZXR1cm4gYnV0dG9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0RGF0YShvcHRpb25zPzogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZGF0YTogYW55ID0gYXdhaXQgc3VwZXIuZ2V0RGF0YShvcHRpb25zKTtcbiAgICAgICAgZGF0YS52aWV3ZXJGcmFtZVBhdGggPSBgJHtTZXR0aW5ncy5QQVRIX1BERkpTfS93ZWIvdmlld2VyLmh0bWxgO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbDogSlF1ZXJ5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMub25WaWV3ZXJPcGVuaW5nKCk7XG4gICAgICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gaHRtbC5wYXJlbnQoKS5maW5kKCdpZnJhbWUucGRmVmlld2VyJykuZ2V0KDApIGFzIEhUTUxJRnJhbWVFbGVtZW50O1xuICAgICAgICB0aGlzLmdldFZpZXdlcigpLnRoZW4oYXN5bmMgKHZpZXdlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdmlld2VyID0gdmlld2VyO1xuXG4gICAgICAgICAgICBjb25zdCB0aGVtZSA9IEFwaS5hY3RpdmVUaGVtZTtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lRG9jdW1lbnQgPSAkKHRoaXMuX2ZyYW1lLmNvbnRlbnREb2N1bWVudCBhcyBEb2N1bWVudCk7XG4gICAgICAgICAgICBmcmFtZURvY3VtZW50Lm9uKCdjbGljaycsKCkgPT4gdGhpcy5icmluZ1RvVG9wKCkpO1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IGZyYW1lRG9jdW1lbnQuZmluZCgnaGVhZCcpO1xuICAgICAgICAgICAgaGVhZC5hcHBlbmQoJChgPGxpbmsgaHJlZj1cIiR7Z2V0QWJzb2x1dGVVUkwodGhlbWUuZmlsZVBhdGgpfVwiIHJlbD1cInN0eWxlc2hlZXRcIiB0eXBlPVwidGV4dC9jc3NcIiBtZWRpYT1cImFsbFwiPmApKTtcblxuICAgICAgICAgICAgdGhpcy5vblZpZXdlck9wZW5lZCgpO1xuXG4gICAgICAgICAgICB0aGlzLmdldEV2ZW50QnVzKCkudGhlbigoZXZlbnRCdXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudEJ1cyA9IGV2ZW50QnVzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50QnVzLm9uKCdwYWdlcmVuZGVyZWQnLCB0aGlzLm9uUGFnZVJlbmRlcmVkLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50QnVzLm9uKCdwYWdlY2hhbmdpbmcnLCB0aGlzLm9uUGFnZUNoYW5naW5nLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50QnVzLm9uKCd1cGRhdGV2aWV3YXJlYScsIHRoaXMub25WaWV3QXJlYVVwZGF0ZWQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRCdXMub24oJ3NjYWxlY2hhbmdpbmcnLCB0aGlzLm9uU2NhbGVDaGFuZ2luZy5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMub25WaWV3ZXJSZWFkeSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIF9nZXRIZWFkZXJCdXR0b25zIGRvZXMgbm90IHBlcm1pdCB0aXRsZSBhdHRyaWJ1dGVzIHVzZWQgZm9yIHRvb2x0aXBzLi4uXG4gICAgICAgICQoaHRtbCkucGFyZW50cygpLnBhcmVudHMoKS5maW5kKCcucGRmLXNoZWV0LXNob3ctcGxheWVycycpLnByb3AoJ3RpdGxlJywgZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuVklFV0VSLlNob3dUb1BsYXllcnNUaXRsZScpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgYXBwbGljYXRpb24gYW5kIHVuLXJlZ2lzdGVyIHJlZmVyZW5jZXMgdG8gaXQgd2l0aGluIFVJIG1hcHBpbmdzXG4gICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZSB3aGljaCByZXNvbHZlcyBvbmNlIHRoZSB3aW5kb3cgY2xvc2luZyBhbmltYXRpb24gY29uY2x1ZGVzXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLm9uVmlld2VyQ2xvc2luZygpO1xuXG4gICAgICAgIGF3YWl0IHN1cGVyLmNsb3NlKCk7XG5cbiAgICAgICAgdGhpcy5vblZpZXdlckNsb3NlZCgpO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkV2ZW50c1wiPlxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdmlld2VyIHdpbmRvdyBmaXJzdCBzdGFydHMgb3BlbmluZ1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25WaWV3ZXJPcGVuaW5nKCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3ZpZXdlck9wZW5pbmcnLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB2aWV3ZXIgd2luZG93IGlzIGZ1bGx5IG9wZW5lZCwgYnV0IG5vdCB5ZXQgcmVhZHlcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG9uVmlld2VyT3BlbmVkKCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3ZpZXdlck9wZW5lZCcsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHZpZXdlciB3aW5kb3cgaXMgZnVsbHkgb3BlbmVkIGFuZCBpcyByZWFkeSBmb3IgdXNlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblZpZXdlclJlYWR5KCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3ZpZXdlclJlYWR5JywgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdmlld2VyIHdpbmRvdyBmaXJzdCBzdGFydHMgY2xvc2luZ1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25WaWV3ZXJDbG9zaW5nKCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3ZpZXdlckNsb3NpbmcnLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB2aWV3ZXIgd2luZG93IGlzIGZ1bGx5IGNsb3NlZFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25WaWV3ZXJDbG9zZWQoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50U3RvcmUuZmlyZSgndmlld2VyQ2xvc2VkJywgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2NjdXJzIGR1cmluZyBzY3JvbGxpbmcgd2hlbiBhIHBhZ2UgcGFzc2VzIHRoZSBicmVha3BvaW50XG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblBhZ2VDaGFuZ2luZyhldmVudCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3BhZ2VDaGFuZ2luZycsIHRoaXMsIHtcbiAgICAgICAgICAgIHBhZ2VMYWJlbDogZXZlbnQucGFnZUxhYmVsLFxuICAgICAgICAgICAgcGFnZU51bWJlcjogZXZlbnQucGFnZU51bWJlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2NjdXJzIHdoZW4gYSBuZXcgcGFnZSBpcyBsb2FkZWQgYW5kIHJlbmRlcmVkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblBhZ2VSZW5kZXJlZChldmVudCkge1xuICAgICAgICB0aGlzLl9ldmVudFN0b3JlLmZpcmUoJ3BhZ2VSZW5kZXJlZCcsIHRoaXMsIHtcbiAgICAgICAgICAgIHBhZ2VOdW1iZXI6IGV2ZW50LnBhZ2VOdW1iZXIsXG4gICAgICAgICAgICBwYWdlTGFiZWw6IGV2ZW50LnNvdXJjZS5wYWdlTGFiZWwsXG4gICAgICAgICAgICB3aWR0aDogZXZlbnQuc291cmNlLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBldmVudC5zb3VyY2UuaGVpZ2h0LFxuICAgICAgICAgICAgcm90YXRpb246IGV2ZW50LnNvdXJjZS5yb3RhdGlvbixcbiAgICAgICAgICAgIHNjYWxlOiBldmVudC5zb3VyY2Uuc2NhbGUsXG4gICAgICAgICAgICBjYW52YXM6IGV2ZW50LnNvdXJjZS5jYW52YXMsXG4gICAgICAgICAgICBkaXY6IGV2ZW50LnNvdXJjZS5kaXYsXG4gICAgICAgICAgICBlcnJvcjogZXZlbnQuc291cmNlLmVycm9yLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPY2N1cnMgd2hlbiB0aGUgem9vbSBpcyBjaGFuZ2VkIG9yIHdpbmRvdyBzY3JvbGxlZFxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgb25WaWV3QXJlYVVwZGF0ZWQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRTdG9yZS5maXJlKCd2aWV3QXJlYVVwZGF0ZWQnLCB0aGlzLCB7XG4gICAgICAgICAgICB0b3A6IGV2ZW50LmxvY2F0aW9uLnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGV2ZW50LmxvY2F0aW9uLmxlZnQsXG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBldmVudC5sb2NhdGlvbi5wYWdlTnVtYmVyLFxuICAgICAgICAgICAgcm90YXRpb246IGV2ZW50LmxvY2F0aW9uLnJvdGF0aW9uLFxuICAgICAgICAgICAgc2NhbGU6IGV2ZW50LmxvY2F0aW9uLnNjYWxlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPY2N1cnMgd2hlbiB0aGUgem9vbSBpcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBvblNjYWxlQ2hhbmdpbmcoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRTdG9yZS5maXJlKCdzY2FsZUNoYW5naW5nJywgdGhpcywge1xuICAgICAgICAgICAgcHJlc2V0VmFsdWU6IGV2ZW50LnByZXNldFZhbHVlLFxuICAgICAgICAgICAgc2NhbGU6IGV2ZW50LnNjYWxlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIG9jY3VyIHdoZW4gYW4gZXZlbnQgZmlyZXMuIFNlZSBpbmRpdmlkdWFsIGV2ZW50cyBmb3IgZGVzY3JpcHRpb25zIGFuZCB1c2Uge0BsaW5rIEFwaS5ERUJVRy5FVkVOVFN9IHRvIGxvZyBhbmQgYW5hbHl6ZSBldmVudHMuXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAqIEBjYXRlZ29yeSBFdmVudHNcbiAgICAgKi9cbiAgICBwdWJsaWMgb24oZXZlbnROYW1lOiBQREZWaWV3ZXJFdmVudCwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2V2ZW50U3RvcmUub24oZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVyZWdpc3RlciBhbiBldmVudCB0aGF0IGhhcyBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB7QGxpbmsgb259IG9yIHtAbGluayBvbmNlfS5cbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICogQGNhdGVnb3J5IEV2ZW50c1xuICAgICAqL1xuICAgIHB1YmxpYyBvZmYoZXZlbnROYW1lOiBQREZWaWV3ZXJFdmVudCwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2V2ZW50U3RvcmUub2ZmKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpa2Uge0BsaW5rIG9ufSBidXQgb25seSBmaXJlcyBvbiB0aGUgbmV4dCBvY2N1cnJlbmNlLlxuICAgICAqIEBwYXJhbSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgKiBAY2F0ZWdvcnkgRXZlbnRzXG4gICAgICovXG4gICAgcHVibGljIG9uY2UoZXZlbnROYW1lOiBQREZWaWV3ZXJFdmVudCwgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2V2ZW50U3RvcmUub25jZShldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxufVxuIiwiLypcbiAqIENvcHlyaWdodCAyMDIyIEFuZHJldyBDdWNjaW5lbGxvXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBCYXNlVmlld2VyIGZyb20gJy4vQmFzZVZpZXdlcic7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vU2V0dGluZ3MnO1xuaW1wb3J0IHsgUERGRGF0YSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9QREZEYXRhJztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnQGxlYWd1ZS1vZi1mb3VuZHJ5LWRldmVsb3BlcnMvZm91bmRyeS12dHQtdHlwZXMvc3JjL2ZvdW5kcnkvY29tbW9uL2Fic3RyYWN0L21vZHVsZS5tanMnO1xuaW1wb3J0IHsgQW55RG9jdW1lbnREYXRhIH0gZnJvbSAnQGxlYWd1ZS1vZi1mb3VuZHJ5LWRldmVsb3BlcnMvZm91bmRyeS12dHQtdHlwZXMvc3JjL2ZvdW5kcnkvY29tbW9uL2Fic3RyYWN0L2RhdGEubWpzJztcblxuLy8gVE9ETzogTW92ZSB0byB3cmFwcGVkIGlucHV0IG1vZGVsIHRvIHN0YW5kYXJkaXplIGlucHV0cy5cbi8vICBDdXJyZW50IGNvZGUgaXMgaW5zYW5lIGFuZCBoYXMgdG9vIG11Y2ggYnJhbmNoaW5nLlxuLy8gIEZhY3Rvcnkgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSB3cmFwcGVkIGlucHV0cy5cbi8vIC8qKlxuLy8gICogV3JhcHMgYW4gaW5wdXQgdG8gc3RhbmRhcmRpemUgb3BlcmF0aW9ucyBvdmVyIHZhcmlvdXMgSFRNTCBlbGVtZW50cy5cbi8vICAqIEBpbnRlcm5hbFxuLy8gICovXG4vLyBhYnN0cmFjdCBjbGFzcyBGb3JtSW5wdXQ8VEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgVFZhbHVlPiB7XG4vLyAgICAgcHJvdGVjdGVkIF9lbGVtZW50OiBURWxlbWVudDtcbi8vICAgICBwcm90ZWN0ZWQgX25hbWU6IHN0cmluZztcbi8vICAgICBwcm90ZWN0ZWQgX3ZhbHVlOiBUVmFsdWU7XG4vL1xuLy8gICAgIHB1YmxpYyBzdGF0aWMgSXNPZlR5cGUoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbi8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIH1cbi8vXG4vLyAgICAgLyoqXG4vLyAgICAgICogUmV0dXJuIHRoZSBIVE1MIGVsZW1lbnQgZm9yIHRoaXMgaW5wdXQuXG4vLyAgICAgICovXG4vLyAgICAgcHVibGljIGdldCBlbGVtZW50KCkge1xuLy8gICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbi8vICAgICB9XG4vL1xuLy8gICAgIC8qKlxuLy8gICAgICAqIFJldHVybiB0aGUgbmFtZSBvZiB0aGlzIGlucHV0LlxuLy8gICAgICAqL1xuLy8gICAgIHB1YmxpYyBnZXQgbmFtZSgpIHtcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4vLyAgICAgfVxuLy9cbi8vICAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBlbGVtZW50OiBURWxlbWVudCwgdmFsdWU6IFRWYWx1ZSkge1xuLy8gICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbi8vICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4vLyAgICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4vL1xuLy8gICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLmF0dHIoJ25hbWUnLCB0aGlzLl9uYW1lKTtcbi8vICAgICB9XG4vL1xuLy8gICAgIC8qKlxuLy8gICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhpcyBpbnB1dC5cbi8vICAgICAgKi9cbi8vICAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0IHZhbHVlKCk7XG4vL1xuLy8gICAgIC8qKlxuLy8gICAgICAqIFNldCB0aGUgdmFsdWUgb2YgdGhpcyBpbnB1dC5cbi8vICAgICAgKiBAcGFyYW0gbmV3VmFsdWUgVGhlIHZhbHVlIHRvIHNldCB0by5cbi8vICAgICAgKi9cbi8vICAgICBwdWJsaWMgYWJzdHJhY3Qgc2V0IHZhbHVlKG5ld1ZhbHVlOiBUVmFsdWUpO1xuLy9cbi8vICAgICBwdWJsaWMgYWJzdHJhY3Qgb25JbnB1dENoYW5nZWQoZXZlbnQ6IEpRdWVyeS5DaGFuZ2VFdmVudCk7XG4vLyB9XG4vL1xuLy8gY2xhc3MgSW5wdXRJbnB1dCBleHRlbmRzIEZvcm1JbnB1dDxIVE1MSW5wdXRFbGVtZW50LCBzdHJpbmc+IHtcbi8vICAgICBwdWJsaWMgc3RhdGljIElzT2ZUeXBlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogZWxlbWVudCBpcyBIVE1MSW5wdXRFbGVtZW50IHtcbi8vICAgICAgICAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJztcbi8vICAgICB9XG4vL1xuLy8gICAgIG9uSW5wdXRDaGFuZ2VkKGV2ZW50OiBKUXVlcnkuQ2hhbmdlRXZlbnQpIHt9XG4vL1xuLy8gICAgIHB1YmxpYyBnZXQgdmFsdWUoKSB7XG4vLyAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbi8vICAgICB9XG4vL1xuLy8gICAgIHB1YmxpYyBzZXQgdmFsdWUobmV3VmFsdWU6IHN0cmluZykge1xuLy8gICAgICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuLy8gICAgIH1cbi8vIH1cblxuLyoqXG4gKiBIYW5kbGVzIGJhc2UgZm9ybSBmaWxsYWJsZSBzdXBwb3J0LCBjYW4gYmUgdXNlZCBhcyBhIHN0YW5kIGFsb25lIGZvcm0gZmlsbGFibGUgdmlld2VyLlxuICogQG1vZHVsZSBBUElcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsbGFibGVWaWV3ZXIgZXh0ZW5kcyBCYXNlVmlld2VyIHtcbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBQcm9wZXJ0aWVzXCI+XG5cbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gc3VwZXIuZGVmYXVsdE9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMudGVtcGxhdGUgPSBgJHtTZXR0aW5ncy5QQVRIX1RFTVBMQVRFU30vYXBwL3ZpZXdlci9maWxsYWJsZS5odG1sYDtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlN0YXRpYyBNZXRob2RzXCI+XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSB0aGUgZGF0YSBwYXRoIG9mIHRoZSBrZXkuXG4gICAgICogQHBhcmFtIHBhdGhcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgc3RhdGljIGRhdGFQYXRoVmFsaWQocGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhcGF0aC5pbmNsdWRlcygnX2lkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRml4IGtleXMgYnkgcmVtb3ZpbmcgaW52YWxpZCBjaGFyYWN0ZXJzXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzdGF0aWMgZml4S2V5KGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKGBkYXRhLmApKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAga2V5ID0ga2V5LnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIGtleS5yZXBsYWNlKC9cXHMvZywgJ18nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIGEga2V5IHBhdGggdG8gdGhlIHByb3BlciBmbGF0dGVuZWQga2V5XG4gICAgICogQHBhcmFtIGtleVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzdGF0aWMgcmVzb2x2ZUtleVBhdGgoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoa2V5ID09PSAnbmFtZScpIHJldHVybiBrZXk7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChgZGF0YS5gKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZml4S2V5KGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYGZsYWdzLiR7U2V0dGluZ3MuTU9EVUxFX05BTUV9LiR7U2V0dGluZ3MuRkxBR1NfS0VZLkZPUk1fREFUQX0uJHt0aGlzLmZpeEtleShrZXkpfWA7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIlByb3BlcnRpZXNcIj5cblxuICAgIHByb3RlY3RlZCBkb2N1bWVudDogRG9jdW1lbnQ8QW55RG9jdW1lbnREYXRhPjsgLy8gVE9ETzogQ2FuIHR5cGUgdGhpcyBwcm9wZXJseS5cbiAgICBwcm90ZWN0ZWQgcGRmRGF0YTogUERGRGF0YTtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSlF1ZXJ5O1xuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkNvbnN0cnVjdG9yICYgSW5pdGlhbGl6YXRpb25cIj5cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQ8QW55RG9jdW1lbnREYXRhPiwgcGRmRGF0YTogUERGRGF0YSwgb3B0aW9ucz86IEFwcGxpY2F0aW9uLk9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICB0aGlzLnBkZkRhdGEgPSBwZGZEYXRhO1xuXG4gICAgICAgIHRoaXMuYmluZEhvb2tzKCk7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkdldHRlcnMgJiBTZXR0ZXJzXCI+XG5cbiAgICBwdWJsaWMgZ2V0IHRpdGxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50Lm5hbWUgPz8gc3VwZXIudGl0bGU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZsYXR0ZW5FbnRpdHkoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBmbGF0dGVuT2JqZWN0KHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZG9jdW1lbnQubmFtZSxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZG9jdW1lbnQuZGF0YVsnZGF0YSddLFxuICAgICAgICAgICAgZmxhZ3M6IHRoaXMuZG9jdW1lbnQuZGF0YVsnZmxhZ3MnXSxcbiAgICAgICAgfSkgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuICAgICAgICAvLyBEbyBub3QgYWxsb3cgbm9uLWRhdGEga2V5cyB0byBtYWtlIGl0IGludG8gdGhlIGZsYXQgb2JqZWN0XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGRhdGEpKSB7XG4gICAgICAgICAgICBpZiAoIUZpbGxhYmxlVmlld2VyLmRhdGFQYXRoVmFsaWQoa2V5KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiSW5zdGFuY2UgTWV0aG9kc1wiPlxuXG4gICAgcHJvdGVjdGVkIGJpbmRIb29rcygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRbJ3V1aWQnXS5zdGFydHNXaXRoKCdBY3RvcicpKSB7XG4gICAgICAgICAgICBIb29rcy5vbigndXBkYXRlQWN0b3InLCB0aGlzLm9uVXBkYXRlRW50aXR5LmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9jdW1lbnRbJ3V1aWQnXS5zdGFydHNXaXRoKCdJdGVtJykpIHtcbiAgICAgICAgICAgIEhvb2tzLm9uKCd1cGRhdGVJdGVtJywgdGhpcy5vblVwZGF0ZUVudGl0eS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCB1bmJpbmRIb29rcygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRbJ3V1aWQnXS5zdGFydHNXaXRoKCdBY3RvcicpKSB7XG4gICAgICAgICAgICBIb29rcy5vZmYoJ3VwZGF0ZUFjdG9yJywgdGhpcy5vblVwZGF0ZUVudGl0eS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRvY3VtZW50Wyd1dWlkJ10uc3RhcnRzV2l0aCgnSXRlbScpKSB7XG4gICAgICAgICAgICBIb29rcy5vZmYoJ3VwZGF0ZUl0ZW0nLCB0aGlzLm9uVXBkYXRlRW50aXR5LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRJc0NoZWNrYm94KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogZWxlbWVudCBpcyBIVE1MSW5wdXRFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnY2hlY2tib3gnO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBlbGVtZW50SXNJbnB1dChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGVsZW1lbnQgaXMgSFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQge1xuICAgICAgICByZXR1cm4gKGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbGVtZW50LnRhZ05hbWUgPT09ICdURVhUQVJFQScpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgIT09ICdyYWRpbyc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRJc1NlbGVjdChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGVsZW1lbnQgaXMgSFRNTFNlbGVjdEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lID09PSAnU0VMRUNUJztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZWxlbWVudElzUmFkaW8oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBlbGVtZW50IGlzIEhUTUxJbnB1dEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdyYWRpbyc7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uUGFnZVJlbmRlcmVkKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IFBPTExfSU5URVJWQUwgPSA1O1xuICAgICAgICBjb25zdCBNQVhfUE9MTF9USU1FID0gMjUwO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSAkKGV2ZW50LnNvdXJjZS5kaXYpO1xuXG4gICAgICAgIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRpbWVvdXQ7XG4gICAgICAgICAgICBsZXQgdG90YWxXYWl0ID0gMDtcbiAgICAgICAgICAgIGxldCBlbGVtZW50czogSlF1ZXJ5PEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQ+O1xuXG4gICAgICAgICAgICBjb25zdCByZXR1cm5PcldhaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHMgPSBjb250YWluZXIuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKSBhcyBKUXVlcnk8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudD47XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZWxlbWVudHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbFdhaXQgPCBNQVhfUE9MTF9USU1FKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsV2FpdCArPSBQT0xMX0lOVEVSVkFMO1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChyZXR1cm5PcldhaXQsIFBPTExfSU5URVJWQUwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGFnZSBkaWQgbm90IHJlbmRlciBpbiB0aGUgYWxsb3dlZCB0aW1lLicsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybk9yV2FpdCgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKGVsZW1lbnRzOiBKUXVlcnk8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudD4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluZXIgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmNvbnRhaW5lci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSAkKGNvbnRhaW5lci5wYXJlbnRzKCkuZmluZCgnI3ZpZXdlckNvbnRhaW5lcicpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVJbnB1dHMoZWxlbWVudHMpO1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudHMub24oJ2NoYW5nZScsIHRoaXMub25JbnB1dENoYW5nZWQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICBzdXBlci5vblBhZ2VSZW5kZXJlZChldmVudCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IGNvbnNvbGUuZXJyb3IocmVhc29uKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uSW5wdXRDaGFuZ2VkKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBsZXQgdmFsdWUgPSAnJztcblxuICAgICAgICBsZXQga2V5ID0gJChlbGVtZW50KS5hdHRyKCduYW1lJyk7XG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5ID0gRmlsbGFibGVWaWV3ZXIucmVzb2x2ZUtleVBhdGgoa2V5KTtcblxuICAgICAgICBpZiAoIUZpbGxhYmxlVmlld2VyLmRhdGFQYXRoVmFsaWQoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudElzQ2hlY2tib3goZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5nZXRDaGVja0lucHV0VmFsdWUoJChlbGVtZW50KSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50SXNJbnB1dChlbGVtZW50KSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmdldFRleHRJbnB1dFZhbHVlKCQoZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudElzU2VsZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0VGV4dElucHV0VmFsdWUoJChlbGVtZW50IGFzIEhUTUxTZWxlY3RFbGVtZW50KSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbGVtZW50SXNSYWRpbyhlbGVtZW50KSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmdldFJhZGlvSW5wdXRWYWx1ZSgkKGVsZW1lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlKFxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlRGVsdGEodGhpcy5mbGF0dGVuRW50aXR5KCksIHtcbiAgICAgICAgICAgICAgICBba2V5XTogdmFsdWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzVG9VcGRhdGUgPSB0aGlzLmNvbnRhaW5lci5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplSW5wdXRzKGVsZW1lbnRzVG9VcGRhdGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZUlucHV0cyhlbGVtZW50czogSlF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IG9sZERhdGEgPSB0aGlzLmZsYXR0ZW5FbnRpdHkoKTtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IGR1cGxpY2F0ZShvbGREYXRhKTtcblxuICAgICAgICAvLyBMb2FkIGRhdGEgZnJvbSBzaGVldCBhcyBpbml0aWFsaXphdGlvbiBkYXRhXG4gICAgICAgIC8vIEZpbGwgaW4gZXhpc3RpbmcgZGF0YSB3aGVyZSBpdCBleGlzdHMgb24gdGhlIGFjdG9yXG4gICAgICAgIGxldCB3cml0ZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCAhRmlsbGFibGVWaWV3ZXIuZGF0YVBhdGhWYWxpZChrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGtleSA9IEZpbGxhYmxlVmlld2VyLnJlc29sdmVLZXlQYXRoKGtleSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRJc0NoZWNrYm94KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgd3JpdGUgPSB0aGlzLmluaXRpYWxpemVDaGVja0lucHV0KCQoZWxlbWVudCksIGtleSwgbmV3RGF0YSkgfHwgd3JpdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudElzSW5wdXQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB3cml0ZSA9IHRoaXMuaW5pdGlhbGl6ZVRleHRJbnB1dCgkKGVsZW1lbnQpLCBrZXksIG5ld0RhdGEpIHx8IHdyaXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRJc1NlbGVjdChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHdyaXRlID0gdGhpcy5pbml0aWFsaXplVGV4dElucHV0KCQoZWxlbWVudCksIGtleSwgbmV3RGF0YSkgfHwgd3JpdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudElzUmFkaW8oZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB3cml0ZSA9IHRoaXMuaW5pdGlhbGl6ZVJhZGlvSW5wdXQoJChlbGVtZW50KSwga2V5LCBuZXdEYXRhKSB8fCB3cml0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgaW5wdXQgdHlwZSBpbiBQREYuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod3JpdGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucmVzb2x2ZURlbHRhKG9sZERhdGEsIG5ld0RhdGEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCByZXNvbHZlRGVsdGEob2xkRGF0YTogUmVjb3JkPHN0cmluZywgYW55PiwgbmV3RGF0YTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICAgICAgICAvLyBGbGFncyBtdXN0IGJlIGZ1bGx5IHJlc29sdmVkXG4gICAgICAgIGNvbnN0IGRlbHRhID0geyAuLi5mbGF0dGVuT2JqZWN0KHsgZmxhZ3M6IHRoaXMuZG9jdW1lbnQuZGF0YVsnZmxhZ3MnXSB9KSB9O1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIG5ld1ZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhuZXdEYXRhKSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBvbGREYXRhW2tleV07XG5cbiAgICAgICAgICAgIC8vIEFycmF5cyBkb250IG1ha2Ugc2Vuc2Ugb24gUERGcyB3aGljaCBhcmUgbm90IGR5bmFtaWNcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5ld1ZhbHVlKSB8fCBBcnJheS5pc0FycmF5KG9sZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkZWx0YVtrZXldO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTa2lwIG1hdGNoaW5nIHZhbHVlc1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgbmV3VmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbHRhW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVmcmVzaFRpdGxlKCk6IHZvaWQge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkuZmluZCgnLndpbmRvdy10aXRsZScpLnRleHQodGhpcy50aXRsZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVXBkYXRlRW50aXR5KFxuICAgICAgICBhY3RvcjogQWN0b3IsXG4gICAgICAgIGRhdGE6IFBhcnRpYWw8Q29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBmb3VuZHJ5LmRvY3VtZW50cy5CYXNlQWN0b3I+WzBdPiAmIHsgX2lkOiBzdHJpbmcgfSxcbiAgICAgICAgb3B0aW9uczogeyBkaWZmOiBib29sZWFuIH0sXG4gICAgICAgIGlkOiBzdHJpbmcsXG4gICAgKSB7XG4gICAgICAgIGlmIChkYXRhLl9pZCAhPT0gdGhpcy5kb2N1bWVudC5pZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJncyA9IGR1cGxpY2F0ZShkYXRhKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBkZWxldGUgYXJnc1snX2lkJ107XG5cbiAgICAgICAgY29uc3QgZWxlbWVudHNUb1VwZGF0ZSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0Jyk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUlucHV0cyhlbGVtZW50c1RvVXBkYXRlKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoVGl0bGUoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgdXBkYXRlKGRlbHRhOiBvYmplY3QpIHtcbiAgICAgICAgLy8gZGF0YSBtdXN0IGJlIGV4cGFuZGVkIHRvIHNldCBwcm9wZXJseVxuICAgICAgICAvLyBUT0RPOiBGbGFncyBzZWVtIHRvIGJlIGFsd2F5cyBzZXQgLSBkZWx0YSBuZWVkcyBjaGVja2luZ1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC51cGRhdGUoZXhwYW5kT2JqZWN0KGRlbHRhKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRpYWxpemVUZXh0SW5wdXQoXG4gICAgICAgIGlucHV0OiBKUXVlcnk8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudD4sXG4gICAgICAgIGtleTogc3RyaW5nLFxuICAgICAgICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBkYXRhW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBJZiB2YWx1ZSBkb2VzIG5vdCBleGlzdCBvbiBhY3RvciB5ZXQsIGxvYWQgZnJvbSBzaGVldFxuICAgICAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IGlucHV0LnZhbCgpO1xuXG4gICAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEFjdG9yIGNoYW5nZXMgd2VyZSBtYWRlXG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gaW5wdXRWYWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGluaXRpYWxpemUgaW5wdXQgdmFsdWUgdG8gYWN0b3IgdmFsdWVcbiAgICAgICAgICAgIHRoaXMuc2V0VGV4dElucHV0KGlucHV0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpbml0aWFsaXplQ2hlY2tJbnB1dChpbnB1dDogSlF1ZXJ5PEhUTUxJbnB1dEVsZW1lbnQ+LCBrZXk6IHN0cmluZywgZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBkYXRhW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFZhbHVlID0gaW5wdXQuYXR0cignY2hlY2tlZCcpICE9PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIC8vIEFjdG9yIGNoYW5nZXMgd2VyZSBtYWRlXG4gICAgICAgICAgICBkYXRhW2tleV0gPSBpbnB1dFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tJbnB1dChpbnB1dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZVJhZGlvSW5wdXQoaW5wdXQ6IEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50Piwga2V5OiBzdHJpbmcsIGRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZGF0YVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIGRhdGFba2V5XSA9IHRoaXMuZ2V0UmFkaW9JbnB1dFZhbHVlKGlucHV0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgd2UncmUgbG9va2luZyBhdCB0aGUgcmlnaHQgcmFkaW8gZm9yIHRoZSBncm91cCBlbmFibGUgaXRcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV0gPT09IGlucHV0LmF0dHIoJ2lkJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENoZWNrSW5wdXQoaW5wdXQsICd0cnVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tJbnB1dChpbnB1dCwgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRUZXh0SW5wdXQoaW5wdXQ6IEpRdWVyeTxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50PiwgdmFsdWU6IHN0cmluZykge1xuICAgICAgICBpbnB1dC52YWwodmFsdWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRDaGVja0lucHV0KGlucHV0OiBKUXVlcnk8SFRNTElucHV0RWxlbWVudD4sIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIGlucHV0LmF0dHIoJ2NoZWNrZWQnLCAndHJ1ZScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQucmVtb3ZlQXR0cignY2hlY2tlZCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFRleHRJbnB1dFZhbHVlKGlucHV0OiBKUXVlcnk8SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudD4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnZhbCgpO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldENoZWNrSW5wdXRWYWx1ZShpbnB1dDogSlF1ZXJ5PEhUTUxJbnB1dEVsZW1lbnQ+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dC5nZXQoMCkhLCAnOmJlZm9yZScpLmNvbnRlbnQgIT09ICdub25lJykudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0UmFkaW9JbnB1dFZhbHVlKGlucHV0OiBKUXVlcnk8SFRNTElucHV0RWxlbWVudD4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBuYW1lID0gaW5wdXQuYXR0cignbmFtZScpO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9ICQodGhpcy5jb250YWluZXIpLmZpbmQoYGlucHV0W25hbWU9XCIke25hbWV9XCJdYCkgYXMgSlF1ZXJ5PEhUTUxFbGVtZW50PjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzLmdldChpKTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50ISwgJzpiZWZvcmUnKS5jb250ZW50ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudCEuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGFzeW5jIGNsb3NlKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIGF3YWl0IHRoaXMuc2V0QWN0b3JEYXRhKHRoaXMuYWN0b3JEYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdlcikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdmlld2VyLmNsb3NlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVuYmluZEhvb2tzKCk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBBbmRyZXcgQ3VjY2luZWxsb1xuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQREZEYXRhIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL1BERkRhdGEnO1xuaW1wb3J0IEJhc2VWaWV3ZXIgZnJvbSAnLi9CYXNlVmlld2VyJztcbmltcG9ydCBQbGF5ZXJTZWxlY3QgZnJvbSAnLi4vYXBwL1BsYXllclNlbGVjdCc7XG5pbXBvcnQgeyBnZXRVc2VySWRzRXhjZXB0TWUgfSBmcm9tICcuLi9VdGlsJztcbmltcG9ydCBTZXRWaWV3RXZlbnQgZnJvbSAnLi4vc29ja2V0L2V2ZW50cy9TZXRWaWV3RXZlbnQnO1xuaW1wb3J0IHsgUERGVHlwZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9QREZUeXBlJztcblxuLyoqXG4gKiBUaGUgUERGb3VuZHJ5IFN0YXRpY1ZpZXdlciBjbGFzcyBvcGVucyBQREZzIGFuZCBwcm92aWRlcyBldmVudCBob29rcyBmb3Igb2JzZXJ2aW5nIHRoZSB2aWV3ZXIuXG4gKiBTdGF0aWMgdmlld2VycyBkaXNwbGF5IGEgUERGIGJ1dCBkbyBub3QgcmVuZGVyIG9yIGluc3RhbnRpYXRlIGFueSBmaWxsYWJsZSBmaWVsZHMgb3IgdGhlaXIgZGF0YS5cbiAqXG4gKiBZb3UgY2Fubm90IGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzLCB5b3UgbXVzdCBkbyBzbyB3aXRoIHRoZSBBUEkuXG4gKlxuICogU2VlIHtAbGluayBBcGkub3BlblBERn0sIHtAbGluayBBcGkub3BlblBERkJ5Q29kZX0sIHtAbGluayBBcGkub3BlblBERkJ5TmFtZX0sIHtAbGluayBBcGkub3BlblVSTH1cbiAqICB3aGljaCBhbGwgcmV0dXJuIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlIHdpdGggYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAqIEBtb2R1bGUgQVBJXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRpY1ZpZXdlciBleHRlbmRzIEJhc2VWaWV3ZXIge1xuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiUHJvcGVydGllc1wiPlxuXG4gICAgcHJvdGVjdGVkIF9wZGZEYXRhOiBQREZEYXRhO1xuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiQ29uc3RydWN0b3IgJiBJbml0aWFsaXphdGlvblwiPlxuXG4gICAgY29uc3RydWN0b3IocGRmRGF0YT86IFBERkRhdGEsIG9wdGlvbnM/OiBBcHBsaWNhdGlvbi5PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwZGZEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBkZkRhdGEgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdQREZPVU5EUlkuVklFV0VSLlZpZXdQREYnKSxcbiAgICAgICAgICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgdXJsOiAnJyxcbiAgICAgICAgICAgICAgICB0eXBlOiBQREZUeXBlLlN0YXRpYyxcbiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGRmRGF0YSA9IHBkZkRhdGE7XG4gICAgfVxuXG4gICAgLy8gPC9lZGl0b3ItZm9sZD5cblxuICAgIC8vIDxlZGl0b3ItZm9sZCBkZXNjPVwiR2V0dGVycyAmIFNldHRlcnNcIj5cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBQREZEYXRhIHRoaXMgdmlld2VyIGlzIHVzaW5nLlxuICAgICAqIENoYW5nZXMgdG8gdGhpcyBkYXRhIHdpbGwgbm90IHJlZmxlY3QgaW4gdGhlIHZpZXdlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHBkZkRhdGEoKSB7XG4gICAgICAgIHJldHVybiBkdXBsaWNhdGUodGhpcy5fcGRmRGF0YSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB0aXRsZSgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdGl0bGUgPSB0aGlzLl9wZGZEYXRhLm5hbWU7XG4gICAgICAgIGlmICh0aGlzLl9wZGZEYXRhLmNvZGUgIT09ICcnKSB7XG4gICAgICAgICAgICB0aXRsZSA9IGAke3RpdGxlfSAoJHt0aGlzLl9wZGZEYXRhLmNvZGV9KWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH1cblxuICAgIC8vIDwvZWRpdG9yLWZvbGQ+XG5cbiAgICAvLyA8ZWRpdG9yLWZvbGQgZGVzYz1cIkZvdW5kcnkgT3ZlcnJpZGVzXCI+XG5cbiAgICBwcm90ZWN0ZWQgX2dldEhlYWRlckJ1dHRvbnMoKTogYW55W10ge1xuICAgICAgICBjb25zdCBidXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKTtcblxuICAgICAgICBidXR0b25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgY2xhc3M6ICdwZGYtc2hlZXQtc2hvdy1wbGF5ZXJzJyxcbiAgICAgICAgICAgIGljb246ICdmYXMgZmEtZXllJyxcbiAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1BERk9VTkRSWS5WSUVXRVIuU2hvd1RvUGxheWVyc1RleHQnKSxcbiAgICAgICAgICAgIG9uY2xpY2s6IChldmVudCkgPT4gdGhpcy5zaG93VG8oZXZlbnQpLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYnV0dG9ucztcbiAgICB9XG5cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxuXG4gICAgLy8gPGVkaXRvci1mb2xkIGRlc2M9XCJJbnN0YW5jZSBNZXRob2RzXCI+XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBjdXJyZW50IHBhZ2UgdG8gR01zLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzaG93VG8oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgcGRmRGF0YSA9IHRoaXMucGRmRGF0YTtcbiAgICAgICAgcGRmRGF0YS5vZmZzZXQgPSAwO1xuXG4gICAgICAgIGNvbnN0IGlkcyA9IGdldFVzZXJJZHNFeGNlcHRNZSgpO1xuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgIG5ldyBTZXRWaWV3RXZlbnQoaWRzIGFzIHN0cmluZ1tdLCBwZGZEYXRhLCB0aGlzLnBhZ2UpLmVtaXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ldyBQbGF5ZXJTZWxlY3QoaWRzIGFzIHN0cmluZ1tdLCAoZmlsdGVyZWRJZHMpID0+IHtcbiAgICAgICAgICAgICAgICBuZXcgU2V0Vmlld0V2ZW50KGZpbHRlcmVkSWRzLCBwZGZEYXRhLCB0aGlzLnBhZ2UpLmVtaXQoKTtcbiAgICAgICAgICAgIH0pLnJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyA8L2VkaXRvci1mb2xkPlxufVxuIl19"}